; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\checkbox.o --depend=.\Obj\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\checkbox.crf ..\Ucgui\GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;113    */
;;;114    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;115      GUI_RECT RectBox = {0};
00000a  2000              MOVS     r0,#0
00000c  9004              STR      r0,[sp,#0x10]
00000e  9005              STR      r0,[sp,#0x14]
;;;116      int ColorIndex, EffectSize;
;;;117      EffectSize = pObj->Widget.pEffect->EffectSize;
000010  6a20              LDR      r0,[r4,#0x20]
000012  6945              LDR      r5,[r0,#0x14]
;;;118      ColorIndex = WM__IsEnabled(hObj);
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       WM__IsEnabled
00001a  4681              MOV      r9,r0
;;;119      /* Clear inside ... Just in case      */
;;;120      /* Fill with parents background color */
;;;121    #if WM_SUPPORT_TRANSPARENCY
;;;122      if (!WM_GetHasTrans(hObj))
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       WM_GetHasTrans
000022  b980              CBNZ     r0,|L1.70|
;;;123    #endif
;;;124      {
;;;125        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000024  f06f4170          MVN      r1,#0xf0000000
000028  6b60              LDR      r0,[r4,#0x34]
00002a  4288              CMP      r0,r1
00002c  d106              BNE      |L1.60|
;;;126          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       WIDGET__GetBkColor
000034  4606              MOV      r6,r0
000036  f7fffffe          BL       LCD_SetBkColor
00003a  e002              B        |L1.66|
                  |L1.60|
;;;127        } else {
;;;128          LCD_SetBkColor(pObj->Props.BkColor);
00003c  6b60              LDR      r0,[r4,#0x34]
00003e  f7fffffe          BL       LCD_SetBkColor
                  |L1.66|
;;;129        }
;;;130        GUI_Clear();
000042  f7fffffe          BL       GUI_Clear
                  |L1.70|
;;;131      }
;;;132      /* Get size from bitmap */
;;;133      RectBox.x1 = pObj->Props.apBm[0]->XSize - 1 + 2 * EffectSize;
000046  6c20              LDR      r0,[r4,#0x40]
000048  8800              LDRH     r0,[r0,#0]
00004a  1e40              SUBS     r0,r0,#1
00004c  2102              MOVS     r1,#2
00004e  fb010005          MLA      r0,r1,r5,r0
000052  b200              SXTH     r0,r0
000054  f8ad0014          STRH     r0,[sp,#0x14]
;;;134      RectBox.y1 = pObj->Props.apBm[0]->YSize - 1 + 2 * EffectSize;
000058  6c20              LDR      r0,[r4,#0x40]
00005a  8840              LDRH     r0,[r0,#2]
00005c  1e40              SUBS     r0,r0,#1
00005e  fb010005          MLA      r0,r1,r5,r0
000062  b200              SXTH     r0,r0
000064  f8ad0016          STRH     r0,[sp,#0x16]
;;;135      WM_SetUserClipRect(&RectBox);
000068  a804              ADD      r0,sp,#0x10
00006a  f7fffffe          BL       WM_SetUserClipRect
;;;136      /* Clear inside  ... Just in case */
;;;137      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
00006e  f104012c          ADD      r1,r4,#0x2c
000072  f8510029          LDR      r0,[r1,r9,LSL #2]
000076  f7fffffe          BL       LCD_SetBkColor
;;;138      GUI_Clear();
00007a  f7fffffe          BL       GUI_Clear
;;;139      if (pObj->CurrentState) {
00007e  f8940051          LDRB     r0,[r4,#0x51]
000082  b168              CBZ      r0,|L1.160|
;;;140        int Index = (pObj->CurrentState - 1) * 2 + ColorIndex;
000084  f8940051          LDRB     r0,[r4,#0x51]
000088  1e40              SUBS     r0,r0,#1
00008a  eb090640          ADD      r6,r9,r0,LSL #1
;;;141        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
00008e  f1040140          ADD      r1,r4,#0x40
000092  f8510026          LDR      r0,[r1,r6,LSL #2]
000096  462a              MOV      r2,r5
000098  4629              MOV      r1,r5
00009a  f7fffffe          BL       GUI_DrawBitmap
;;;142      }
00009e  bf00              NOP      
                  |L1.160|
;;;143      /* Draw the effect arround the box */
;;;144      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
0000a0  a904              ADD      r1,sp,#0x10
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;145      WM_SetUserClipRect(NULL);
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       WM_SetUserClipRect
;;;146      /* Draw text if needed */
;;;147      if (pObj->hpText) {
0000ae  f8b40052          LDRH     r0,[r4,#0x52]
0000b2  b3e8              CBZ      r0,|L1.304|
;;;148        const char * s;
;;;149        GUI_RECT RectText;
;;;150        /* Draw the text */
;;;151        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
0000b4  f9b40052          LDRSH    r0,[r4,#0x52]
0000b8  f7fffffe          BL       GUI_ALLOC_h2p
0000bc  4682              MOV      r10,r0
;;;152        WM_GetClientRect(&RectText);
0000be  a802              ADD      r0,sp,#8
0000c0  f7fffffe          BL       WM_GetClientRect
;;;153        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000c4  f8bd0014          LDRH     r0,[sp,#0x14]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  213e              MOVS     r1,#0x3e
0000cc  5d09              LDRB     r1,[r1,r4]
0000ce  4408              ADD      r0,r0,r1
0000d0  f8bd1008          LDRH     r1,[sp,#8]
0000d4  4408              ADD      r0,r0,r1
0000d6  b200              SXTH     r0,r0
0000d8  f8ad0008          STRH     r0,[sp,#8]
;;;154        GUI_SetTextMode(GUI_TM_TRANS);
0000dc  2002              MOVS     r0,#2
0000de  f7fffffe          BL       GUI_SetTextMode
;;;155        LCD_SetColor(pObj->Props.TextColor);
0000e2  6ba0              LDR      r0,[r4,#0x38]
0000e4  f7fffffe          BL       LCD_SetColor
;;;156        GUI_SetFont(pObj->Props.pFont);
0000e8  6aa0              LDR      r0,[r4,#0x28]
0000ea  f7fffffe          BL       GUI_SetFont
;;;157        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
0000ee  f9b4203c          LDRSH    r2,[r4,#0x3c]
0000f2  a902              ADD      r1,sp,#8
0000f4  4650              MOV      r0,r10
0000f6  f7fffffe          BL       GUI_DispStringInRect
;;;158        /* Draw focus rectangle */
;;;159        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
0000fa  8ce0              LDRH     r0,[r4,#0x26]
0000fc  f0100f01          TST      r0,#1
000100  d061              BEQ      |L1.454|
;;;160          int xSizeText = GUI_GetStringDistX(s);
000102  4650              MOV      r0,r10
000104  f7fffffe          BL       GUI_GetStringDistX
000108  4606              MOV      r6,r0
;;;161          int ySizeText = GUI_GetFontSizeY();
00010a  f7fffffe          BL       GUI_GetFontSizeY
00010e  4607              MOV      r7,r0
;;;162          GUI_RECT RectFocus = RectText;
000110  e9dd0102          LDRD     r0,r1,[sp,#8]
000114  e9cd0100          STRD     r0,r1,[sp,#0]
;;;163          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
000118  f9b4003c          LDRSH    r0,[r4,#0x3c]
00011c  f0200003          BIC      r0,r0,#3
000120  2804              CMP      r0,#4
000122  d00d              BEQ      |L1.320|
000124  280c              CMP      r0,#0xc
000126  d112              BNE      |L1.334|
;;;164          case GUI_TA_VCENTER:
;;;165            RectFocus.y0 = (RectText.y1 - ySizeText) / 2;
000128  f9bd100e          LDRSH    r1,[sp,#0xe]
00012c  1bc8              SUBS     r0,r1,r7
00012e  e000              B        |L1.306|
                  |L1.304|
000130  e04a              B        |L1.456|
                  |L1.306|
000132  eb0071d0          ADD      r1,r0,r0,LSR #31
000136  1049              ASRS     r1,r1,#1
000138  b209              SXTH     r1,r1
00013a  f8ad1002          STRH     r1,[sp,#2]
;;;166            break;
00013e  e006              B        |L1.334|
                  |L1.320|
;;;167          case GUI_TA_BOTTOM:
;;;168            RectFocus.y0 = RectText.y1 - ySizeText;
000140  f8bd000e          LDRH     r0,[sp,#0xe]
000144  1bc0              SUBS     r0,r0,r7
000146  b200              SXTH     r0,r0
000148  f8ad0002          STRH     r0,[sp,#2]
;;;169            break;
00014c  bf00              NOP      
                  |L1.334|
00014e  bf00              NOP                            ;166
;;;170          }
;;;171          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
000150  f9b4003c          LDRSH    r0,[r4,#0x3c]
000154  f020000c          BIC      r0,r0,#0xc
000158  2801              CMP      r0,#1
00015a  d011              BEQ      |L1.384|
00015c  2802              CMP      r0,#2
00015e  d11c              BNE      |L1.410|
;;;172          case GUI_TA_HCENTER:
;;;173            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
000160  f9bd100c          LDRSH    r1,[sp,#0xc]
000164  f9bd2008          LDRSH    r2,[sp,#8]
000168  1a89              SUBS     r1,r1,r2
00016a  1b88              SUBS     r0,r1,r6
00016c  eb0071d0          ADD      r1,r0,r0,LSR #31
000170  f8bd2000          LDRH     r2,[sp,#0]
000174  eb020161          ADD      r1,r2,r1,ASR #1
000178  b209              SXTH     r1,r1
00017a  f8ad1000          STRH     r1,[sp,#0]
;;;174            break;
00017e  e00c              B        |L1.410|
                  |L1.384|
;;;175          case GUI_TA_RIGHT:
;;;176            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
000180  f8bd000c          LDRH     r0,[sp,#0xc]
000184  f8bd1008          LDRH     r1,[sp,#8]
000188  1a40              SUBS     r0,r0,r1
00018a  1b80              SUBS     r0,r0,r6
00018c  f8bd1000          LDRH     r1,[sp,#0]
000190  4408              ADD      r0,r0,r1
000192  b200              SXTH     r0,r0
000194  f8ad0000          STRH     r0,[sp,#0]
;;;177            break;
000198  bf00              NOP      
                  |L1.410|
00019a  bf00              NOP                            ;174
;;;178          }
;;;179          RectFocus.x1 = RectFocus.x0 + xSizeText;
00019c  f8bd0000          LDRH     r0,[sp,#0]
0001a0  4430              ADD      r0,r0,r6
0001a2  b200              SXTH     r0,r0
0001a4  f8ad0004          STRH     r0,[sp,#4]
;;;180          RectFocus.y1 = RectFocus.y0 + ySizeText;
0001a8  f8bd0002          LDRH     r0,[sp,#2]
0001ac  4438              ADD      r0,r0,r7
0001ae  b200              SXTH     r0,r0
0001b0  f8ad0006          STRH     r0,[sp,#6]
;;;181          LCD_SetColor(GUI_BLACK);
0001b4  2000              MOVS     r0,#0
0001b6  f7fffffe          BL       LCD_SetColor
;;;182          WIDGET__DrawFocusRect(&pObj->Widget, &RectFocus, 0);
0001ba  2200              MOVS     r2,#0
0001bc  4669              MOV      r1,sp
0001be  4620              MOV      r0,r4
0001c0  f7fffffe          BL       WIDGET__DrawFocusRect
;;;183        }
0001c4  bf00              NOP      
                  |L1.454|
;;;184      }
0001c6  bf00              NOP      
                  |L1.456|
;;;185    }
0001c8  b006              ADD      sp,sp,#0x18
0001ca  e8bd87f0          POP      {r4-r10,pc}
;;;186    
                          ENDP

                  _OnTouch PROC
;;;190    */
;;;191    static void _OnTouch(CHECKBOX_Handle hObj, CHECKBOX_Obj* pObj, WM_MESSAGE*pMsg) {
0001ce  e92d47f0          PUSH     {r4-r10,lr}
0001d2  4606              MOV      r6,r0
0001d4  460c              MOV      r4,r1
0001d6  4615              MOV      r5,r2
;;;192      int Notification = 0;
0001d8  2700              MOVS     r7,#0
;;;193      int Hit = 0;
0001da  46b8              MOV      r8,r7
;;;194      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
0001dc  f8d59008          LDR      r9,[r5,#8]
;;;195      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
0001e0  68a8              LDR      r0,[r5,#8]
0001e2  b300              CBZ      r0,|L1.550|
;;;196        if (!WM_HasCaptured(hObj)) {
0001e4  4630              MOV      r0,r6
0001e6  f7fffffe          BL       WM_HasCaptured
0001ea  b9e8              CBNZ     r0,|L1.552|
;;;197          if (pState->Pressed) {
0001ec  f8990008          LDRB     r0,[r9,#8]
0001f0  b1a8              CBZ      r0,|L1.542|
;;;198            WM_SetCapture(hObj, 1);
0001f2  2101              MOVS     r1,#1
0001f4  4630              MOV      r0,r6
0001f6  f7fffffe          BL       WM_SetCapture
;;;199            pObj->CurrentState = (pObj->CurrentState + 1) % pObj->NumStates;
0001fa  f1040450          ADD      r4,r4,#0x50
0001fe  7860              LDRB     r0,[r4,#1]
000200  f1000001          ADD      r0,r0,#1
000204  7821              LDRB     r1,[r4,#0]
000206  fb90f2f1          SDIV     r2,r0,r1
00020a  fb010012          MLS      r0,r1,r2,r0
00020e  7060              STRB     r0,[r4,#1]
000210  f1a40450          SUB      r4,r4,#0x50
;;;200            WM_Invalidate(hObj);
000214  4630              MOV      r0,r6
000216  f7fffffe          BL       WM_InvalidateWindow
;;;201            Notification = WM_NOTIFICATION_CLICKED;
00021a  2701              MOVS     r7,#1
00021c  e004              B        |L1.552|
                  |L1.542|
;;;202          } else {
;;;203            Hit =1;
00021e  f04f0801          MOV      r8,#1
;;;204            Notification = WM_NOTIFICATION_RELEASED;
000222  2702              MOVS     r7,#2
000224  e000              B        |L1.552|
                  |L1.550|
;;;205          }
;;;206        }
;;;207      } else {
;;;208        Notification = WM_NOTIFICATION_MOVED_OUT;
000226  2703              MOVS     r7,#3
                  |L1.552|
;;;209      }
;;;210      WM_NotifyParent(hObj, Notification);
000228  4639              MOV      r1,r7
00022a  4630              MOV      r0,r6
00022c  f7fffffe          BL       WM_NotifyParent
;;;211      if (Hit == 1) {
000230  f1b80f01          CMP      r8,#1
000234  d103              BNE      |L1.574|
;;;212        GUI_DEBUG_LOG("CHECKBOX: Hit\n");
;;;213        GUI_StoreKey(pObj->Widget.Id);
000236  f9b40024          LDRSH    r0,[r4,#0x24]
00023a  f7fffffe          BL       GUI_StoreKey
                  |L1.574|
;;;214      }
;;;215    }
00023e  e8bd87f0          POP      {r4-r10,pc}
;;;216    
                          ENDP

                  _OnKey PROC
;;;220    */
;;;221    static void  _OnKey(CHECKBOX_Handle hObj, CHECKBOX_Obj * pObj, WM_MESSAGE * pMsg) {
000242  e92d41f0          PUSH     {r4-r8,lr}
000246  4607              MOV      r7,r0
000248  460c              MOV      r4,r1
00024a  4616              MOV      r6,r2
;;;222      WM_KEY_INFO * pKeyInfo;
;;;223      if (WM__IsEnabled(hObj)) {
00024c  4638              MOV      r0,r7
00024e  f7fffffe          BL       WM__IsEnabled
000252  b1c0              CBZ      r0,|L1.646|
;;;224        pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
000254  68b5              LDR      r5,[r6,#8]
;;;225        if (pKeyInfo->PressedCnt > 0) {
000256  6868              LDR      r0,[r5,#4]
000258  2800              CMP      r0,#0
00025a  dd14              BLE      |L1.646|
;;;226          switch (pKeyInfo->Key) {
00025c  6828              LDR      r0,[r5,#0]
00025e  2820              CMP      r0,#0x20
000260  d110              BNE      |L1.644|
;;;227          case GUI_KEY_SPACE:
;;;228            pObj->CurrentState = (pObj->CurrentState + 1) % pObj->NumStates;
000262  f1040450          ADD      r4,r4,#0x50
000266  7860              LDRB     r0,[r4,#1]
000268  f1000001          ADD      r0,r0,#1
00026c  7821              LDRB     r1,[r4,#0]
00026e  fb90f2f1          SDIV     r2,r0,r1
000272  fb010012          MLS      r0,r1,r2,r0
000276  7060              STRB     r0,[r4,#1]
000278  f1a40450          SUB      r4,r4,#0x50
;;;229            WM_Invalidate(hObj);
00027c  4638              MOV      r0,r7
00027e  f7fffffe          BL       WM_InvalidateWindow
;;;230            break;                    /* Send to parent by not doing anything */
000282  bf00              NOP      
                  |L1.644|
000284  bf00              NOP      
                  |L1.646|
;;;231          }
;;;232        }
;;;233      }
;;;234    }
000286  e8bd81f0          POP      {r4-r8,pc}
;;;235    
                          ENDP

                  _CHECKBOX_Callback PROC
;;;239    */
;;;240    static void _CHECKBOX_Callback (WM_MESSAGE *pMsg) {
00028a  b570              PUSH     {r4-r6,lr}
00028c  4604              MOV      r4,r0
;;;241      CHECKBOX_Handle hObj;
;;;242      CHECKBOX_Obj* pObj;
;;;243      hObj = pMsg->hWin;
00028e  f9b45004          LDRSH    r5,[r4,#4]
;;;244      pObj = CHECKBOX_H2P(hObj);
000292  4628              MOV      r0,r5
000294  f7fffffe          BL       GUI_ALLOC_h2p
000298  4606              MOV      r6,r0
;;;245      /* Let widget handle the standard messages */
;;;246      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
00029a  4621              MOV      r1,r4
00029c  4628              MOV      r0,r5
00029e  f7fffffe          BL       WIDGET_HandleActive
0002a2  b900              CBNZ     r0,|L1.678|
                  |L1.676|
;;;247        return;
;;;248      }
;;;249      switch (pMsg->MsgId) {
;;;250      case WM_KEY:
;;;251        _OnKey(hObj, pObj, pMsg);
;;;252        break;
;;;253      case WM_PAINT:
;;;254        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;255        _Paint(pObj, hObj);
;;;256        return;
;;;257      case WM_TOUCH:
;;;258        _OnTouch(hObj, pObj, pMsg);
;;;259        break;
;;;260      }
;;;261      WM_DefaultProc(pMsg);
;;;262    }
0002a4  bd70              POP      {r4-r6,pc}
                  |L1.678|
0002a6  6820              LDR      r0,[r4,#0]            ;249
0002a8  280c              CMP      r0,#0xc               ;249
0002aa  d00f              BEQ      |L1.716|
0002ac  280e              CMP      r0,#0xe               ;249
0002ae  d002              BEQ      |L1.694|
0002b0  280f              CMP      r0,#0xf               ;249
0002b2  d111              BNE      |L1.728|
0002b4  e005              B        |L1.706|
                  |L1.694|
0002b6  4622              MOV      r2,r4                 ;251
0002b8  4631              MOV      r1,r6                 ;251
0002ba  4628              MOV      r0,r5                 ;251
0002bc  f7fffffe          BL       _OnKey
0002c0  e00a              B        |L1.728|
                  |L1.706|
0002c2  4629              MOV      r1,r5                 ;255
0002c4  4630              MOV      r0,r6                 ;255
0002c6  f7fffffe          BL       _Paint
0002ca  e7eb              B        |L1.676|
                  |L1.716|
0002cc  4622              MOV      r2,r4                 ;258
0002ce  4631              MOV      r1,r6                 ;258
0002d0  4628              MOV      r0,r5                 ;258
0002d2  f7fffffe          BL       _OnTouch
0002d6  bf00              NOP                            ;259
                  |L1.728|
0002d8  bf00              NOP                            ;252
0002da  4620              MOV      r0,r4                 ;261
0002dc  f7fffffe          BL       WM_DefaultProc
0002e0  bf00              NOP      
0002e2  e7df              B        |L1.676|
;;;263    
                          ENDP

                  CHECKBOX_CreateEx PROC
;;;277    */
;;;278    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
0002e4  e92d4fff          PUSH     {r0-r11,lr}
;;;279                                        int WinFlags, int ExFlags, int Id)
;;;280    {
0002e8  b085              SUB      sp,sp,#0x14
0002ea  4681              MOV      r9,r0
0002ec  468a              MOV      r10,r1
0002ee  4614              MOV      r4,r2
0002f0  461d              MOV      r5,r3
0002f2  e9ddb812          LDRD     r11,r8,[sp,#0x48]
;;;281      CHECKBOX_Handle hObj;
;;;282      GUI_USE_PARA(ExFlags);
0002f6  9814              LDR      r0,[sp,#0x50]
0002f8  9014              STR      r0,[sp,#0x50]
;;;283      WM_LOCK();
0002fa  f7fffffe          BL       GUI_Lock
;;;284      /* Calculate size if needed */
;;;285      if ((xsize == 0) || (ysize == 0)) {
0002fe  b104              CBZ      r4,|L1.770|
000300  b98d              CBNZ     r5,|L1.806|
                  |L1.770|
;;;286        int EffectSize;
;;;287        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
000302  f7fffffe          BL       WIDGET_GetDefaultEffect
000306  6947              LDR      r7,[r0,#0x14]
;;;288        if (xsize == 0) {
000308  b92c              CBNZ     r4,|L1.790|
;;;289          xsize = CHECKBOX__DefaultProps.apBm[0]->XSize + 2 * EffectSize;
00030a  481f              LDR      r0,|L1.904|
00030c  6980              LDR      r0,[r0,#0x18]  ; CHECKBOX__DefaultProps
00030e  8800              LDRH     r0,[r0,#0]
000310  2102              MOVS     r1,#2
000312  fb010407          MLA      r4,r1,r7,r0
                  |L1.790|
;;;290        }
;;;291        if (ysize == 0) {
000316  b92d              CBNZ     r5,|L1.804|
;;;292          ysize = CHECKBOX__DefaultProps.apBm[0]->YSize + 2 * EffectSize;
000318  481b              LDR      r0,|L1.904|
00031a  6980              LDR      r0,[r0,#0x18]  ; CHECKBOX__DefaultProps
00031c  8840              LDRH     r0,[r0,#2]
00031e  2102              MOVS     r1,#2
000320  fb010507          MLA      r5,r1,r7,r0
                  |L1.804|
;;;293        }
;;;294      }
000324  bf00              NOP      
                  |L1.806|
;;;295    #if WM_SUPPORT_TRANSPARENCY
;;;296      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
000326  4818              LDR      r0,|L1.904|
000328  68c0              LDR      r0,[r0,#0xc]  ; CHECKBOX__DefaultProps
00032a  f06f4170          MVN      r1,#0xf0000000
00032e  4288              CMP      r0,r1
000330  d101              BNE      |L1.822|
;;;297        WinFlags |= WM_CF_HASTRANS;
000332  f0480801          ORR      r8,r8,#1
                  |L1.822|
;;;298      }
;;;299    #endif
;;;300      /* Create the window */
;;;301      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _CHECKBOX_Callback,
000336  2334              MOVS     r3,#0x34
000338  4a14              LDR      r2,|L1.908|
00033a  fa1ff188          UXTH     r1,r8
00033e  e9cdb100          STRD     r11,r1,[sp,#0]
000342  e9cd2302          STRD     r2,r3,[sp,#8]
000346  462b              MOV      r3,r5
000348  4622              MOV      r2,r4
00034a  4651              MOV      r1,r10
00034c  4648              MOV      r0,r9
00034e  f7fffffe          BL       WM_CreateWindowAsChild
000352  4606              MOV      r6,r0
;;;302                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;303      if (hObj) {
000354  b196              CBZ      r6,|L1.892|
;;;304        CHECKBOX_Obj* pObj = CHECKBOX_H2P(hObj);
000356  4630              MOV      r0,r6
000358  f7fffffe          BL       GUI_ALLOC_h2p
00035c  4607              MOV      r7,r0
;;;305        /* init widget specific variables */
;;;306        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
00035e  2210              MOVS     r2,#0x10
000360  4638              MOV      r0,r7
000362  9915              LDR      r1,[sp,#0x54]
000364  f7fffffe          BL       WIDGET__Init
;;;307        CHECKBOX_INIT_ID(pObj);
;;;308        /* init member variables */
;;;309        pObj->Props = CHECKBOX__DefaultProps;
000368  2228              MOVS     r2,#0x28
00036a  4907              LDR      r1,|L1.904|
00036c  f1070028          ADD      r0,r7,#0x28
000370  f7fffffe          BL       __aeabi_memcpy4
;;;310        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
000374  2002              MOVS     r0,#2
000376  f8870050          STRB     r0,[r7,#0x50]
;;;311      } else {
00037a  bf00              NOP      
                  |L1.892|
;;;312        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;313      }
;;;314      WM_UNLOCK();
00037c  f7fffffe          BL       GUI_Unlock
;;;315      return hObj;
000380  4630              MOV      r0,r6
;;;316    }
000382  b009              ADD      sp,sp,#0x24
000384  e8bd8ff0          POP      {r4-r11,pc}
;;;317    
                          ENDP

                  |L1.904|
                          DCD      CHECKBOX__DefaultProps
                  |L1.908|
                          DCD      _CHECKBOX_Callback

                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
000014  000c              DCW      0x000c
000016  0400              DCB      0x04,0x00
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
