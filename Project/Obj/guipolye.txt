; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\guipolye.o --depend=.\Obj\guipolye.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\guipolye.crf ..\Ucgui\GUI\Core\GUIPolyE.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _fround PROC
;;;44     */
;;;45     static int _fround(float f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;46       if (f>0)
000006  2100              MOVS     r1,#0
000008  4640              MOV      r0,r8
00000a  f7fffffe          BL       __aeabi_cfrcmple
00000e  d20c              BCS      |L1.42|
;;;47         return f+0.5;
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       __aeabi_f2d
000016  4606              MOV      r6,r0
000018  2200              MOVS     r2,#0
00001a  4b7e              LDR      r3,|L1.532|
00001c  f7fffffe          BL       __aeabi_dadd
000020  4604              MOV      r4,r0
000022  f7fffffe          BL       __aeabi_d2iz
                  |L1.38|
;;;48       return f-0.5;
;;;49     }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L1.42|
00002a  4640              MOV      r0,r8                 ;48
00002c  f7fffffe          BL       __aeabi_f2d
000030  4606              MOV      r6,r0                 ;48
000032  2200              MOVS     r2,#0                 ;48
000034  4b77              LDR      r3,|L1.532|
000036  f7fffffe          BL       __aeabi_dsub
00003a  4604              MOV      r4,r0                 ;48
00003c  f7fffffe          BL       __aeabi_d2iz
000040  e7f1              B        |L1.38|
;;;50     
                          ENDP

                  _Normalize PROC
;;;54     */
;;;55     static void _Normalize(tfPoint* pfPoint) {
000042  e92d5fff          PUSH     {r0-r12,lr}
000046  4606              MOV      r6,r0
;;;56       float fx = pfPoint->x;
000048  6837              LDR      r7,[r6,#0]
;;;57       float fy = pfPoint->y;
00004a  f8d68004          LDR      r8,[r6,#4]
;;;58       float r = sqrt(fx*fx + fy*fy);
00004e  4641              MOV      r1,r8
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       __aeabi_fmul
000056  4683              MOV      r11,r0
000058  4639              MOV      r1,r7
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       __aeabi_fmul
000060  4659              MOV      r1,r11
000062  9001              STR      r0,[sp,#4]
000064  f7fffffe          BL       __aeabi_fadd
000068  4682              MOV      r10,r0
00006a  f7fffffe          BL       __aeabi_f2d
00006e  e9cd0102          STRD     r0,r1,[sp,#8]
000072  f7fffffe          BL       sqrt
000076  4604              MOV      r4,r0
000078  f7fffffe          BL       __aeabi_d2f
00007c  4681              MOV      r9,r0
;;;59       if (r > 0) {
00007e  2100              MOVS     r1,#0
000080  4648              MOV      r0,r9
000082  f7fffffe          BL       __aeabi_cfrcmple
000086  d209              BCS      |L1.156|
;;;60         pfPoint->x = fx/r;
000088  4649              MOV      r1,r9
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       __aeabi_fdiv
000090  6030              STR      r0,[r6,#0]
;;;61         pfPoint->y = fy/r;
000092  4649              MOV      r1,r9
000094  4640              MOV      r0,r8
000096  f7fffffe          BL       __aeabi_fdiv
00009a  6070              STR      r0,[r6,#4]
                  |L1.156|
;;;62       }
;;;63     }
00009c  e8bd9fff          POP      {r0-r12,pc}
;;;64     
                          ENDP

                  _ReverseLen PROC
;;;68     */
;;;69     static void _ReverseLen(tfPoint* pfPoint) {
0000a0  e92d5fff          PUSH     {r0-r12,lr}
0000a4  4606              MOV      r6,r0
;;;70       float fx = pfPoint->x;
0000a6  6837              LDR      r7,[r6,#0]
;;;71       float fy = pfPoint->y;
0000a8  f8d68004          LDR      r8,[r6,#4]
;;;72       float r = sqrt(fx*fx/2 + fy*fy/2);
0000ac  4641              MOV      r1,r8
0000ae  4640              MOV      r0,r8
0000b0  f7fffffe          BL       __aeabi_fmul
0000b4  f04f4180          MOV      r1,#0x40000000
0000b8  9000              STR      r0,[sp,#0]
0000ba  f7fffffe          BL       __aeabi_fdiv
0000be  4683              MOV      r11,r0
0000c0  4639              MOV      r1,r7
0000c2  4638              MOV      r0,r7
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  f04f4180          MOV      r1,#0x40000000
0000cc  9000              STR      r0,[sp,#0]
0000ce  f7fffffe          BL       __aeabi_fdiv
0000d2  4659              MOV      r1,r11
0000d4  9001              STR      r0,[sp,#4]
0000d6  f7fffffe          BL       __aeabi_fadd
0000da  4682              MOV      r10,r0
0000dc  f7fffffe          BL       __aeabi_f2d
0000e0  e9cd0102          STRD     r0,r1,[sp,#8]
0000e4  f7fffffe          BL       sqrt
0000e8  4604              MOV      r4,r0
0000ea  f7fffffe          BL       __aeabi_d2f
0000ee  4681              MOV      r9,r0
;;;73       if (r > 0) {
0000f0  2100              MOVS     r1,#0
0000f2  4648              MOV      r0,r9
0000f4  f7fffffe          BL       __aeabi_cfrcmple
0000f8  d211              BCS      |L1.286|
;;;74         pfPoint->x = fx/r/r;
0000fa  4649              MOV      r1,r9
0000fc  4638              MOV      r0,r7
0000fe  f7fffffe          BL       __aeabi_fdiv
000102  4604              MOV      r4,r0
000104  4649              MOV      r1,r9
000106  f7fffffe          BL       __aeabi_fdiv
00010a  6030              STR      r0,[r6,#0]
;;;75         pfPoint->y = fy/r/r;
00010c  4649              MOV      r1,r9
00010e  4640              MOV      r0,r8
000110  f7fffffe          BL       __aeabi_fdiv
000114  4604              MOV      r4,r0
000116  4649              MOV      r1,r9
000118  f7fffffe          BL       __aeabi_fdiv
00011c  6070              STR      r0,[r6,#4]
                  |L1.286|
;;;76       }
;;;77     }
00011e  e8bd9fff          POP      {r0-r12,pc}
;;;78     
                          ENDP

                  _GetVect PROC
;;;82     */
;;;83     static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
000122  e92d47f0          PUSH     {r4-r10,lr}
000126  4606              MOV      r6,r0
000128  460c              MOV      r4,r1
00012a  4615              MOV      r5,r2
00012c  461f              MOV      r7,r3
;;;84       int Off0 = (Index + NumPoints-1) % NumPoints;
00012e  1978              ADDS     r0,r7,r5
000130  1e40              SUBS     r0,r0,#1
000132  fb90f1f5          SDIV     r1,r0,r5
000136  fb050811          MLS      r8,r5,r1,r0
;;;85       int Off1 = Index % NumPoints;
00013a  fb97f0f5          SDIV     r0,r7,r5
00013e  fb057910          MLS      r9,r5,r0,r7
;;;86       pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
000142  f9341029          LDRSH    r1,[r4,r9,LSL #2]
000146  f9342028          LDRSH    r2,[r4,r8,LSL #2]
00014a  1a88              SUBS     r0,r1,r2
00014c  f7fffffe          BL       __aeabi_i2f
000150  6030              STR      r0,[r6,#0]
;;;87       pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
000152  eb040189          ADD      r1,r4,r9,LSL #2
000156  f9b11002          LDRSH    r1,[r1,#2]
00015a  eb040288          ADD      r2,r4,r8,LSL #2
00015e  f9b22002          LDRSH    r2,[r2,#2]
000162  1a88              SUBS     r0,r1,r2
000164  f7fffffe          BL       __aeabi_i2f
000168  6070              STR      r0,[r6,#4]
;;;88     }
00016a  e8bd87f0          POP      {r4-r10,pc}
;;;89     
                          ENDP

                  GUI_EnlargePolygon PROC
;;;126    
;;;127    void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
00016e  e92d4ff0          PUSH     {r4-r11,lr}
000172  b085              SUB      sp,sp,#0x14
000174  4605              MOV      r5,r0
000176  460e              MOV      r6,r1
000178  4617              MOV      r7,r2
00017a  4698              MOV      r8,r3
;;;128      int j;
;;;129      /* Calc destination points */
;;;130      for (j=0; j<NumPoints; j++) {
00017c  2400              MOVS     r4,#0
00017e  e044              B        |L1.522|
                  |L1.384|
;;;131        int x, y;
;;;132        tfPoint aVect[2];
;;;133        /* Get the vectors */
;;;134        _GetVect(&aVect[0], pSrc, NumPoints, j);
000180  4623              MOV      r3,r4
000182  463a              MOV      r2,r7
000184  4631              MOV      r1,r6
000186  a801              ADD      r0,sp,#4
000188  f7fffffe          BL       _GetVect
;;;135        _GetVect(&aVect[1], pSrc, NumPoints, j+1);
00018c  1c63              ADDS     r3,r4,#1
00018e  463a              MOV      r2,r7
000190  4631              MOV      r1,r6
000192  a803              ADD      r0,sp,#0xc
000194  f7fffffe          BL       _GetVect
;;;136        /* Normalize the vectors and add vectors */
;;;137        _Normalize(&aVect[0]);
000198  a801              ADD      r0,sp,#4
00019a  f7fffffe          BL       _Normalize
;;;138        _Normalize(&aVect[1]);
00019e  a803              ADD      r0,sp,#0xc
0001a0  f7fffffe          BL       _Normalize
;;;139        aVect[0].x += aVect[1].x;
0001a4  9903              LDR      r1,[sp,#0xc]
0001a6  9801              LDR      r0,[sp,#4]
0001a8  f7fffffe          BL       __aeabi_fadd
0001ac  9001              STR      r0,[sp,#4]
;;;140        aVect[0].y += aVect[1].y;
0001ae  9904              LDR      r1,[sp,#0x10]
0001b0  9802              LDR      r0,[sp,#8]
0001b2  f7fffffe          BL       __aeabi_fadd
0001b6  9002              STR      r0,[sp,#8]
;;;141        /* Resulting vector needs to be normalized again */
;;;142        _ReverseLen(&aVect[0]);
0001b8  a801              ADD      r0,sp,#4
0001ba  f7fffffe          BL       _ReverseLen
;;;143        x =  _fround(aVect[0].y * Len);
0001be  4640              MOV      r0,r8
0001c0  f7fffffe          BL       __aeabi_i2f
0001c4  9000              STR      r0,[sp,#0]
0001c6  9902              LDR      r1,[sp,#8]
0001c8  f7fffffe          BL       __aeabi_fmul
0001cc  4683              MOV      r11,r0
0001ce  f7fffffe          BL       _fround
0001d2  4681              MOV      r9,r0
;;;144        y = -_fround(aVect[0].x * Len);
0001d4  4640              MOV      r0,r8
0001d6  f7fffffe          BL       __aeabi_i2f
0001da  9000              STR      r0,[sp,#0]
0001dc  9901              LDR      r1,[sp,#4]
0001de  f7fffffe          BL       __aeabi_fmul
0001e2  4683              MOV      r11,r0
0001e4  f7fffffe          BL       _fround
0001e8  f1c00a00          RSB      r10,r0,#0
;;;145        /* Store destination */
;;;146        (pDest+j)->x = (pSrc+j)->x + x;
0001ec  f8360024          LDRH     r0,[r6,r4,LSL #2]
0001f0  4448              ADD      r0,r0,r9
0001f2  b200              SXTH     r0,r0
0001f4  f8250024          STRH     r0,[r5,r4,LSL #2]
;;;147        (pDest+j)->y = (pSrc+j)->y + y;
0001f8  eb060084          ADD      r0,r6,r4,LSL #2
0001fc  8840              LDRH     r0,[r0,#2]
0001fe  4450              ADD      r0,r0,r10
000200  b200              SXTH     r0,r0
000202  eb050184          ADD      r1,r5,r4,LSL #2
000206  8048              STRH     r0,[r1,#2]
000208  1c64              ADDS     r4,r4,#1              ;130
                  |L1.522|
00020a  42bc              CMP      r4,r7                 ;130
00020c  dbb8              BLT      |L1.384|
;;;148      }
;;;149    }
00020e  b005              ADD      sp,sp,#0x14
000210  e8bd8ff0          POP      {r4-r11,pc}
;;;150    #endif
                          ENDP

                  |L1.532|
                          DCD      0x3fe00000
