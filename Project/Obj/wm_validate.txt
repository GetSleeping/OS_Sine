; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\wm_validate.o --depend=.\Obj\wm_validate.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\wm_validate.crf ..\Ucgui\GUI\WM\WM_Validate.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SubRect PROC
;;;49     */
;;;50     static void _SubRect(GUI_RECT* pDest, const GUI_RECT* pr0, const GUI_RECT* pr1) {
000000  b510              PUSH     {r4,lr}
;;;51       if ((pDest == NULL) || (pr0 == NULL))
000002  b100              CBZ      r0,|L1.6|
000004  b901              CBNZ     r1,|L1.8|
                  |L1.6|
;;;52         return;
;;;53       *pDest = *pr0;	 
;;;54       if (pr1 == NULL)
;;;55         return;
;;;56       /* Check left/right sides */
;;;57       if (  (pr1->y0 <= pr0->y0)
;;;58           &&(pr1->y1 >= pr0->y1)) {
;;;59         pDest->x0 = Max(pr0->x0, pr1->x1);
;;;60         pDest->x1 = Min(pr0->x1, pr1->x0);
;;;61       }
;;;62       /* Check top/bottom sides */
;;;63       if (  (pr1->x0 <= pr0->x0)
;;;64           &&(pr1->x1 >= pr0->x1)) {
;;;65         pDest->y0 = Max(pr0->y0, pr1->y1);
;;;66         pDest->y1 = Min(pr0->y1, pr1->y0);
;;;67       }
;;;68     }
000006  bd10              POP      {r4,pc}
                  |L1.8|
000008  680b              LDR      r3,[r1,#0]            ;53
00000a  6003              STR      r3,[r0,#0]            ;53
00000c  684b              LDR      r3,[r1,#4]            ;53
00000e  6043              STR      r3,[r0,#4]            ;53
000010  b902              CBNZ     r2,|L1.20|
000012  e7f8              B        |L1.6|
                  |L1.20|
000014  f9b23002          LDRSH    r3,[r2,#2]            ;57
000018  f9b14002          LDRSH    r4,[r1,#2]            ;57
00001c  42a3              CMP      r3,r4                 ;57
00001e  dc1f              BGT      |L1.96|
000020  f9b23006          LDRSH    r3,[r2,#6]            ;58
000024  f9b14006          LDRSH    r4,[r1,#6]            ;58
000028  42a3              CMP      r3,r4                 ;58
00002a  db19              BLT      |L1.96|
00002c  f9b13000          LDRSH    r3,[r1,#0]            ;59
000030  f9b24004          LDRSH    r4,[r2,#4]            ;59
000034  42a3              CMP      r3,r4                 ;59
000036  dd02              BLE      |L1.62|
000038  f9b13000          LDRSH    r3,[r1,#0]            ;59
00003c  e001              B        |L1.66|
                  |L1.62|
00003e  f9b23004          LDRSH    r3,[r2,#4]            ;59
                  |L1.66|
000042  b21b              SXTH     r3,r3                 ;59
000044  8003              STRH     r3,[r0,#0]            ;59
000046  f9b13004          LDRSH    r3,[r1,#4]            ;60
00004a  f9b24000          LDRSH    r4,[r2,#0]            ;60
00004e  42a3              CMP      r3,r4                 ;60
000050  dd02              BLE      |L1.88|
000052  f9b23000          LDRSH    r3,[r2,#0]            ;60
000056  e001              B        |L1.92|
                  |L1.88|
000058  f9b13004          LDRSH    r3,[r1,#4]            ;60
                  |L1.92|
00005c  b21b              SXTH     r3,r3                 ;60
00005e  8083              STRH     r3,[r0,#4]            ;60
                  |L1.96|
000060  f9b23000          LDRSH    r3,[r2,#0]            ;63
000064  f9b14000          LDRSH    r4,[r1,#0]            ;63
000068  42a3              CMP      r3,r4                 ;63
00006a  dc1f              BGT      |L1.172|
00006c  f9b23004          LDRSH    r3,[r2,#4]            ;64
000070  f9b14004          LDRSH    r4,[r1,#4]            ;64
000074  42a3              CMP      r3,r4                 ;64
000076  db19              BLT      |L1.172|
000078  f9b13002          LDRSH    r3,[r1,#2]            ;65
00007c  f9b24006          LDRSH    r4,[r2,#6]            ;65
000080  42a3              CMP      r3,r4                 ;65
000082  dd02              BLE      |L1.138|
000084  f9b13002          LDRSH    r3,[r1,#2]            ;65
000088  e001              B        |L1.142|
                  |L1.138|
00008a  f9b23006          LDRSH    r3,[r2,#6]            ;65
                  |L1.142|
00008e  b21b              SXTH     r3,r3                 ;65
000090  8043              STRH     r3,[r0,#2]            ;65
000092  f9b13006          LDRSH    r3,[r1,#6]            ;66
000096  f9b24002          LDRSH    r4,[r2,#2]            ;66
00009a  42a3              CMP      r3,r4                 ;66
00009c  dd02              BLE      |L1.164|
00009e  f9b23002          LDRSH    r3,[r2,#2]            ;66
0000a2  e001              B        |L1.168|
                  |L1.164|
0000a4  f9b13006          LDRSH    r3,[r1,#6]            ;66
                  |L1.168|
0000a8  b21b              SXTH     r3,r3                 ;66
0000aa  80c3              STRH     r3,[r0,#6]            ;66
                  |L1.172|
0000ac  bf00              NOP      
0000ae  e7aa              B        |L1.6|
;;;69     
                          ENDP

                  WM_ValidateRect PROC
;;;79     */
;;;80     void WM_ValidateRect(WM_HWIN hWin, const GUI_RECT*pRect) {
0000b0  b570              PUSH     {r4-r6,lr}
0000b2  4606              MOV      r6,r0
0000b4  460d              MOV      r5,r1
;;;81       WM_Obj* pWin;
;;;82       if (hWin) {
0000b6  b316              CBZ      r6,|L1.254|
;;;83         WM_LOCK();
0000b8  f7fffffe          BL       GUI_Lock
;;;84         pWin = WM_HANDLE2PTR(hWin);
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       GUI_ALLOC_h2p
0000c2  4604              MOV      r4,r0
;;;85         if (pWin->Status & WM_SF_INVALID) {
0000c4  8ba0              LDRH     r0,[r4,#0x1c]
0000c6  f0100f20          TST      r0,#0x20
0000ca  d015              BEQ      |L1.248|
;;;86           if (pRect) {
0000cc  b15d              CBZ      r5,|L1.230|
;;;87             _SubRect(&pWin->InvalidRect, &pWin->InvalidRect, pRect);
0000ce  462a              MOV      r2,r5
0000d0  f1040108          ADD      r1,r4,#8
0000d4  4608              MOV      r0,r1
0000d6  f7fffffe          BL       _SubRect
;;;88             if (WM__RectIsNZ(&pWin->InvalidRect))
0000da  f1040008          ADD      r0,r4,#8
0000de  f7fffffe          BL       WM__RectIsNZ
0000e2  b100              CBZ      r0,|L1.230|
;;;89               goto Done;
0000e4  e009              B        |L1.250|
                  |L1.230|
;;;90           }
;;;91           pWin->Status &= ~WM_SF_INVALID;
0000e6  8ba0              LDRH     r0,[r4,#0x1c]
0000e8  f0200020          BIC      r0,r0,#0x20
0000ec  83a0              STRH     r0,[r4,#0x1c]
;;;92           WM__NumInvalidWindows--;
0000ee  4804              LDR      r0,|L1.256|
0000f0  8800              LDRH     r0,[r0,#0]  ; WM__NumInvalidWindows
0000f2  1e40              SUBS     r0,r0,#1
0000f4  4902              LDR      r1,|L1.256|
0000f6  8008              STRH     r0,[r1,#0]
                  |L1.248|
;;;93         }
;;;94       Done:
0000f8  bf00              NOP      
                  |L1.250|
;;;95         WM_UNLOCK();
0000fa  f7fffffe          BL       GUI_Unlock
                  |L1.254|
;;;96       }
;;;97     }
0000fe  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

                  |L1.256|
                          DCD      WM__NumInvalidWindows
