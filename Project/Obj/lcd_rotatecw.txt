; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\lcd_rotatecw.o --depend=.\Obj\lcd_rotatecw.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcd_rotatecw.crf ..\Ucgui\GUI\Core\LCD_RotateCW.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       y -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  48e0              LDR      r0,|L1.928|
00001e  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000020  f0100003          ANDS     r0,r0,#3
000024  d004              BEQ      |L1.48|
000026  2801              CMP      r0,#1
000028  d031              BEQ      |L1.142|
00002a  2802              CMP      r0,#2
00002c  d14e              BNE      |L1.204|
00002e  e018              B        |L1.98|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7828              LDRB     r0,[r5,#0]
000034  2180              MOVS     r1,#0x80
000036  4121              ASRS     r1,r1,r4
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L1.64|
00003c  4650              MOV      r0,r10
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9800              LDR      r0,[sp,#0]
                  |L1.66|
000042  4602              MOV      r2,r0
000044  4631              MOV      r1,r6
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;46           y++;
00004c  1c76              ADDS     r6,r6,#1
;;;47     			if (++Diff == 8) {
00004e  1c60              ADDS     r0,r4,#1
000050  4604              MOV      r4,r0
000052  2808              CMP      r0,#8
000054  d101              BNE      |L1.90|
;;;48             Diff = 0;
000056  2400              MOVS     r4,#0
;;;49     				p++;
000058  1c6d              ADDS     r5,r5,#1
                  |L1.90|
;;;50     			}
;;;51     		} while (--xsize);
00005a  1e78              SUBS     r0,r7,#1
00005c  0007              MOVS     r7,r0
00005e  d1e8              BNE      |L1.50|
;;;52         break;
000060  e034              B        |L1.204|
                  |L1.98|
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
000062  bf00              NOP      
                  |L1.100|
;;;55       		if (*p & (0x80 >> Diff))
000064  7828              LDRB     r0,[r5,#0]
000066  2180              MOVS     r1,#0x80
000068  4121              ASRS     r1,r1,r4
00006a  4208              TST      r0,r1
00006c  d004              BEQ      |L1.120|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
00006e  4652              MOV      r2,r10
000070  4631              MOV      r1,r6
000072  4648              MOV      r0,r9
000074  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.120|
;;;57           y++;
000078  1c76              ADDS     r6,r6,#1
;;;58     			if (++Diff == 8) {
00007a  1c60              ADDS     r0,r4,#1
00007c  4604              MOV      r4,r0
00007e  2808              CMP      r0,#8
000080  d101              BNE      |L1.134|
;;;59             Diff = 0;
000082  2400              MOVS     r4,#0
;;;60     				p++;
000084  1c6d              ADDS     r5,r5,#1
                  |L1.134|
;;;61     			}
;;;62     		} while (--xsize);
000086  1e78              SUBS     r0,r7,#1
000088  0007              MOVS     r7,r0
00008a  d1eb              BNE      |L1.100|
;;;63         break;
00008c  e01e              B        |L1.204|
                  |L1.142|
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
00008e  bf00              NOP      
                  |L1.144|
;;;66       		if (*p & (0x80 >> Diff)) {
000090  7828              LDRB     r0,[r5,#0]
000092  2180              MOVS     r1,#0x80
000094  4121              ASRS     r1,r1,r4
000096  4208              TST      r0,r1
000098  d00d              BEQ      |L1.182|
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
00009a  4631              MOV      r1,r6
00009c  4648              MOV      r0,r9
00009e  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a2  4683              MOV      r11,r0
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000a4  f64f70ff          MOV      r0,#0xffff
0000a8  eba0020b          SUB      r2,r0,r11
0000ac  4631              MOV      r1,r6
0000ae  4648              MOV      r0,r9
0000b0  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;69           }
0000b4  bf00              NOP      
                  |L1.182|
;;;70           y++;
0000b6  1c76              ADDS     r6,r6,#1
;;;71     			if (++Diff == 8) {
0000b8  1c60              ADDS     r0,r4,#1
0000ba  4604              MOV      r4,r0
0000bc  2808              CMP      r0,#8
0000be  d101              BNE      |L1.196|
;;;72             Diff = 0;
0000c0  2400              MOVS     r4,#0
;;;73     				p++;
0000c2  1c6d              ADDS     r5,r5,#1
                  |L1.196|
;;;74     			}
;;;75     		} while (--xsize);
0000c4  1e78              SUBS     r0,r7,#1
0000c6  0007              MOVS     r7,r0
0000c8  d1e2              BNE      |L1.144|
;;;76         break;
0000ca  bf00              NOP      
                  |L1.204|
0000cc  bf00              NOP                            ;52
;;;77     	}
;;;78     }
0000ce  e8bd8ff8          POP      {r3-r11,pc}
;;;79     
                          ENDP

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
0000d2  e92d4fff          PUSH     {r0-r11,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
0000d6  b083              SUB      sp,sp,#0xc
0000d8  4605              MOV      r5,r0
0000da  4688              MOV      r8,r1
0000dc  4691              MOV      r9,r2
0000de  461e              MOV      r6,r3
0000e0  e9ddab10          LDRD     r10,r11,[sp,#0x40]
0000e4  9f12              LDR      r7,[sp,#0x48]
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i = 0; i < ysize; i++) {
0000e6  2400              MOVS     r4,#0
0000e8  e00f              B        |L1.266|
                  |L1.234|
;;;97         switch (BitsPerPixel) {
0000ea  f1ba0f01          CMP      r10,#1
0000ee  d109              BNE      |L1.260|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 - i, y0, pData, Diff, xsize, pTrans);
0000f0  9b14              LDR      r3,[sp,#0x50]
0000f2  1b28              SUBS     r0,r5,r4
0000f4  e9cd9300          STRD     r9,r3,[sp,#0]
0000f8  463a              MOV      r2,r7
0000fa  4641              MOV      r1,r8
0000fc  9b13              LDR      r3,[sp,#0x4c]
0000fe  f7fffffe          BL       _DrawBitLine1BPP
;;;100          break;
000102  bf00              NOP      
                  |L1.260|
000104  bf00              NOP      
;;;101        }
;;;102        pData += BytesPerLine;
000106  445f              ADD      r7,r7,r11
000108  1c64              ADDS     r4,r4,#1              ;96
                  |L1.266|
00010a  42b4              CMP      r4,r6                 ;96
00010c  dbed              BLT      |L1.234|
;;;103      }
;;;104    }
00010e  b007              ADD      sp,sp,#0x1c
000110  e8bd8ff0          POP      {r4-r11,pc}
;;;105    
                          ENDP

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000114  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
000116  f9b01004          LDRSH    r1,[r0,#4]
;;;117      y1 = pRect->y1;
00011a  f9b02006          LDRSH    r2,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
00011e  8803              LDRH     r3,[r0,#0]
000120  8844              LDRH     r4,[r0,#2]
000122  1b14              SUBS     r4,r2,r4
000124  4423              ADD      r3,r3,r4
000126  b21b              SXTH     r3,r3
000128  8083              STRH     r3,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
00012a  8843              LDRH     r3,[r0,#2]
00012c  8804              LDRH     r4,[r0,#0]
00012e  1b0c              SUBS     r4,r1,r4
000130  4423              ADD      r3,r3,r4
000132  b21b              SXTH     r3,r3
000134  80c3              STRH     r3,[r0,#6]
;;;120    }
000136  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  _TransformPointCW PROC
;;;130    */
;;;131    static void _TransformPointCW(int * pXPos, int * pYPos) {
000138  e92d47fc          PUSH     {r2-r10,lr}
00013c  4604              MOV      r4,r0
00013e  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
000140  2000              MOVS     r0,#0
000142  9000              STR      r0,[sp,#0]
000144  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000146  4668              MOV      r0,sp
000148  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
00014c  f7fffffe          BL       LCD_GetXSize
000150  f1a00801          SUB      r8,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
000154  f7fffffe          BL       LCD_GetYSize
000158  f1a00901          SUB      r9,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
00015c  f9bd0004          LDRSH    r0,[sp,#4]
000160  4540              CMP      r0,r8
000162  dd03              BLE      |L1.364|
;;;143        ClientRect.x1 = xNumPixel;
000164  fa0ff088          SXTH     r0,r8
000168  f8ad0004          STRH     r0,[sp,#4]
                  |L1.364|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
00016c  f9bd0006          LDRSH    r0,[sp,#6]
000170  4548              CMP      r0,r9
000172  dd03              BLE      |L1.380|
;;;146        ClientRect.y1 = yNumPixel;
000174  fa0ff089          SXTH     r0,r9
000178  f8ad0006          STRH     r0,[sp,#6]
                  |L1.380|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
00017c  6826              LDR      r6,[r4,#0]
;;;150      yPos = *pYPos;
00017e  682f              LDR      r7,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 - yPos;
000180  f9bd0000          LDRSH    r0,[sp,#0]
000184  1bc0              SUBS     r0,r0,r7
000186  6020              STR      r0,[r4,#0]
;;;153      *pYPos = ClientRect.y0 + xPos;
000188  f9bd0002          LDRSH    r0,[sp,#2]
00018c  4430              ADD      r0,r0,r6
00018e  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x1 + GUI_RectDispString.y0;
000190  4984              LDR      r1,|L1.932|
000192  f9b11004          LDRSH    r1,[r1,#4]  ; GUI_RectDispString
000196  6820              LDR      r0,[r4,#0]
000198  4408              ADD      r0,r0,r1
00019a  4982              LDR      r1,|L1.932|
00019c  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001a0  4408              ADD      r0,r0,r1
0001a2  6020              STR      r0,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y0 - GUI_RectDispString.x0;
0001a4  497f              LDR      r1,|L1.932|
0001a6  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001aa  6828              LDR      r0,[r5,#0]
0001ac  4408              ADD      r0,r0,r1
0001ae  497d              LDR      r1,|L1.932|
0001b0  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001b4  1a40              SUBS     r0,r0,r1
0001b6  6028              STR      r0,[r5,#0]
;;;157    }
0001b8  e8bd87fc          POP      {r2-r10,pc}
;;;158    
                          ENDP

                  _DrawBitmapCW PROC
;;;162    */
;;;163    static void _DrawBitmapCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001bc  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
0001c0  b08b              SUB      sp,sp,#0x2c
0001c2  4614              MOV      r4,r2
0001c4  461d              MOV      r5,r3
0001c6  f8dda060          LDR      r10,[sp,#0x60]
0001ca  9f1c              LDR      r7,[sp,#0x70]
0001cc  9e1a              LDR      r6,[sp,#0x68]
;;;167      U8  Data = 0;
0001ce  2000              MOVS     r0,#0
0001d0  900a              STR      r0,[sp,#0x28]
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
0001d2  980c              LDR      r0,[sp,#0x30]
0001d4  4428              ADD      r0,r0,r5
0001d6  1e40              SUBS     r0,r0,#1
0001d8  9008              STR      r0,[sp,#0x20]
;;;171      x1 = x0 + xsize - 1;
0001da  980b              LDR      r0,[sp,#0x2c]
0001dc  4420              ADD      r0,r0,r4
0001de  1e40              SUBS     r0,r0,#1
0001e0  9009              STR      r0,[sp,#0x24]
;;;172      /* Rotate positions */
;;;173      _TransformPointCW(&x0, &y0);
0001e2  a90c              ADD      r1,sp,#0x30
0001e4  a80b              ADD      r0,sp,#0x2c
0001e6  f7fffffe          BL       _TransformPointCW
;;;174      _TransformPointCW(&x1, &y1);
0001ea  a908              ADD      r1,sp,#0x20
0001ec  a809              ADD      r0,sp,#0x24
0001ee  f7fffffe          BL       _TransformPointCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
0001f2  f1ba0f01          CMP      r10,#1
0001f6  d166              BNE      |L1.710|
0001f8  9819              LDR      r0,[sp,#0x64]
0001fa  2801              CMP      r0,#1
0001fc  d163              BNE      |L1.710|
;;;177        int Diff = 0;
0001fe  f04f0800          MOV      r8,#0
;;;178        /* Clip top */
;;;179        if (y1 > GUI_Context.ClipRect.y1) {
000202  4867              LDR      r0,|L1.928|
000204  f9b0000a          LDRSH    r0,[r0,#0xa]
000208  9908              LDR      r1,[sp,#0x20]
00020a  4288              CMP      r0,r1
00020c  da06              BGE      |L1.540|
;;;180          int Diff = y1 - GUI_Context.ClipRect.y1; 
00020e  4964              LDR      r1,|L1.928|
000210  f9b1100a          LDRSH    r1,[r1,#0xa]  ; GUI_Context
000214  9a08              LDR      r2,[sp,#0x20]
000216  1a50              SUBS     r0,r2,r1
;;;181          xsize -= Diff;
000218  1a24              SUBS     r4,r4,r0
;;;182        }
00021a  bf00              NOP      
                  |L1.540|
;;;183        /* Clip bottom */
;;;184        if (y0 < GUI_Context.ClipRect.y0) {
00021c  4860              LDR      r0,|L1.928|
00021e  f9b00006          LDRSH    r0,[r0,#6]
000222  990c              LDR      r1,[sp,#0x30]
000224  4288              CMP      r0,r1
000226  dd15              BLE      |L1.596|
;;;185          Diff = GUI_Context.ClipRect.y1 - y0;
000228  485d              LDR      r0,|L1.928|
00022a  f9b0000a          LDRSH    r0,[r0,#0xa]
00022e  990c              LDR      r1,[sp,#0x30]
000230  eba00801          SUB      r8,r0,r1
;;;186    			xsize -= Diff;
000234  eba40408          SUB      r4,r4,r8
;;;187    			switch (BitsPerPixel) {
000238  2e01              CMP      r6,#1
00023a  d10a              BNE      |L1.594|
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
00023c  eb0707e8          ADD      r7,r7,r8,ASR #3
000240  ea4f00e8          ASR      r0,r8,#3
000244  990c              LDR      r1,[sp,#0x30]
000246  eba100c0          SUB      r0,r1,r0,LSL #3
00024a  900c              STR      r0,[sp,#0x30]
00024c  f0080807          AND      r8,r8,#7
;;;190    				break;
000250  bf00              NOP      
                  |L1.594|
000252  bf00              NOP      
                  |L1.596|
;;;191    			}
;;;192        }
;;;193        if (ysize <=0) {
000254  2d00              CMP      r5,#0
000256  dc02              BGT      |L1.606|
                  |L1.600|
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x0 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x0 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200          x0 -= Diff;
;;;201          pPixel += Diff * BytesPerLine;
;;;202        }
;;;203        /* Clip left side */
;;;204        if (x1 < GUI_Context.ClipRect.x0) {
;;;205          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;206          x1 += Diff;
;;;207          ysize -= Diff;
;;;208        }
;;;209        if (xsize <= 0) {
;;;210    		  return;
;;;211        }
;;;212        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;213      } else {
;;;214        /* Handle BITMAP with magnification */
;;;215        int x, y, xi, yi;
;;;216        int Shift = 8 - BitsPerPixel;
;;;217        for (x = x0, xi = 0; xi < ysize; xi++, x -= yMul, pPixel += BytesPerLine) {
;;;218          int xMax = x - yMul + 1;
;;;219          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;220            int BitsLeft = 0;
;;;221            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;222            for (y = y0, yi = 0; yi < xsize; yi++, y += xMul) {
;;;223              U8  Index;
;;;224              if (!BitsLeft) {
;;;225                Data = *pDataLine++;
;;;226                BitsLeft =8;
;;;227              }
;;;228              Index = Data >> Shift;
;;;229              Data    <<= BitsPerPixel;
;;;230              BitsLeft -= BitsPerPixel;
;;;231              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;232                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;233                if (pTrans) {
;;;234                  LCD_COLORINDEX = *(pTrans + Index);
;;;235                } else {
;;;236                  LCD_COLORINDEX = Index;
;;;237                }
;;;238                LCD_FillRect(xMax, y, x, y + xMul - 1);
;;;239                LCD_COLORINDEX = OldColor;
;;;240              }
;;;241            }
;;;242          }
;;;243        }
;;;244      }
;;;245    }
000258  b00f              ADD      sp,sp,#0x3c
00025a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.606|
00025e  4850              LDR      r0,|L1.928|
000260  f9b00008          LDRSH    r0,[r0,#8]            ;197
000264  990b              LDR      r1,[sp,#0x2c]         ;197
000266  4288              CMP      r0,r1                 ;197
000268  da0c              BGE      |L1.644|
00026a  494d              LDR      r1,|L1.928|
00026c  f9b11008          LDRSH    r1,[r1,#8]            ;198  ; GUI_Context
000270  9a0b              LDR      r2,[sp,#0x2c]         ;198
000272  1a50              SUBS     r0,r2,r1              ;198
000274  1a2d              SUBS     r5,r5,r0              ;199
000276  990b              LDR      r1,[sp,#0x2c]         ;200
000278  1a09              SUBS     r1,r1,r0              ;200
00027a  910b              STR      r1,[sp,#0x2c]         ;200
00027c  991b              LDR      r1,[sp,#0x6c]         ;201
00027e  fb007701          MLA      r7,r0,r1,r7           ;201
000282  bf00              NOP                            ;202
                  |L1.644|
000284  4846              LDR      r0,|L1.928|
000286  f9b00004          LDRSH    r0,[r0,#4]            ;204  ; GUI_Context
00028a  9909              LDR      r1,[sp,#0x24]         ;204
00028c  4288              CMP      r0,r1                 ;204
00028e  dd09              BLE      |L1.676|
000290  4943              LDR      r1,|L1.928|
000292  f9b11004          LDRSH    r1,[r1,#4]            ;205  ; GUI_Context
000296  9a09              LDR      r2,[sp,#0x24]         ;205
000298  1a88              SUBS     r0,r1,r2              ;205
00029a  9909              LDR      r1,[sp,#0x24]         ;206
00029c  4401              ADD      r1,r1,r0              ;206
00029e  9109              STR      r1,[sp,#0x24]         ;206
0002a0  1a2d              SUBS     r5,r5,r0              ;207
0002a2  bf00              NOP                            ;208
                  |L1.676|
0002a4  2c00              CMP      r4,#0                 ;209
0002a6  dc00              BGT      |L1.682|
0002a8  e7d6              B        |L1.600|
                  |L1.682|
0002aa  9b1d              LDR      r3,[sp,#0x74]         ;212
0002ac  981b              LDR      r0,[sp,#0x6c]         ;212
0002ae  e9cd7802          STRD     r7,r8,[sp,#8]         ;212
0002b2  e9cd6000          STRD     r6,r0,[sp,#0]         ;212
0002b6  9304              STR      r3,[sp,#0x10]         ;212
0002b8  462b              MOV      r3,r5                 ;212
0002ba  4622              MOV      r2,r4                 ;212
0002bc  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;212
0002c0  f7fffffe          BL       _DrawBitmap
0002c4  e06a              B        |L1.924|
                  |L1.710|
0002c6  f1c60008          RSB      r0,r6,#8              ;216
0002ca  9005              STR      r0,[sp,#0x14]         ;216
0002cc  f8dd802c          LDR      r8,[sp,#0x2c]         ;217
0002d0  2000              MOVS     r0,#0                 ;217
0002d2  9007              STR      r0,[sp,#0x1c]         ;217
0002d4  e05e              B        |L1.916|
                  |L1.726|
0002d6  9819              LDR      r0,[sp,#0x64]         ;218
0002d8  eba80000          SUB      r0,r8,r0              ;218
0002dc  1c40              ADDS     r0,r0,#1              ;218
0002de  9004              STR      r0,[sp,#0x10]         ;218
0002e0  482f              LDR      r0,|L1.928|
0002e2  f9b01004          LDRSH    r1,[r0,#4]            ;219  ; GUI_Context
0002e6  9804              LDR      r0,[sp,#0x10]         ;219
0002e8  4281              CMP      r1,r0                 ;219
0002ea  dc4b              BGT      |L1.900|
0002ec  482c              LDR      r0,|L1.928|
0002ee  f9b00008          LDRSH    r0,[r0,#8]            ;219
0002f2  4540              CMP      r0,r8                 ;219
0002f4  db46              BLT      |L1.900|
0002f6  2000              MOVS     r0,#0                 ;220
0002f8  9003              STR      r0,[sp,#0xc]          ;220
0002fa  9702              STR      r7,[sp,#8]            ;221
0002fc  f8ddb030          LDR      r11,[sp,#0x30]        ;222
000300  9006              STR      r0,[sp,#0x18]         ;222
000302  e03b              B        |L1.892|
                  |L1.772|
000304  9803              LDR      r0,[sp,#0xc]          ;224
000306  b938              CBNZ     r0,|L1.792|
000308  9802              LDR      r0,[sp,#8]            ;225
00030a  7800              LDRB     r0,[r0,#0]            ;225
00030c  900a              STR      r0,[sp,#0x28]         ;225
00030e  9802              LDR      r0,[sp,#8]            ;225
000310  1c40              ADDS     r0,r0,#1              ;225
000312  9002              STR      r0,[sp,#8]            ;225
000314  2008              MOVS     r0,#8                 ;226
000316  9003              STR      r0,[sp,#0xc]          ;226
                  |L1.792|
000318  9905              LDR      r1,[sp,#0x14]         ;228
00031a  980a              LDR      r0,[sp,#0x28]         ;228
00031c  4108              ASRS     r0,r0,r1              ;228
00031e  f00009ff          AND      r9,r0,#0xff           ;228
000322  980a              LDR      r0,[sp,#0x28]         ;229
000324  40b0              LSLS     r0,r0,r6              ;229
000326  b2c0              UXTB     r0,r0                 ;229
000328  900a              STR      r0,[sp,#0x28]         ;229
00032a  9803              LDR      r0,[sp,#0xc]          ;230
00032c  1b80              SUBS     r0,r0,r6              ;230
00032e  9003              STR      r0,[sp,#0xc]          ;230
000330  f1b90f00          CMP      r9,#0                 ;231
000334  d104              BNE      |L1.832|
000336  481a              LDR      r0,|L1.928|
000338  7b00              LDRB     r0,[r0,#0xc]          ;231  ; GUI_Context
00033a  f0100f02          TST      r0,#2                 ;231
00033e  d119              BNE      |L1.884|
                  |L1.832|
000340  4817              LDR      r0,|L1.928|
000342  8840              LDRH     r0,[r0,#2]            ;232  ; GUI_Context
000344  9001              STR      r0,[sp,#4]            ;232
000346  981d              LDR      r0,[sp,#0x74]         ;233
000348  b128              CBZ      r0,|L1.854|
00034a  981d              LDR      r0,[sp,#0x74]         ;234
00034c  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;234
000350  4913              LDR      r1,|L1.928|
000352  8048              STRH     r0,[r1,#2]            ;234
000354  e002              B        |L1.860|
                  |L1.854|
000356  4812              LDR      r0,|L1.928|
000358  f8a09002          STRH     r9,[r0,#2]            ;236
                  |L1.860|
00035c  eb0b000a          ADD      r0,r11,r10            ;238
000360  1e43              SUBS     r3,r0,#1              ;238
000362  4642              MOV      r2,r8                 ;238
000364  4659              MOV      r1,r11                ;238
000366  9804              LDR      r0,[sp,#0x10]         ;238
000368  f7fffffe          BL       LCD_FillRect
00036c  490c              LDR      r1,|L1.928|
00036e  9801              LDR      r0,[sp,#4]            ;239
000370  8048              STRH     r0,[r1,#2]            ;239
000372  bf00              NOP                            ;240
                  |L1.884|
000374  9806              LDR      r0,[sp,#0x18]         ;222
000376  1c40              ADDS     r0,r0,#1              ;222
000378  9006              STR      r0,[sp,#0x18]         ;222
00037a  44d3              ADD      r11,r11,r10           ;222
                  |L1.892|
00037c  9806              LDR      r0,[sp,#0x18]         ;222
00037e  42a0              CMP      r0,r4                 ;222
000380  dbc0              BLT      |L1.772|
000382  bf00              NOP                            ;242
                  |L1.900|
000384  9807              LDR      r0,[sp,#0x1c]         ;217
000386  1c40              ADDS     r0,r0,#1              ;217
000388  9007              STR      r0,[sp,#0x1c]         ;217
00038a  9819              LDR      r0,[sp,#0x64]         ;217
00038c  eba80800          SUB      r8,r8,r0              ;217
000390  981b              LDR      r0,[sp,#0x6c]         ;217
000392  4407              ADD      r7,r7,r0              ;217
                  |L1.916|
000394  9807              LDR      r0,[sp,#0x1c]         ;217
000396  42a8              CMP      r0,r5                 ;217
000398  db9d              BLT      |L1.726|
00039a  bf00              NOP                            ;244
                  |L1.924|
00039c  bf00              NOP      
00039e  e75b              B        |L1.600|
;;;246    
                          ENDP

                  |L1.928|
                          DCD      GUI_Context
                  |L1.932|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCW
                          DCD      _DrawBitmapCW
                          DCD      _Rect2TextRect
