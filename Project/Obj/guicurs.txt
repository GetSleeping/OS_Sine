; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\guicurs.o --depend=.\Obj\guicurs.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\guicurs.crf ..\Ucgui\GUI\Core\GUICurs.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;59     */
;;;60     static void _SetPixelIndex(int x, int y, int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;61       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000008  48ff              LDR      r0,|L1.1032|
00000a  f9b00002          LDRSH    r0,[r0,#2]  ; _ClipRect
00000e  42a8              CMP      r0,r5
000010  dc15              BGT      |L1.62|
000012  48fd              LDR      r0,|L1.1032|
000014  f9b00006          LDRSH    r0,[r0,#6]  ; _ClipRect
000018  42a8              CMP      r0,r5
00001a  db10              BLT      |L1.62|
;;;62         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
00001c  48fa              LDR      r0,|L1.1032|
00001e  f9b00000          LDRSH    r0,[r0,#0]  ; _ClipRect
000022  42a0              CMP      r0,r4
000024  dc0b              BGT      |L1.62|
000026  48f8              LDR      r0,|L1.1032|
000028  f9b00004          LDRSH    r0,[r0,#4]  ; _ClipRect
00002c  42a0              CMP      r0,r4
00002e  db06              BLT      |L1.62|
;;;63           LCD_aAPI[0]->pfSetPixelIndex(x, y, Index);
000030  48f6              LDR      r0,|L1.1036|
000032  6800              LDR      r0,[r0,#0]  ; LCD_aAPI
000034  4632              MOV      r2,r6
000036  4629              MOV      r1,r5
000038  6a43              LDR      r3,[r0,#0x24]
00003a  4620              MOV      r0,r4
00003c  4798              BLX      r3
                  |L1.62|
;;;64         }
;;;65       }
;;;66     }
00003e  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  _GetPixelIndex PROC
;;;74     */
;;;75     static int _GetPixelIndex(int x, int y) {
000040  b570              PUSH     {r4-r6,lr}
000042  4604              MOV      r4,r0
000044  460d              MOV      r5,r1
;;;76       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000046  48f0              LDR      r0,|L1.1032|
000048  f9b00002          LDRSH    r0,[r0,#2]  ; _ClipRect
00004c  42a8              CMP      r0,r5
00004e  dc13              BGT      |L1.120|
000050  48ed              LDR      r0,|L1.1032|
000052  f9b00006          LDRSH    r0,[r0,#6]  ; _ClipRect
000056  42a8              CMP      r0,r5
000058  db0e              BLT      |L1.120|
;;;77         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
00005a  48eb              LDR      r0,|L1.1032|
00005c  f9b00000          LDRSH    r0,[r0,#0]  ; _ClipRect
000060  42a0              CMP      r0,r4
000062  dc09              BGT      |L1.120|
000064  48e8              LDR      r0,|L1.1032|
000066  f9b00004          LDRSH    r0,[r0,#4]  ; _ClipRect
00006a  42a0              CMP      r0,r4
00006c  db04              BLT      |L1.120|
;;;78           return LCD_L0_GetPixelIndex(x, y);
00006e  4629              MOV      r1,r5
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       LCD_L0_GetPixelIndex
                  |L1.118|
;;;79         }
;;;80       }
;;;81       return 0;
;;;82     }
000076  bd70              POP      {r4-r6,pc}
                  |L1.120|
000078  2000              MOVS     r0,#0                 ;81
00007a  e7fc              B        |L1.118|
;;;83     
                          ENDP

                  _Undraw PROC
;;;90     */
;;;91     static void _Undraw(void) {
00007c  e92d41f0          PUSH     {r4-r8,lr}
;;;92       int x, y, xSize, ySize;
;;;93       LCD_PIXELINDEX* pData;
;;;94       /* Save bitmap data */
;;;95       GUI_LOCK();
000080  f7fffffe          BL       GUI_Lock
;;;96       if (_hBuffer) {
000084  48e2              LDR      r0,|L1.1040|
000086  8800              LDRH     r0,[r0,#0]  ; _hBuffer
000088  b390              CBZ      r0,|L1.240|
;;;97         pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
00008a  48e1              LDR      r0,|L1.1040|
00008c  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
000090  f7fffffe          BL       GUI_ALLOC_h2p
000094  4606              MOV      r6,r0
;;;98         xSize = _Rect.x1 - _Rect.x0 + 1;
000096  48df              LDR      r0,|L1.1044|
000098  f9b00004          LDRSH    r0,[r0,#4]  ; _Rect
00009c  49dd              LDR      r1,|L1.1044|
00009e  f9b11000          LDRSH    r1,[r1,#0]  ; _Rect
0000a2  1a40              SUBS     r0,r0,r1
0000a4  1c47              ADDS     r7,r0,#1
;;;99         ySize = _Rect.y1 - _Rect.y0 + 1;
0000a6  48db              LDR      r0,|L1.1044|
0000a8  f9b00006          LDRSH    r0,[r0,#6]  ; _Rect
0000ac  49d9              LDR      r1,|L1.1044|
0000ae  f9b11002          LDRSH    r1,[r1,#2]  ; _Rect
0000b2  1a40              SUBS     r0,r0,r1
0000b4  f1000801          ADD      r8,r0,#1
;;;100        for (y = 0; y < ySize; y++) {
0000b8  2500              MOVS     r5,#0
0000ba  e017              B        |L1.236|
                  |L1.188|
;;;101          for (x = 0; x < xSize; x++) {
0000bc  2400              MOVS     r4,#0
0000be  e00c              B        |L1.218|
                  |L1.192|
;;;102            _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pData + x));
0000c0  f8362014          LDRH     r2,[r6,r4,LSL #1]
0000c4  4bd3              LDR      r3,|L1.1044|
0000c6  f9b33002          LDRSH    r3,[r3,#2]  ; _Rect
0000ca  1959              ADDS     r1,r3,r5
0000cc  4bd1              LDR      r3,|L1.1044|
0000ce  f9b33000          LDRSH    r3,[r3,#0]  ; _Rect
0000d2  1918              ADDS     r0,r3,r4
0000d4  f7fffffe          BL       _SetPixelIndex
0000d8  1c64              ADDS     r4,r4,#1              ;101
                  |L1.218|
0000da  42bc              CMP      r4,r7                 ;101
0000dc  dbf0              BLT      |L1.192|
;;;103          }
;;;104          pData += _pCursor->pBitmap->XSize;
0000de  48ce              LDR      r0,|L1.1048|
0000e0  6800              LDR      r0,[r0,#0]  ; _pCursor
0000e2  6800              LDR      r0,[r0,#0]
0000e4  8800              LDRH     r0,[r0,#0]
0000e6  eb060640          ADD      r6,r6,r0,LSL #1
0000ea  1c6d              ADDS     r5,r5,#1              ;100
                  |L1.236|
0000ec  4545              CMP      r5,r8                 ;100
0000ee  dbe5              BLT      |L1.188|
                  |L1.240|
;;;105        }
;;;106      }
;;;107      GUI_UNLOCK();
0000f0  f7fffffe          BL       GUI_Unlock
;;;108    }
0000f4  e8bd81f0          POP      {r4-r8,pc}
;;;109    
                          ENDP

                  _Log2Phys PROC
;;;113    */
;;;114    static int _Log2Phys(int Index) {
0000f8  b570              PUSH     {r4-r6,lr}
0000fa  4604              MOV      r4,r0
;;;115      if (Index < 4) {
0000fc  2c04              CMP      r4,#4
0000fe  da03              BGE      |L1.264|
;;;116        return _ColorIndex[Index];
000100  48c6              LDR      r0,|L1.1052|
000102  f8300014          LDRH     r0,[r0,r4,LSL #1]
                  |L1.262|
;;;117      } else {
;;;118        LCD_COLOR Color = *(_pCursor->pBitmap->pPal->pPalEntries + Index);
;;;119        return LCD_Color2Index(Color);
;;;120      }
;;;121    }
000106  bd70              POP      {r4-r6,pc}
                  |L1.264|
000108  48c3              LDR      r0,|L1.1048|
00010a  6800              LDR      r0,[r0,#0]            ;118  ; _pCursor
00010c  6800              LDR      r0,[r0,#0]            ;118
00010e  68c0              LDR      r0,[r0,#0xc]          ;118
000110  6880              LDR      r0,[r0,#8]            ;118
000112  f8505024          LDR      r5,[r0,r4,LSL #2]     ;118
000116  4628              MOV      r0,r5                 ;119
000118  f7fffffe          BL       LCD_Color2Index
00011c  e7f3              B        |L1.262|
;;;122    
                          ENDP

                  _Draw PROC
;;;126    */
;;;127    static void _Draw(void) {
00011e  e92d5ff0          PUSH     {r4-r12,lr}
;;;128      int x, y, xSize, ySize;
;;;129      LCD_PIXELINDEX* pData;
;;;130      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;131      GUI_LOCK();
000122  f7fffffe          BL       GUI_Lock
;;;132      if (_hBuffer) {
000126  48ba              LDR      r0,|L1.1040|
000128  8800              LDRH     r0,[r0,#0]  ; _hBuffer
00012a  b3e8              CBZ      r0,|L1.424|
;;;133        /* Save bitmap data */
;;;134        pBM = _pCursor->pBitmap;
00012c  48ba              LDR      r0,|L1.1048|
00012e  6800              LDR      r0,[r0,#0]  ; _pCursor
000130  6807              LDR      r7,[r0,#0]
;;;135        pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
000132  48b7              LDR      r0,|L1.1040|
000134  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
000138  f7fffffe          BL       GUI_ALLOC_h2p
00013c  4606              MOV      r6,r0
;;;136        xSize = _Rect.x1 - _Rect.x0 + 1;
00013e  48b5              LDR      r0,|L1.1044|
000140  f9b00004          LDRSH    r0,[r0,#4]  ; _Rect
000144  49b3              LDR      r1,|L1.1044|
000146  f9b11000          LDRSH    r1,[r1,#0]  ; _Rect
00014a  1a40              SUBS     r0,r0,r1
00014c  f1000801          ADD      r8,r0,#1
;;;137        ySize = _Rect.y1 - _Rect.y0 + 1;
000150  48b0              LDR      r0,|L1.1044|
000152  f9b00006          LDRSH    r0,[r0,#6]  ; _Rect
000156  49af              LDR      r1,|L1.1044|
000158  f9b11002          LDRSH    r1,[r1,#2]  ; _Rect
00015c  1a40              SUBS     r0,r0,r1
00015e  f1000901          ADD      r9,r0,#1
;;;138        for (y = 0; y < ySize; y++) {
000162  2500              MOVS     r5,#0
000164  e02e              B        |L1.452|
                  |L1.358|
;;;139          for (x = 0; x < xSize; x++) {
000166  2400              MOVS     r4,#0
000168  e026              B        |L1.440|
                  |L1.362|
;;;140            int BitmapPixel;
;;;141            *(pData + x) = _GetPixelIndex(_Rect.x0 + x, _Rect.y0 + y);
00016a  4aaa              LDR      r2,|L1.1044|
00016c  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
000170  1951              ADDS     r1,r2,r5
000172  4aa8              LDR      r2,|L1.1044|
000174  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
000178  1910              ADDS     r0,r2,r4
00017a  f7fffffe          BL       _GetPixelIndex
00017e  f8260014          STRH     r0,[r6,r4,LSL #1]
;;;142            BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
000182  462a              MOV      r2,r5
000184  4621              MOV      r1,r4
000186  4638              MOV      r0,r7
000188  f7fffffe          BL       GUI_GetBitmapPixelIndex
00018c  4682              MOV      r10,r0
;;;143            if (BitmapPixel) {
00018e  f1ba0f00          CMP      r10,#0
000192  d010              BEQ      |L1.438|
;;;144              _SetPixelIndex(_Rect.x0 + x, _Rect.y0 + y, _Log2Phys(BitmapPixel));
000194  4650              MOV      r0,r10
000196  f7fffffe          BL       _Log2Phys
00019a  4683              MOV      r11,r0
00019c  4a9d              LDR      r2,|L1.1044|
00019e  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
0001a2  1951              ADDS     r1,r2,r5
0001a4  4a9b              LDR      r2,|L1.1044|
0001a6  e000              B        |L1.426|
                  |L1.424|
0001a8  e00e              B        |L1.456|
                  |L1.426|
0001aa  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
0001ae  1910              ADDS     r0,r2,r4
0001b0  465a              MOV      r2,r11
0001b2  f7fffffe          BL       _SetPixelIndex
                  |L1.438|
0001b6  1c64              ADDS     r4,r4,#1              ;139
                  |L1.440|
0001b8  4544              CMP      r4,r8                 ;139
0001ba  dbd6              BLT      |L1.362|
;;;145            }
;;;146          }
;;;147          pData += pBM->XSize;
0001bc  8838              LDRH     r0,[r7,#0]
0001be  eb060640          ADD      r6,r6,r0,LSL #1
0001c2  1c6d              ADDS     r5,r5,#1              ;138
                  |L1.452|
0001c4  454d              CMP      r5,r9                 ;138
0001c6  dbce              BLT      |L1.358|
                  |L1.456|
;;;148        }
;;;149      }
;;;150      GUI_UNLOCK();
0001c8  f7fffffe          BL       GUI_Unlock
;;;151    }
0001cc  e8bd9ff0          POP      {r4-r12,pc}
;;;152    
                          ENDP

                  _CalcRect PROC
;;;156    */
;;;157    static void _CalcRect(void) {
0001d0  4891              LDR      r0,|L1.1048|
;;;158      if (_pCursor) {
0001d2  6800              LDR      r0,[r0,#0]  ; _pCursor
0001d4  b338              CBZ      r0,|L1.550|
;;;159        _Rect.x0 = _x - _pCursor->xHot;
0001d6  4890              LDR      r0,|L1.1048|
0001d8  6800              LDR      r0,[r0,#0]  ; _pCursor
0001da  6840              LDR      r0,[r0,#4]
0001dc  4990              LDR      r1,|L1.1056|
0001de  6809              LDR      r1,[r1,#0]  ; _x
0001e0  1a08              SUBS     r0,r1,r0
0001e2  b200              SXTH     r0,r0
0001e4  498b              LDR      r1,|L1.1044|
0001e6  8008              STRH     r0,[r1,#0]
;;;160        _Rect.y0 = _y - _pCursor->yHot;
0001e8  488b              LDR      r0,|L1.1048|
0001ea  6800              LDR      r0,[r0,#0]  ; _pCursor
0001ec  6880              LDR      r0,[r0,#8]
0001ee  498d              LDR      r1,|L1.1060|
0001f0  6809              LDR      r1,[r1,#0]  ; _y
0001f2  1a08              SUBS     r0,r1,r0
0001f4  b200              SXTH     r0,r0
0001f6  4987              LDR      r1,|L1.1044|
0001f8  8048              STRH     r0,[r1,#2]
;;;161        _Rect.x1 = _Rect.x0 + _pCursor->pBitmap->XSize - 1;
0001fa  4608              MOV      r0,r1
0001fc  8800              LDRH     r0,[r0,#0]  ; _Rect
0001fe  4986              LDR      r1,|L1.1048|
000200  6809              LDR      r1,[r1,#0]  ; _pCursor
000202  6809              LDR      r1,[r1,#0]
000204  8809              LDRH     r1,[r1,#0]
000206  4408              ADD      r0,r0,r1
000208  1e40              SUBS     r0,r0,#1
00020a  b200              SXTH     r0,r0
00020c  4981              LDR      r1,|L1.1044|
00020e  8088              STRH     r0,[r1,#4]
;;;162        _Rect.y1 = _Rect.y0 + _pCursor->pBitmap->YSize - 1;
000210  4608              MOV      r0,r1
000212  8840              LDRH     r0,[r0,#2]  ; _Rect
000214  4980              LDR      r1,|L1.1048|
000216  6809              LDR      r1,[r1,#0]  ; _pCursor
000218  6809              LDR      r1,[r1,#0]
00021a  8849              LDRH     r1,[r1,#2]
00021c  4408              ADD      r0,r0,r1
00021e  1e40              SUBS     r0,r0,#1
000220  b200              SXTH     r0,r0
000222  497c              LDR      r1,|L1.1044|
000224  80c8              STRH     r0,[r1,#6]
                  |L1.550|
;;;163      }
;;;164    }
000226  4770              BX       lr
;;;165    
                          ENDP

                  _Hide PROC
;;;169    */
;;;170    static void _Hide(void) {
000228  b510              PUSH     {r4,lr}
;;;171      if (_CursorIsVis) {
00022a  487f              LDR      r0,|L1.1064|
00022c  7800              LDRB     r0,[r0,#0]  ; _CursorIsVis
00022e  b120              CBZ      r0,|L1.570|
;;;172        _Undraw();
000230  f7fffffe          BL       _Undraw
;;;173        _CursorIsVis = 0;
000234  2000              MOVS     r0,#0
000236  497c              LDR      r1,|L1.1064|
000238  7008              STRB     r0,[r1,#0]
                  |L1.570|
;;;174      }
;;;175    }
00023a  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  _Show PROC
;;;180    */
;;;181    static void _Show(void) {
00023c  b510              PUSH     {r4,lr}
;;;182      if (_CursorOn && (_CursorDeActCnt==0)) {
00023e  487b              LDR      r0,|L1.1068|
000240  7800              LDRB     r0,[r0,#0]  ; _CursorOn
000242  b138              CBZ      r0,|L1.596|
000244  487a              LDR      r0,|L1.1072|
000246  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
000248  b920              CBNZ     r0,|L1.596|
;;;183        _CursorIsVis = 1;
00024a  2001              MOVS     r0,#1
00024c  4976              LDR      r1,|L1.1064|
00024e  7008              STRB     r0,[r1,#0]
;;;184        _Draw();  
000250  f7fffffe          BL       _Draw
                  |L1.596|
;;;185      }
;;;186    }
000254  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  _TempHide PROC
;;;208    */
;;;209    static char _TempHide(const GUI_RECT* pRect) {
000256  b510              PUSH     {r4,lr}
000258  4604              MOV      r4,r0
;;;210      if (!_CursorIsVis) {
00025a  4873              LDR      r0,|L1.1064|
00025c  7800              LDRB     r0,[r0,#0]  ; _CursorIsVis
00025e  b908              CBNZ     r0,|L1.612|
;;;211        return 0;             /* Cursor not visible -> nothing to do */
000260  2000              MOVS     r0,#0
                  |L1.610|
;;;212      }
;;;213      if ((pRect == NULL) || GUI_RectsIntersect(pRect, &_Rect)) {
;;;214        _Hide();              /* Cursor needs to be hidden */
;;;215        return 1;
;;;216      }
;;;217      return 0;               /* Cursor not affected -> nothing to do */
;;;218    }
000262  bd10              POP      {r4,pc}
                  |L1.612|
000264  b124              CBZ      r4,|L1.624|
000266  496b              LDR      r1,|L1.1044|
000268  4620              MOV      r0,r4                 ;213
00026a  f7fffffe          BL       GUI_RectsIntersect
00026e  b118              CBZ      r0,|L1.632|
                  |L1.624|
000270  f7fffffe          BL       _Hide
000274  2001              MOVS     r0,#1                 ;215
000276  e7f4              B        |L1.610|
                  |L1.632|
000278  2000              MOVS     r0,#0                 ;217
00027a  e7f2              B        |L1.610|
;;;219    
                          ENDP

                  _TempUnhide PROC
;;;223    */
;;;224    static void _TempUnhide(void) {
00027c  b510              PUSH     {r4,lr}
;;;225      _Show();
00027e  f7fffffe          BL       _Show
;;;226    }
000282  bd10              POP      {r4,pc}
;;;227    
                          ENDP

                  GUI_CURSOR_Activate PROC
;;;237    */
;;;238    void GUI_CURSOR_Activate(void) {
000284  b510              PUSH     {r4,lr}
;;;239      GUI_LOCK();
000286  f7fffffe          BL       GUI_Lock
;;;240      if ((--_CursorDeActCnt) ==0) {
00028a  4869              LDR      r0,|L1.1072|
00028c  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
00028e  1e40              SUBS     r0,r0,#1
000290  f01000ff          ANDS     r0,r0,#0xff
000294  4966              LDR      r1,|L1.1072|
000296  7008              STRB     r0,[r1,#0]
000298  d101              BNE      |L1.670|
;;;241        _Show();
00029a  f7fffffe          BL       _Show
                  |L1.670|
;;;242      }
;;;243      GUI_UNLOCK();
00029e  f7fffffe          BL       GUI_Unlock
;;;244    }
0002a2  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  GUI_CURSOR_Deactivate PROC
;;;249    */
;;;250    void GUI_CURSOR_Deactivate(void) {
0002a4  b510              PUSH     {r4,lr}
;;;251      GUI_LOCK();
0002a6  f7fffffe          BL       GUI_Lock
;;;252      if (_CursorDeActCnt++ ==0)
0002aa  4861              LDR      r0,|L1.1072|
0002ac  7801              LDRB     r1,[r0,#0]  ; _CursorDeActCnt
0002ae  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
0002b0  1c40              ADDS     r0,r0,#1
0002b2  4a5f              LDR      r2,|L1.1072|
0002b4  7010              STRB     r0,[r2,#0]
0002b6  b909              CBNZ     r1,|L1.700|
;;;253        _Hide();
0002b8  f7fffffe          BL       _Hide
                  |L1.700|
;;;254      GUI_UNLOCK();
0002bc  f7fffffe          BL       GUI_Unlock
;;;255    }
0002c0  bd10              POP      {r4,pc}
;;;256    
                          ENDP

                  GUI_CURSOR_Select PROC
;;;260    */
;;;261    const GUI_CURSOR GUI_UNI_PTR * GUI_CURSOR_Select(const GUI_CURSOR GUI_UNI_PTR * pCursor) {
0002c2  e92d47f0          PUSH     {r4-r10,lr}
0002c6  4605              MOV      r5,r0
;;;262      int AllocSize;
;;;263      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;264      const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;265      GUI_LOCK();
0002c8  f7fffffe          BL       GUI_Lock
;;;266      pOldCursor = _pCursor;
0002cc  4852              LDR      r0,|L1.1048|
0002ce  f8d08000          LDR      r8,[r0,#0]  ; _pCursor
;;;267      if (pCursor != _pCursor) {
0002d2  6800              LDR      r0,[r0,#0]  ; _pCursor
0002d4  4285              CMP      r5,r0
0002d6  d03a              BEQ      |L1.846|
;;;268        int i;
;;;269        pBM = pCursor->pBitmap;
0002d8  682c              LDR      r4,[r5,#0]
;;;270        i = pBM->pPal->NumEntries > 4 ? 4 : pBM->pPal->NumEntries;
0002da  68e0              LDR      r0,[r4,#0xc]
0002dc  6800              LDR      r0,[r0,#0]
0002de  2804              CMP      r0,#4
0002e0  dd01              BLE      |L1.742|
0002e2  2004              MOVS     r0,#4
0002e4  e001              B        |L1.746|
                  |L1.742|
0002e6  68e0              LDR      r0,[r4,#0xc]
0002e8  6800              LDR      r0,[r0,#0]
                  |L1.746|
0002ea  4607              MOV      r7,r0
;;;271        while (i--) {
0002ec  e00a              B        |L1.772|
                  |L1.750|
;;;272          LCD_COLOR Color = *(pBM->pPal->pPalEntries + i);
0002ee  68e0              LDR      r0,[r4,#0xc]
0002f0  6880              LDR      r0,[r0,#8]
0002f2  f8509027          LDR      r9,[r0,r7,LSL #2]
;;;273          _ColorIndex[i] = LCD_Color2Index(Color);
0002f6  4648              MOV      r0,r9
0002f8  f7fffffe          BL       LCD_Color2Index
0002fc  4947              LDR      r1,|L1.1052|
0002fe  f8210017          STRH     r0,[r1,r7,LSL #1]
;;;274        }
000302  bf00              NOP      
                  |L1.772|
000304  0038              MOVS     r0,r7                 ;271
000306  f1a70701          SUB      r7,r7,#1              ;271
00030a  d1f0              BNE      |L1.750|
;;;275        _Hide();
00030c  f7fffffe          BL       _Hide
;;;276        AllocSize = pBM->XSize * pBM->YSize * sizeof(LCD_PIXELINDEX);
000310  8820              LDRH     r0,[r4,#0]
000312  8861              LDRH     r1,[r4,#2]
000314  4348              MULS     r0,r1,r0
000316  0046              LSLS     r6,r0,#1
;;;277        if (AllocSize != _AllocSize) {
000318  4846              LDR      r0,|L1.1076|
00031a  6800              LDR      r0,[r0,#0]  ; _AllocSize
00031c  4286              CMP      r6,r0
00031e  d007              BEQ      |L1.816|
;;;278          GUI_ALLOC_Free(_hBuffer);
000320  483b              LDR      r0,|L1.1040|
000322  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
000326  f7fffffe          BL       GUI_ALLOC_Free
;;;279          _hBuffer = 0;
00032a  2000              MOVS     r0,#0
00032c  4938              LDR      r1,|L1.1040|
00032e  8008              STRH     r0,[r1,#0]
                  |L1.816|
;;;280        }
;;;281        _hBuffer = GUI_ALLOC_AllocZero(AllocSize);
000330  b230              SXTH     r0,r6
000332  f7fffffe          BL       GUI_ALLOC_AllocZero
000336  4936              LDR      r1,|L1.1040|
000338  8008              STRH     r0,[r1,#0]
;;;282        _CursorOn = 1;
00033a  2001              MOVS     r0,#1
00033c  493b              LDR      r1,|L1.1068|
00033e  7008              STRB     r0,[r1,#0]
;;;283        _pCursor = pCursor;
000340  4835              LDR      r0,|L1.1048|
000342  6005              STR      r5,[r0,#0]  ; _pCursor
;;;284        _CalcRect();
000344  f7fffffe          BL       _CalcRect
;;;285        _Show();
000348  f7fffffe          BL       _Show
;;;286      }
00034c  bf00              NOP      
                  |L1.846|
;;;287      GUI_UNLOCK();
00034e  f7fffffe          BL       GUI_Unlock
;;;288      return pOldCursor;
000352  4640              MOV      r0,r8
;;;289    }
000354  e8bd87f0          POP      {r4-r10,pc}
;;;290    
                          ENDP

                  GUI_CURSOR_Hide PROC
;;;294    */
;;;295    void GUI_CURSOR_Hide(void) {
000358  b510              PUSH     {r4,lr}
;;;296      GUI_LOCK();
00035a  f7fffffe          BL       GUI_Lock
;;;297      _Hide();
00035e  f7fffffe          BL       _Hide
;;;298      _CursorOn = 0;
000362  2000              MOVS     r0,#0
000364  4931              LDR      r1,|L1.1068|
000366  7008              STRB     r0,[r1,#0]
;;;299      /* Set function pointer which window manager can use */
;;;300      GUI_CURSOR_pfTempHide   = NULL;
000368  4933              LDR      r1,|L1.1080|
00036a  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempHide
;;;301      GUI_CURSOR_pfTempUnhide = NULL;
00036c  4933              LDR      r1,|L1.1084|
00036e  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempUnhide
;;;302      GUI_UNLOCK();
000370  f7fffffe          BL       GUI_Unlock
;;;303    }
000374  bd10              POP      {r4,pc}
;;;304    
                          ENDP

                  GUI_CURSOR_Show PROC
;;;308    */
;;;309    void GUI_CURSOR_Show(void) {
000376  b510              PUSH     {r4,lr}
;;;310      GUI_LOCK();
000378  f7fffffe          BL       GUI_Lock
;;;311      LCDDEV_L0_GetRect(&_ClipRect);
00037c  4822              LDR      r0,|L1.1032|
00037e  f7fffffe          BL       LCD_L0_GetRect
;;;312      _Hide();
000382  f7fffffe          BL       _Hide
;;;313      _CursorOn = 1;
000386  2001              MOVS     r0,#1
000388  4928              LDR      r1,|L1.1068|
00038a  7008              STRB     r0,[r1,#0]
;;;314      /* Set function pointer which window manager can use */
;;;315      GUI_CURSOR_pfTempHide   = _TempHide;
00038c  482c              LDR      r0,|L1.1088|
00038e  492a              LDR      r1,|L1.1080|
000390  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempHide
;;;316      GUI_CURSOR_pfTempUnhide = _TempUnhide;
000392  482c              LDR      r0,|L1.1092|
000394  4929              LDR      r1,|L1.1084|
000396  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempUnhide
;;;317      if (!_pCursor) {
000398  481f              LDR      r0,|L1.1048|
00039a  6800              LDR      r0,[r0,#0]  ; _pCursor
00039c  b918              CBNZ     r0,|L1.934|
;;;318        GUI_CURSOR_Select(GUI_DEFAULT_CURSOR);
00039e  482a              LDR      r0,|L1.1096|
0003a0  f7fffffe          BL       GUI_CURSOR_Select
0003a4  e001              B        |L1.938|
                  |L1.934|
;;;319      } else {
;;;320        _Show();
0003a6  f7fffffe          BL       _Show
                  |L1.938|
;;;321      }
;;;322      GUI_UNLOCK();
0003aa  f7fffffe          BL       GUI_Unlock
;;;323    }
0003ae  bd10              POP      {r4,pc}
;;;324    
                          ENDP

                  GUI_CURSOR_SetPosition PROC
;;;328    */
;;;329    void GUI_CURSOR_SetPosition(int xNewPos, int yNewPos) {
0003b0  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
0003b4  b093              SUB      sp,sp,#0x4c
;;;330      int x, xStart, xStep, xEnd, xOff, xOverlapMin, xOverlapMax;
;;;331      int y, yStart, yStep, yEnd, yOff, yOverlapMin, yOverlapMax;
;;;332      int xSize;
;;;333      LCD_PIXELINDEX* pData;
;;;334      GUI_LOCK();
0003b6  f7fffffe          BL       GUI_Lock
;;;335      if (_hBuffer) {
0003ba  4815              LDR      r0,|L1.1040|
0003bc  8800              LDRH     r0,[r0,#0]  ; _hBuffer
0003be  b310              CBZ      r0,|L1.1030|
;;;336        if ((_x != xNewPos) | (_y != yNewPos)) {
0003c0  4817              LDR      r0,|L1.1056|
0003c2  6801              LDR      r1,[r0,#0]  ; _x
0003c4  9813              LDR      r0,[sp,#0x4c]
0003c6  4281              CMP      r1,r0
0003c8  d001              BEQ      |L1.974|
0003ca  2001              MOVS     r0,#1
0003cc  e000              B        |L1.976|
                  |L1.974|
0003ce  2000              MOVS     r0,#0
                  |L1.976|
0003d0  4914              LDR      r1,|L1.1060|
0003d2  680a              LDR      r2,[r1,#0]  ; _y
0003d4  9914              LDR      r1,[sp,#0x50]
0003d6  428a              CMP      r2,r1
0003d8  d001              BEQ      |L1.990|
0003da  2101              MOVS     r1,#1
0003dc  e000              B        |L1.992|
                  |L1.990|
0003de  2100              MOVS     r1,#0
                  |L1.992|
0003e0  4308              ORRS     r0,r0,r1
0003e2  d010              BEQ      |L1.1030|
;;;337          if (_CursorOn) {
0003e4  4811              LDR      r0,|L1.1068|
0003e6  7800              LDRB     r0,[r0,#0]  ; _CursorOn
0003e8  b380              CBZ      r0,|L1.1100|
;;;338            const GUI_BITMAP GUI_UNI_PTR * pBM = _pCursor->pBitmap;
0003ea  480b              LDR      r0,|L1.1048|
0003ec  6800              LDR      r0,[r0,#0]  ; _pCursor
0003ee  6800              LDR      r0,[r0,#0]
0003f0  9008              STR      r0,[sp,#0x20]
;;;339            /* Save & set clip rect */
;;;340            /* Compute helper variables */
;;;341            pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
0003f2  4807              LDR      r0,|L1.1040|
0003f4  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
0003f8  f7fffffe          BL       GUI_ALLOC_h2p
0003fc  9009              STR      r0,[sp,#0x24]
;;;342            xSize = _pCursor->pBitmap->XSize;
0003fe  4806              LDR      r0,|L1.1048|
000400  6800              LDR      r0,[r0,#0]  ; _pCursor
000402  6800              LDR      r0,[r0,#0]
000404  e023              B        |L1.1102|
                  |L1.1030|
000406  e10b              B        |L1.1568|
                  |L1.1032|
                          DCD      _ClipRect
                  |L1.1036|
                          DCD      LCD_aAPI
                  |L1.1040|
                          DCD      _hBuffer
                  |L1.1044|
                          DCD      _Rect
                  |L1.1048|
                          DCD      _pCursor
                  |L1.1052|
                          DCD      _ColorIndex
                  |L1.1056|
                          DCD      ||_x||
                  |L1.1060|
                          DCD      ||_y||
                  |L1.1064|
                          DCD      _CursorIsVis
                  |L1.1068|
                          DCD      _CursorOn
                  |L1.1072|
                          DCD      _CursorDeActCnt
                  |L1.1076|
                          DCD      _AllocSize
                  |L1.1080|
                          DCD      GUI_CURSOR_pfTempHide
                  |L1.1084|
                          DCD      GUI_CURSOR_pfTempUnhide
                  |L1.1088|
                          DCD      _TempHide
                  |L1.1092|
                          DCD      _TempUnhide
                  |L1.1096|
                          DCD      GUI_CursorArrowM
                  |L1.1100|
00044c  e0e0              B        |L1.1552|
                  |L1.1102|
00044e  8800              LDRH     r0,[r0,#0]
000450  900a              STR      r0,[sp,#0x28]
;;;343            xOff = xNewPos - _x;
000452  4976              LDR      r1,|L1.1580|
000454  9813              LDR      r0,[sp,#0x4c]
000456  6809              LDR      r1,[r1,#0]  ; _x
000458  1a46              SUBS     r6,r0,r1
;;;344            if (xOff > 0) {
00045a  2e00              CMP      r6,#0
00045c  dd0d              BLE      |L1.1146|
;;;345              xStep  = 1;
00045e  2001              MOVS     r0,#1
000460  9012              STR      r0,[sp,#0x48]
;;;346              xStart = 0;
000462  f04f0a00          MOV      r10,#0
;;;347              xEnd   = _pCursor->pBitmap->XSize;
000466  4872              LDR      r0,|L1.1584|
000468  6800              LDR      r0,[r0,#0]  ; _pCursor
00046a  6800              LDR      r0,[r0,#0]
00046c  8800              LDRH     r0,[r0,#0]
00046e  9011              STR      r0,[sp,#0x44]
;;;348              xOverlapMax = xEnd -1;
000470  9811              LDR      r0,[sp,#0x44]
000472  1e40              SUBS     r0,r0,#1
000474  9010              STR      r0,[sp,#0x40]
;;;349              xOverlapMin = xOff;
000476  46b3              MOV      r11,r6
000478  e00d              B        |L1.1174|
                  |L1.1146|
;;;350            } else {
;;;351              xStep  = -1;
00047a  f04f30ff          MOV      r0,#0xffffffff
00047e  9012              STR      r0,[sp,#0x48]
;;;352              xStart = xSize - 1;
000480  980a              LDR      r0,[sp,#0x28]
000482  f1a00a01          SUB      r10,r0,#1
;;;353              xEnd   = -1;
000486  f04f30ff          MOV      r0,#0xffffffff
00048a  9011              STR      r0,[sp,#0x44]
;;;354              xOverlapMin = 0;
00048c  f04f0b00          MOV      r11,#0
;;;355              xOverlapMax = xStart + xOff;
000490  eb0a0006          ADD      r0,r10,r6
000494  9010              STR      r0,[sp,#0x40]
                  |L1.1174|
;;;356            }
;;;357            yOff = yNewPos - _y;
000496  4967              LDR      r1,|L1.1588|
000498  9814              LDR      r0,[sp,#0x50]
00049a  6809              LDR      r1,[r1,#0]  ; _y
00049c  1a47              SUBS     r7,r0,r1
;;;358            if (yOff > 0) {
00049e  2f00              CMP      r7,#0
0004a0  dd0d              BLE      |L1.1214|
;;;359              yStep  = 1;
0004a2  2001              MOVS     r0,#1
0004a4  900e              STR      r0,[sp,#0x38]
;;;360              yStart = 0;
0004a6  2000              MOVS     r0,#0
0004a8  900f              STR      r0,[sp,#0x3c]
;;;361              yEnd   = _pCursor->pBitmap->YSize;
0004aa  4861              LDR      r0,|L1.1584|
0004ac  6800              LDR      r0,[r0,#0]  ; _pCursor
0004ae  6800              LDR      r0,[r0,#0]
0004b0  8840              LDRH     r0,[r0,#2]
0004b2  900d              STR      r0,[sp,#0x34]
;;;362              yOverlapMax = yEnd -1;
0004b4  980d              LDR      r0,[sp,#0x34]
0004b6  1e40              SUBS     r0,r0,#1
0004b8  900b              STR      r0,[sp,#0x2c]
;;;363              yOverlapMin = yOff;
0004ba  970c              STR      r7,[sp,#0x30]
0004bc  e010              B        |L1.1248|
                  |L1.1214|
;;;364            } else {
;;;365              yStep  = -1;
0004be  f04f30ff          MOV      r0,#0xffffffff
0004c2  900e              STR      r0,[sp,#0x38]
;;;366              yStart = _pCursor->pBitmap->YSize - 1;
0004c4  485a              LDR      r0,|L1.1584|
0004c6  6800              LDR      r0,[r0,#0]  ; _pCursor
0004c8  6800              LDR      r0,[r0,#0]
0004ca  8840              LDRH     r0,[r0,#2]
0004cc  1e40              SUBS     r0,r0,#1
0004ce  900f              STR      r0,[sp,#0x3c]
;;;367              yEnd   = -1;
0004d0  f04f30ff          MOV      r0,#0xffffffff
0004d4  900d              STR      r0,[sp,#0x34]
;;;368              yOverlapMin = 0;
0004d6  2000              MOVS     r0,#0
0004d8  900c              STR      r0,[sp,#0x30]
;;;369              yOverlapMax = yStart + yOff;
0004da  980f              LDR      r0,[sp,#0x3c]
0004dc  4438              ADD      r0,r0,r7
0004de  900b              STR      r0,[sp,#0x2c]
                  |L1.1248|
;;;370            }
;;;371            /* Restore & Draw */
;;;372            for (y = yStart; y != yEnd; y += yStep) {
0004e0  9c0f              LDR      r4,[sp,#0x3c]
0004e2  e090              B        |L1.1542|
                  |L1.1252|
;;;373              char yOverlaps;
;;;374              char yNewOverlaps;
;;;375              int yNew = y + yOff;
0004e4  eb040807          ADD      r8,r4,r7
;;;376              yOverlaps    = (y >= yOverlapMin) && (y <= yOverlapMax);
0004e8  980c              LDR      r0,[sp,#0x30]
0004ea  4284              CMP      r4,r0
0004ec  db04              BLT      |L1.1272|
0004ee  980b              LDR      r0,[sp,#0x2c]
0004f0  4284              CMP      r4,r0
0004f2  dc01              BGT      |L1.1272|
0004f4  2001              MOVS     r0,#1
0004f6  e000              B        |L1.1274|
                  |L1.1272|
0004f8  2000              MOVS     r0,#0
                  |L1.1274|
0004fa  b2c0              UXTB     r0,r0
0004fc  9007              STR      r0,[sp,#0x1c]
;;;377              yNewOverlaps = (yNew >= yOverlapMin) && (yNew <= yOverlapMax);
0004fe  980c              LDR      r0,[sp,#0x30]
000500  4580              CMP      r8,r0
000502  db04              BLT      |L1.1294|
000504  980b              LDR      r0,[sp,#0x2c]
000506  4580              CMP      r8,r0
000508  dc01              BGT      |L1.1294|
00050a  2001              MOVS     r0,#1
00050c  e000              B        |L1.1296|
                  |L1.1294|
00050e  2000              MOVS     r0,#0
                  |L1.1296|
000510  b2c0              UXTB     r0,r0
000512  9006              STR      r0,[sp,#0x18]
;;;378              for (x= xStart; x != xEnd; x += xStep) {
000514  4655              MOV      r5,r10
000516  e071              B        |L1.1532|
                  |L1.1304|
;;;379                char xyOverlaps, xyNewOverlaps;
;;;380                int BitmapPixel;
;;;381                LCD_PIXELINDEX Pixel;
;;;382                LCD_PIXELINDEX* pSave = pData + x + y * xSize;
000518  9809              LDR      r0,[sp,#0x24]
00051a  eb000145          ADD      r1,r0,r5,LSL #1
00051e  980a              LDR      r0,[sp,#0x28]
000520  4360              MULS     r0,r4,r0
000522  eb010040          ADD      r0,r1,r0,LSL #1
000526  9001              STR      r0,[sp,#4]
;;;383                int xNew = x + xOff;
000528  eb050906          ADD      r9,r5,r6
;;;384                BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
00052c  4622              MOV      r2,r4
00052e  4629              MOV      r1,r5
000530  9808              LDR      r0,[sp,#0x20]
000532  f7fffffe          BL       GUI_GetBitmapPixelIndex
000536  9003              STR      r0,[sp,#0xc]
;;;385                xyOverlaps    = (x    >= xOverlapMin) && (x    <= xOverlapMax) && yOverlaps;
000538  455d              CMP      r5,r11
00053a  db06              BLT      |L1.1354|
00053c  9810              LDR      r0,[sp,#0x40]
00053e  4285              CMP      r5,r0
000540  dc03              BGT      |L1.1354|
000542  9807              LDR      r0,[sp,#0x1c]
000544  b108              CBZ      r0,|L1.1354|
000546  2001              MOVS     r0,#1
000548  e000              B        |L1.1356|
                  |L1.1354|
00054a  2000              MOVS     r0,#0
                  |L1.1356|
00054c  b2c0              UXTB     r0,r0
00054e  9005              STR      r0,[sp,#0x14]
;;;386                xyNewOverlaps = (xNew >= xOverlapMin) && (xNew <= xOverlapMax) && yNewOverlaps;
000550  45d9              CMP      r9,r11
000552  db06              BLT      |L1.1378|
000554  9810              LDR      r0,[sp,#0x40]
000556  4581              CMP      r9,r0
000558  dc03              BGT      |L1.1378|
00055a  9806              LDR      r0,[sp,#0x18]
00055c  b108              CBZ      r0,|L1.1378|
00055e  2001              MOVS     r0,#1
000560  e000              B        |L1.1380|
                  |L1.1378|
000562  2000              MOVS     r0,#0
                  |L1.1380|
000564  b2c0              UXTB     r0,r0
000566  9004              STR      r0,[sp,#0x10]
;;;387                /* Restore old pixel if it was not transparent */
;;;388                if (BitmapPixel) {
000568  9803              LDR      r0,[sp,#0xc]
00056a  b198              CBZ      r0,|L1.1428|
;;;389                  if (!xyOverlaps || (GUI_GetBitmapPixelIndex(pBM, x - xOff, y - yOff) == 0)) {
00056c  9805              LDR      r0,[sp,#0x14]
00056e  b128              CBZ      r0,|L1.1404|
000570  1be2              SUBS     r2,r4,r7
000572  1ba9              SUBS     r1,r5,r6
000574  9808              LDR      r0,[sp,#0x20]
000576  f7fffffe          BL       GUI_GetBitmapPixelIndex
00057a  b958              CBNZ     r0,|L1.1428|
                  |L1.1404|
;;;390                    _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pSave));
00057c  9b01              LDR      r3,[sp,#4]
00057e  881a              LDRH     r2,[r3,#0]
000580  4b2d              LDR      r3,|L1.1592|
000582  f9b33002          LDRSH    r3,[r3,#2]  ; _Rect
000586  1919              ADDS     r1,r3,r4
000588  4b2b              LDR      r3,|L1.1592|
00058a  f9b33000          LDRSH    r3,[r3,#0]  ; _Rect
00058e  1958              ADDS     r0,r3,r5
000590  f7fffffe          BL       _SetPixelIndex
                  |L1.1428|
;;;391                  }
;;;392                }
;;;393                /* Save */
;;;394                if (xyNewOverlaps) {
000594  9804              LDR      r0,[sp,#0x10]
000596  b148              CBZ      r0,|L1.1452|
;;;395                  Pixel = *(pData + xNew + yNew * xSize);
000598  9809              LDR      r0,[sp,#0x24]
00059a  eb000149          ADD      r1,r0,r9,LSL #1
00059e  980a              LDR      r0,[sp,#0x28]
0005a0  fb08f000          MUL      r0,r8,r0
0005a4  f8310010          LDRH     r0,[r1,r0,LSL #1]
0005a8  9002              STR      r0,[sp,#8]
0005aa  e00d              B        |L1.1480|
                  |L1.1452|
;;;396                } else {
;;;397                  Pixel = _GetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew);
0005ac  4a22              LDR      r2,|L1.1592|
0005ae  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
0005b2  eb020108          ADD      r1,r2,r8
0005b6  4a20              LDR      r2,|L1.1592|
0005b8  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
0005bc  eb020009          ADD      r0,r2,r9
0005c0  f7fffffe          BL       _GetPixelIndex
0005c4  b280              UXTH     r0,r0
0005c6  9002              STR      r0,[sp,#8]
                  |L1.1480|
;;;398                }
;;;399                *pSave = Pixel;
0005c8  e9dd1001          LDRD     r1,r0,[sp,#4]
0005cc  8008              STRH     r0,[r1,#0]
;;;400                /* Write new  ... We could write pixel by pixel here */
;;;401                if (BitmapPixel) {
0005ce  9803              LDR      r0,[sp,#0xc]
0005d0  b190              CBZ      r0,|L1.1528|
;;;402                  LCD_PIXELINDEX NewPixel = _Log2Phys(BitmapPixel);
0005d2  9803              LDR      r0,[sp,#0xc]
0005d4  f7fffffe          BL       _Log2Phys
0005d8  b280              UXTH     r0,r0
0005da  9000              STR      r0,[sp,#0]
;;;403                  _SetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew, NewPixel);
0005dc  4a16              LDR      r2,|L1.1592|
0005de  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
0005e2  eb020108          ADD      r1,r2,r8
0005e6  4a14              LDR      r2,|L1.1592|
0005e8  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
0005ec  eb020009          ADD      r0,r2,r9
0005f0  9a00              LDR      r2,[sp,#0]
0005f2  f7fffffe          BL       _SetPixelIndex
;;;404                }
0005f6  bf00              NOP      
                  |L1.1528|
0005f8  9812              LDR      r0,[sp,#0x48]         ;378
0005fa  4405              ADD      r5,r5,r0              ;378
                  |L1.1532|
0005fc  9811              LDR      r0,[sp,#0x44]         ;378
0005fe  4285              CMP      r5,r0                 ;378
000600  d18a              BNE      |L1.1304|
000602  980e              LDR      r0,[sp,#0x38]         ;372
000604  4404              ADD      r4,r4,r0              ;372
                  |L1.1542|
000606  980d              LDR      r0,[sp,#0x34]         ;372
000608  4284              CMP      r4,r0                 ;372
00060a  f47faf6b          BNE      |L1.1252|
;;;405              }
;;;406            }
;;;407          }
00060e  bf00              NOP      
                  |L1.1552|
;;;408          _x = xNewPos;
000610  4906              LDR      r1,|L1.1580|
000612  9813              LDR      r0,[sp,#0x4c]
000614  6008              STR      r0,[r1,#0]  ; _x
;;;409          _y = yNewPos;
000616  4907              LDR      r1,|L1.1588|
000618  9814              LDR      r0,[sp,#0x50]
00061a  6008              STR      r0,[r1,#0]  ; _y
;;;410          _CalcRect();
00061c  f7fffffe          BL       _CalcRect
                  |L1.1568|
;;;411        }
;;;412      }
;;;413      GUI_UNLOCK();
000620  f7fffffe          BL       GUI_Unlock
;;;414    }
000624  b015              ADD      sp,sp,#0x54
000626  e8bd8ff0          POP      {r4-r11,pc}
;;;415    
                          ENDP

00062a  0000              DCW      0x0000
                  |L1.1580|
                          DCD      ||_x||
                  |L1.1584|
                          DCD      _pCursor
                  |L1.1588|
                          DCD      ||_y||
                  |L1.1592|
                          DCD      _Rect

                          AREA ||.data||, DATA, ALIGN=2

                  _hBuffer
000000  0000              DCB      0x00,0x00
                  _Rect
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
000008  0000              DCB      0x00,0x00
                  _CursorIsVis
00000a  00                DCB      0x00
                  _CursorOn
00000b  00                DCB      0x00
                  _pCursor
                          DCD      0x00000000
                  _CursorDeActCnt
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  _AllocSize
                          DCD      0x00000000
                  ||_x||
                          DCD      0x00000000
                  ||_y||
                          DCD      0x00000000
                  _ClipRect
                          %        8
                  _ColorIndex
                          %        8
