; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\text.o --depend=.\Obj\text.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\text.crf ..\Ucgui\GUI\Widget\TEXT.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _FreeAttached PROC
;;;64     */
;;;65     static void _FreeAttached(TEXT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;66       GUI_ALLOC_FreePtr(&pObj->hpText);
000004  f1040028          ADD      r0,r4,#0x28
000008  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;67     }
00000c  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  _Paint PROC
;;;72     */
;;;73     static void _Paint(TEXT_Handle hObj, TEXT_Obj* pObj) {
00000e  b57c              PUSH     {r2-r6,lr}
000010  4605              MOV      r5,r0
000012  460c              MOV      r4,r1
;;;74       const char * s;
;;;75       GUI_RECT Rect;
;;;76       GUI_USE_PARA(hObj);
000014  bf00              NOP      
;;;77       LCD_SetColor(pObj->TextColor);
000016  6b60              LDR      r0,[r4,#0x34]
000018  f7fffffe          BL       LCD_SetColor
;;;78       GUI_SetFont    (pObj->pFont);
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  f7fffffe          BL       GUI_SetFont
;;;79       /* Fill with parents background color */
;;;80       #if !TEXT_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
;;;81         if (pObj->BkColor == GUI_INVALID_COLOR) {
;;;82           LCD_SetBkColor(WIDGET__GetBkColor(hObj));
;;;83         } else {
;;;84           LCD_SetBkColor(pObj->BkColor);
;;;85         }
;;;86         GUI_Clear();
;;;87       #else
;;;88         if (!WM_GetHasTrans(hObj)) {
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       WM_GetHasTrans
000028  b920              CBNZ     r0,|L1.52|
;;;89           LCD_SetBkColor(pObj->BkColor);
00002a  6ba0              LDR      r0,[r4,#0x38]
00002c  f7fffffe          BL       LCD_SetBkColor
;;;90           GUI_Clear();
000030  f7fffffe          BL       GUI_Clear
                  |L1.52|
;;;91         }
;;;92       #endif
;;;93       /* Show the text */
;;;94       if (pObj->hpText) {
000034  8d20              LDRH     r0,[r4,#0x28]
000036  b180              CBZ      r0,|L1.90|
;;;95         s = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000038  f9b40028          LDRSH    r0,[r4,#0x28]
00003c  f7fffffe          BL       GUI_ALLOC_h2p
000040  4606              MOV      r6,r0
;;;96         GUI_SetTextMode(GUI_TM_TRANS);
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       GUI_SetTextMode
;;;97         WM_GetClientRect(&Rect);
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       WM_GetClientRect
;;;98         GUI_DispStringInRect(s, &Rect, pObj->Align);
00004e  f9b42030          LDRSH    r2,[r4,#0x30]
000052  4669              MOV      r1,sp
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       GUI_DispStringInRect
                  |L1.90|
;;;99       }
;;;100    }
00005a  bd7c              POP      {r2-r6,pc}
;;;101    
                          ENDP

                  _Delete PROC
;;;105    */
;;;106    static void _Delete(TEXT_Obj* pObj) {
00005c  b510              PUSH     {r4,lr}
00005e  4604              MOV      r4,r0
;;;107      /* Delete attached objects (if any) */
;;;108      GUI_DEBUG_LOG("TEXT: Delete() Deleting attached items");
;;;109      _FreeAttached(pObj);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       _FreeAttached
;;;110    }
000066  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  _TEXT_Callback PROC
;;;115    */
;;;116    static void _TEXT_Callback (WM_MESSAGE*pMsg) {
000068  b570              PUSH     {r4-r6,lr}
00006a  4604              MOV      r4,r0
;;;117      TEXT_Handle hObj = pMsg->hWin;
00006c  f9b45004          LDRSH    r5,[r4,#4]
;;;118      TEXT_Obj* pObj = TEXT_H2P(hObj);
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       GUI_ALLOC_h2p
000076  4606              MOV      r6,r0
;;;119      /* Let widget handle the standard messages */
;;;120      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000078  4621              MOV      r1,r4
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       WIDGET_HandleActive
000080  b900              CBNZ     r0,|L1.132|
                  |L1.130|
;;;121        return;
;;;122      }
;;;123      switch (pMsg->MsgId) {
;;;124      case WM_PAINT:
;;;125        GUI_DEBUG_LOG("TEXT: _Callback(WM_PAINT)\n");
;;;126        _Paint(hObj, pObj);
;;;127        return;
;;;128      case WM_DELETE:
;;;129        GUI_DEBUG_LOG("TEXT: _Callback(WM_DELETE)\n");
;;;130        _Delete(pObj);
;;;131        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;132      }
;;;133      WM_DefaultProc(pMsg);
;;;134    }
000082  bd70              POP      {r4-r6,pc}
                  |L1.132|
000084  6820              LDR      r0,[r4,#0]            ;123
000086  280b              CMP      r0,#0xb               ;123
000088  d006              BEQ      |L1.152|
00008a  280f              CMP      r0,#0xf               ;123
00008c  d108              BNE      |L1.160|
00008e  4631              MOV      r1,r6                 ;126
000090  4628              MOV      r0,r5                 ;126
000092  f7fffffe          BL       _Paint
000096  e7f4              B        |L1.130|
                  |L1.152|
000098  4630              MOV      r0,r6                 ;130
00009a  f7fffffe          BL       _Delete
00009e  bf00              NOP                            ;131
                  |L1.160|
0000a0  bf00              NOP                            ;131
0000a2  4620              MOV      r0,r4                 ;133
0000a4  f7fffffe          BL       WM_DefaultProc
0000a8  bf00              NOP      
0000aa  e7ea              B        |L1.130|
;;;135    
                          ENDP

                  TEXT_CreateEx PROC
;;;149    */
;;;150    TEXT_Handle TEXT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
0000ac  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int WinFlags, int ExFlags, int Id, const char* pText)
;;;152    {
0000b0  b085              SUB      sp,sp,#0x14
0000b2  4681              MOV      r9,r0
0000b4  468a              MOV      r10,r1
0000b6  4693              MOV      r11,r2
0000b8  9f13              LDR      r7,[sp,#0x4c]
0000ba  9d16              LDR      r5,[sp,#0x58]
;;;153      TEXT_Handle hObj;
;;;154      /* Create the window */
;;;155      #if TEXT_SUPPORT_TRANSPARENCY
;;;156        WinFlags |= WM_CF_HASTRANS;
0000bc  f0470701          ORR      r7,r7,#1
;;;157      #endif
;;;158      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _TEXT_Callback,
0000c0  231c              MOVS     r3,#0x1c
0000c2  4a25              LDR      r2,|L1.344|
0000c4  b2b9              UXTH     r1,r7
0000c6  9812              LDR      r0,[sp,#0x48]
0000c8  e88d000f          STM      sp,{r0-r3}
0000cc  465a              MOV      r2,r11
0000ce  4651              MOV      r1,r10
0000d0  4648              MOV      r0,r9
0000d2  9b08              LDR      r3,[sp,#0x20]
0000d4  f7fffffe          BL       WM_CreateWindowAsChild
0000d8  4680              MOV      r8,r0
;;;159                                    sizeof(TEXT_Obj) - sizeof(WM_Obj));
;;;160      if (hObj) {
0000da  f1b80f00          CMP      r8,#0
0000de  d02d              BEQ      |L1.316|
;;;161        TEXT_Obj* pObj;
;;;162        WM_HMEM hMem = 0;
0000e0  2600              MOVS     r6,#0
;;;163        WM_LOCK();
0000e2  f7fffffe          BL       GUI_Lock
;;;164        pObj = TEXT_H2P(hObj);
0000e6  4640              MOV      r0,r8
0000e8  f7fffffe          BL       GUI_ALLOC_h2p
0000ec  4604              MOV      r4,r0
;;;165        /* init widget specific variables */
;;;166        WIDGET__Init(&pObj->Widget, Id, 0);
0000ee  2200              MOVS     r2,#0
0000f0  4620              MOV      r0,r4
0000f2  9915              LDR      r1,[sp,#0x54]
0000f4  f7fffffe          BL       WIDGET__Init
;;;167        /* init member variables */
;;;168        TEXT_INIT_ID(pObj);
;;;169        if (pText) {
0000f8  b185              CBZ      r5,|L1.284|
;;;170          hMem = GUI_ALLOC_AllocZero(strlen(pText) + 1);
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       strlen
000100  1c40              ADDS     r0,r0,#1
000102  b200              SXTH     r0,r0
000104  9004              STR      r0,[sp,#0x10]
000106  f7fffffe          BL       GUI_ALLOC_AllocZero
00010a  4606              MOV      r6,r0
;;;171          if (hMem) {
00010c  b136              CBZ      r6,|L1.284|
;;;172            strcpy((char*) GUI_ALLOC_h2p(hMem), pText);
00010e  4630              MOV      r0,r6
000110  f7fffffe          BL       GUI_ALLOC_h2p
000114  4629              MOV      r1,r5
000116  9004              STR      r0,[sp,#0x10]
000118  f7fffffe          BL       strcpy
                  |L1.284|
;;;173          }
;;;174        }
;;;175        pObj->hpText = hMem;
00011c  8526              STRH     r6,[r4,#0x28]
;;;176        pObj->Align  = ExFlags;
00011e  9814              LDR      r0,[sp,#0x50]
000120  b200              SXTH     r0,r0
000122  8620              STRH     r0,[r4,#0x30]
;;;177        pObj->pFont  = _pDefaultFont;
000124  480d              LDR      r0,|L1.348|
000126  6800              LDR      r0,[r0,#0]  ; _pDefaultFont
000128  62e0              STR      r0,[r4,#0x2c]
;;;178        pObj->BkColor = GUI_INVALID_COLOR;
00012a  f06f4070          MVN      r0,#0xf0000000
00012e  63a0              STR      r0,[r4,#0x38]
;;;179        pObj->TextColor = _DefaultTextColor;
000130  480b              LDR      r0,|L1.352|
000132  6800              LDR      r0,[r0,#0]  ; _DefaultTextColor
000134  6360              STR      r0,[r4,#0x34]
;;;180        WM_UNLOCK();
000136  f7fffffe          BL       GUI_Unlock
;;;181      } else {
00013a  bf00              NOP      
                  |L1.316|
;;;182        GUI_DEBUG_ERROROUT_IF(hObj==0, "TEXT_Create failed")
;;;183      }
;;;184      return hObj;
00013c  4640              MOV      r0,r8
;;;185    }
00013e  b009              ADD      sp,sp,#0x24
000140  e8bd8ff0          POP      {r4-r11,pc}
;;;186    
                          ENDP

                  TEXT_SetDefaultFont PROC
;;;196    */
;;;197    void TEXT_SetDefaultFont(const GUI_FONT GUI_UNI_PTR * pFont) {
000144  4905              LDR      r1,|L1.348|
;;;198      _pDefaultFont = pFont;
000146  6008              STR      r0,[r1,#0]  ; _pDefaultFont
;;;199    }
000148  4770              BX       lr
;;;200    
                          ENDP

                  TEXT_SetDefaultTextColor PROC
;;;204    */
;;;205    void TEXT_SetDefaultTextColor(GUI_COLOR Color) {
00014a  4905              LDR      r1,|L1.352|
;;;206      _DefaultTextColor = Color;
00014c  6008              STR      r0,[r1,#0]  ; _DefaultTextColor
;;;207    }
00014e  4770              BX       lr
;;;208    
                          ENDP

                  TEXT_GetDefaultFont PROC
;;;212    */
;;;213    const GUI_FONT GUI_UNI_PTR * TEXT_GetDefaultFont(void) {
000150  4802              LDR      r0,|L1.348|
;;;214      return _pDefaultFont;
000152  6800              LDR      r0,[r0,#0]  ; _pDefaultFont
;;;215    }
000154  4770              BX       lr
;;;216    
                          ENDP

000156  0000              DCW      0x0000
                  |L1.344|
                          DCD      _TEXT_Callback
                  |L1.348|
                          DCD      _pDefaultFont
                  |L1.352|
                          DCD      _DefaultTextColor

                          AREA ||.data||, DATA, ALIGN=2

                  _pDefaultFont
                          DCD      GUI_Font13_1
                  _DefaultTextColor
                          DCD      0x00000000
