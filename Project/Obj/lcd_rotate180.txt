; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\lcd_rotate180.o --depend=.\Obj\lcd_rotate180.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcd_rotate180.crf ..\Ucgui\GUI\Core\LCD_Rotate180.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       x -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  48d3              LDR      r0,|L1.876|
00001e  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000020  f0100003          ANDS     r0,r0,#3
000024  d004              BEQ      |L1.48|
000026  2801              CMP      r0,#1
000028  d031              BEQ      |L1.142|
00002a  2802              CMP      r0,#2
00002c  d14e              BNE      |L1.204|
00002e  e018              B        |L1.98|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7829              LDRB     r1,[r5,#0]
000034  2380              MOVS     r3,#0x80
000036  4123              ASRS     r3,r3,r4
000038  4219              TST      r1,r3
00003a  d001              BEQ      |L1.64|
00003c  4651              MOV      r1,r10
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9900              LDR      r1,[sp,#0]
                  |L1.66|
000042  460a              MOV      r2,r1
000044  4630              MOV      r0,r6
000046  1e76              SUBS     r6,r6,#1
000048  4649              MOV      r1,r9
00004a  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;46     			if (++Diff == 8) {
00004e  1c60              ADDS     r0,r4,#1
000050  4604              MOV      r4,r0
000052  2808              CMP      r0,#8
000054  d101              BNE      |L1.90|
;;;47             Diff = 0;
000056  2400              MOVS     r4,#0
;;;48     				p++;
000058  1c6d              ADDS     r5,r5,#1
                  |L1.90|
;;;49     			}
;;;50     		} while (--xsize);
00005a  1e78              SUBS     r0,r7,#1
00005c  0007              MOVS     r7,r0
00005e  d1e8              BNE      |L1.50|
;;;51         break;
000060  e034              B        |L1.204|
                  |L1.98|
;;;52       case LCD_DRAWMODE_TRANS:
;;;53         do {
000062  bf00              NOP      
                  |L1.100|
;;;54       		if (*p & (0x80 >> Diff))
000064  7828              LDRB     r0,[r5,#0]
000066  2180              MOVS     r1,#0x80
000068  4121              ASRS     r1,r1,r4
00006a  4208              TST      r0,r1
00006c  d004              BEQ      |L1.120|
;;;55             LCDDEV_L0_SetPixelIndex(x, y, Index1);
00006e  4652              MOV      r2,r10
000070  4649              MOV      r1,r9
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.120|
;;;56           x--;
000078  1e76              SUBS     r6,r6,#1
;;;57     			if (++Diff == 8) {
00007a  1c60              ADDS     r0,r4,#1
00007c  4604              MOV      r4,r0
00007e  2808              CMP      r0,#8
000080  d101              BNE      |L1.134|
;;;58             Diff = 0;
000082  2400              MOVS     r4,#0
;;;59     				p++;
000084  1c6d              ADDS     r5,r5,#1
                  |L1.134|
;;;60     			}
;;;61     		} while (--xsize);
000086  1e78              SUBS     r0,r7,#1
000088  0007              MOVS     r7,r0
00008a  d1eb              BNE      |L1.100|
;;;62         break;
00008c  e01e              B        |L1.204|
                  |L1.142|
;;;63       case LCD_DRAWMODE_XOR:;
;;;64         do {
00008e  bf00              NOP      
                  |L1.144|
;;;65       		if (*p & (0x80 >> Diff)) {
000090  7828              LDRB     r0,[r5,#0]
000092  2180              MOVS     r1,#0x80
000094  4121              ASRS     r1,r1,r4
000096  4208              TST      r0,r1
000098  d00d              BEQ      |L1.182|
;;;66             int Pixel = LCD_L0_GetPixelIndex(x, y);
00009a  4649              MOV      r1,r9
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a2  4683              MOV      r11,r0
;;;67             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000a4  f64f70ff          MOV      r0,#0xffff
0000a8  eba0020b          SUB      r2,r0,r11
0000ac  4649              MOV      r1,r9
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;68           }
0000b4  bf00              NOP      
                  |L1.182|
;;;69           x--;
0000b6  1e76              SUBS     r6,r6,#1
;;;70     			if (++Diff == 8) {
0000b8  1c60              ADDS     r0,r4,#1
0000ba  4604              MOV      r4,r0
0000bc  2808              CMP      r0,#8
0000be  d101              BNE      |L1.196|
;;;71             Diff = 0;
0000c0  2400              MOVS     r4,#0
;;;72     				p++;
0000c2  1c6d              ADDS     r5,r5,#1
                  |L1.196|
;;;73     			}
;;;74     		} while (--xsize);
0000c4  1e78              SUBS     r0,r7,#1
0000c6  0007              MOVS     r7,r0
0000c8  d1e2              BNE      |L1.144|
;;;75         break;
0000ca  bf00              NOP      
                  |L1.204|
0000cc  bf00              NOP                            ;51
;;;76     	}
;;;77     }
0000ce  e8bd8ff8          POP      {r3-r11,pc}
;;;78     
                          ENDP

                  _DrawBitmap PROC
;;;85     */
;;;86     static void _DrawBitmap(int x0, int y0,
0000d2  e92d4fff          PUSH     {r0-r11,lr}
;;;87                            int xsize, int ysize,
;;;88                            int BitsPerPixel, 
;;;89                            int BytesPerLine,
;;;90                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;91                            const LCD_PIXELINDEX* pTrans)
;;;92     {
0000d6  b083              SUB      sp,sp,#0xc
0000d8  4680              MOV      r8,r0
0000da  460d              MOV      r5,r1
0000dc  4691              MOV      r9,r2
0000de  461e              MOV      r6,r3
0000e0  e9ddab10          LDRD     r10,r11,[sp,#0x40]
0000e4  9f12              LDR      r7,[sp,#0x48]
;;;93       int i;
;;;94       /* Use _DrawBitLineXBPP */
;;;95       for (i = 0; i < ysize; i++) {
0000e6  2400              MOVS     r4,#0
0000e8  e00f              B        |L1.266|
                  |L1.234|
;;;96         switch (BitsPerPixel) {
0000ea  f1ba0f01          CMP      r10,#1
0000ee  d109              BNE      |L1.260|
;;;97         case 1:
;;;98           _DrawBitLine1BPP(x0, y0 - i, pData, Diff, xsize, pTrans);
0000f0  9b14              LDR      r3,[sp,#0x50]
0000f2  1b29              SUBS     r1,r5,r4
0000f4  e9cd9300          STRD     r9,r3,[sp,#0]
0000f8  463a              MOV      r2,r7
0000fa  4640              MOV      r0,r8
0000fc  9b13              LDR      r3,[sp,#0x4c]
0000fe  f7fffffe          BL       _DrawBitLine1BPP
;;;99           break;
000102  bf00              NOP      
                  |L1.260|
000104  bf00              NOP      
;;;100        }
;;;101        pData += BytesPerLine;
000106  445f              ADD      r7,r7,r11
000108  1c64              ADDS     r4,r4,#1              ;95
                  |L1.266|
00010a  42b4              CMP      r4,r6                 ;95
00010c  dbed              BLT      |L1.234|
;;;102      }
;;;103    }
00010e  b007              ADD      sp,sp,#0x1c
000110  e8bd8ff0          POP      {r4-r11,pc}
;;;104    
                          ENDP

                  _Rect2TextRect PROC
;;;112    */
;;;113    static void _Rect2TextRect(GUI_RECT * pRect) {
000114  bf00              NOP      
;;;114      GUI_USE_PARA(pRect);
;;;115      /* nothing to do in case of rotating text by 180 degrees */
;;;116    }
000116  4770              BX       lr
;;;117    
                          ENDP

                  _TransformPoint180 PROC
;;;126    */
;;;127    static void _TransformPoint180(int * pXPos, int * pYPos) {
000118  e92d47fc          PUSH     {r2-r10,lr}
00011c  4604              MOV      r4,r0
00011e  460d              MOV      r5,r1
;;;128      GUI_RECT ClientRect = {0};
000120  2000              MOVS     r0,#0
000122  9000              STR      r0,[sp,#0]
000124  9001              STR      r0,[sp,#4]
;;;129      int xPos, yPos, xNumPixel, yNumPixel;
;;;130      /* Get the client rectangle */
;;;131      #if GUI_WINSUPPORT
;;;132        WM_GetWindowRect(&ClientRect);
000126  4668              MOV      r0,sp
000128  f7fffffe          BL       WM_GetWindowRect
;;;133      #else
;;;134        GUI_GetClientRect(&ClientRect);
;;;135      #endif
;;;136      xNumPixel = LCD_GetXSize() - 1;
00012c  f7fffffe          BL       LCD_GetXSize
000130  f1a00801          SUB      r8,r0,#1
;;;137      yNumPixel = LCD_GetYSize() - 1;
000134  f7fffffe          BL       LCD_GetYSize
000138  f1a00901          SUB      r9,r0,#1
;;;138      if (ClientRect.x1 > xNumPixel) {
00013c  f9bd0004          LDRSH    r0,[sp,#4]
000140  4540              CMP      r0,r8
000142  dd03              BLE      |L1.332|
;;;139        ClientRect.x1 = xNumPixel;
000144  fa0ff088          SXTH     r0,r8
000148  f8ad0004          STRH     r0,[sp,#4]
                  |L1.332|
;;;140      }
;;;141      if (ClientRect.y1 > yNumPixel) {
00014c  f9bd0006          LDRSH    r0,[sp,#6]
000150  4548              CMP      r0,r9
000152  dd03              BLE      |L1.348|
;;;142        ClientRect.y1 = yNumPixel;
000154  fa0ff089          SXTH     r0,r9
000158  f8ad0006          STRH     r0,[sp,#6]
                  |L1.348|
;;;143      }
;;;144      /* Save old positions */
;;;145      xPos = *pXPos;
00015c  6826              LDR      r6,[r4,#0]
;;;146      yPos = *pYPos;
00015e  682f              LDR      r7,[r5,#0]
;;;147      /* Handle rotation of text rectangle */
;;;148      *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
000160  f9bd0000          LDRSH    r0,[sp,#0]
000164  4982              LDR      r1,|L1.880|
000166  f9b11004          LDRSH    r1,[r1,#4]  ; GUI_RectDispString
00016a  4408              ADD      r0,r0,r1
00016c  4980              LDR      r1,|L1.880|
00016e  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
000172  1a71              SUBS     r1,r6,r1
000174  1a40              SUBS     r0,r0,r1
000176  6020              STR      r0,[r4,#0]
;;;149      *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
000178  f9bd0002          LDRSH    r0,[sp,#2]
00017c  497c              LDR      r1,|L1.880|
00017e  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
000182  4408              ADD      r0,r0,r1
000184  497a              LDR      r1,|L1.880|
000186  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
00018a  1a79              SUBS     r1,r7,r1
00018c  1a40              SUBS     r0,r0,r1
00018e  6028              STR      r0,[r5,#0]
;;;150    }
000190  e8bd87fc          POP      {r2-r10,pc}
;;;151    
                          ENDP

                  _DrawBitmap180 PROC
;;;155    */
;;;156    static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000194  e92d4fff          PUSH     {r0-r11,lr}
;;;157                               int BitsPerPixel, int BytesPerLine,
;;;158                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;159    {
000198  b08b              SUB      sp,sp,#0x2c
00019a  4614              MOV      r4,r2
00019c  461d              MOV      r5,r3
00019e  f8dda060          LDR      r10,[sp,#0x60]
0001a2  f8dd8070          LDR      r8,[sp,#0x70]
0001a6  9f1a              LDR      r7,[sp,#0x68]
;;;160      U8  Data = 0;
0001a8  2000              MOVS     r0,#0
0001aa  900a              STR      r0,[sp,#0x28]
;;;161      int x1, y1;
;;;162      /* Handle the optional Y-magnification */
;;;163      y1 = y0 + ysize - 1;
0001ac  980c              LDR      r0,[sp,#0x30]
0001ae  4428              ADD      r0,r0,r5
0001b0  1e40              SUBS     r0,r0,#1
0001b2  9008              STR      r0,[sp,#0x20]
;;;164      x1 = x0 + xsize - 1;
0001b4  980b              LDR      r0,[sp,#0x2c]
0001b6  4420              ADD      r0,r0,r4
0001b8  1e40              SUBS     r0,r0,#1
0001ba  9009              STR      r0,[sp,#0x24]
;;;165      /* Rotate positions */
;;;166      _TransformPoint180(&x0, &y0);
0001bc  a90c              ADD      r1,sp,#0x30
0001be  a80b              ADD      r0,sp,#0x2c
0001c0  f7fffffe          BL       _TransformPoint180
;;;167      _TransformPoint180(&x1, &y1);
0001c4  a908              ADD      r1,sp,#0x20
0001c6  a809              ADD      r0,sp,#0x24
0001c8  f7fffffe          BL       _TransformPoint180
;;;168      /*  Handle BITMAP without magnification */
;;;169      if ((xMul == 1) && (yMul == 1)) {
0001cc  f1ba0f01          CMP      r10,#1
0001d0  d160              BNE      |L1.660|
0001d2  9819              LDR      r0,[sp,#0x64]
0001d4  2801              CMP      r0,#1
0001d6  d15d              BNE      |L1.660|
;;;170        int Diff;
;;;171        /* Clip top */
;;;172        if (y0 > GUI_Context.ClipRect.y1) {
0001d8  4864              LDR      r0,|L1.876|
0001da  f9b0000a          LDRSH    r0,[r0,#0xa]
0001de  990c              LDR      r1,[sp,#0x30]
0001e0  4288              CMP      r0,r1
0001e2  da0d              BGE      |L1.512|
;;;173          int Diff = y0 - GUI_Context.ClipRect.y1;
0001e4  4961              LDR      r1,|L1.876|
0001e6  f9b1100a          LDRSH    r1,[r1,#0xa]  ; GUI_Context
0001ea  9a0c              LDR      r2,[sp,#0x30]
0001ec  1a50              SUBS     r0,r2,r1
;;;174          y0       = GUI_Context.ClipRect.y1;
0001ee  495f              LDR      r1,|L1.876|
0001f0  f9b1100a          LDRSH    r1,[r1,#0xa]
0001f4  910c              STR      r1,[sp,#0x30]
;;;175          pPixel  += Diff * BytesPerLine;
0001f6  991b              LDR      r1,[sp,#0x6c]
0001f8  fb008801          MLA      r8,r0,r1,r8
;;;176          ysize   -= Diff;
0001fc  1a2d              SUBS     r5,r5,r0
;;;177        }
0001fe  bf00              NOP      
                  |L1.512|
;;;178        /* Clip bottom */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
000200  485a              LDR      r0,|L1.876|
000202  f9b00006          LDRSH    r0,[r0,#6]
000206  9908              LDR      r1,[sp,#0x20]
000208  4288              CMP      r0,r1
00020a  dd06              BLE      |L1.538|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
00020c  4957              LDR      r1,|L1.876|
00020e  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_Context
000212  9a08              LDR      r2,[sp,#0x20]
000214  1a88              SUBS     r0,r1,r2
;;;181          ysize -= Diff;
000216  1a2d              SUBS     r5,r5,r0
;;;182        }
000218  bf00              NOP      
                  |L1.538|
;;;183        if (ysize <= 0) {
00021a  2d00              CMP      r5,#0
00021c  dc02              BGT      |L1.548|
                  |L1.542|
;;;184    		  return;
;;;185        }
;;;186        /* Clip right side */
;;;187        if (x1 < GUI_Context.ClipRect.x0) {
;;;188          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;189          xsize   -= Diff;
;;;190        }
;;;191        /* Clip left side */
;;;192        Diff = 0;
;;;193        if (x0 > GUI_Context.ClipRect.x1) {
;;;194          Diff   = x0 - GUI_Context.ClipRect.x1;
;;;195    			xsize -= Diff;
;;;196    			switch (BitsPerPixel) {
;;;197    			case 1:
;;;198      			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
;;;199    				break;
;;;200    			}
;;;201        }
;;;202        if (xsize <= 0) {
;;;203    		  return;
;;;204        }
;;;205        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;206      } else {
;;;207        /* Handle BITMAP with magnification */
;;;208        int x, y;
;;;209        int yi;
;;;210        int Shift = 8 - BitsPerPixel;
;;;211        for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
;;;212          int yMax = y + yMul - 1;
;;;213          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;214          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;215            int BitsLeft = 0;
;;;216            int xi;
;;;217            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;218            for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
;;;219              U8  Index;
;;;220              if (!BitsLeft) {
;;;221                Data = *pDataLine++;
;;;222                BitsLeft =8;
;;;223              }
;;;224              Index = Data >> Shift;
;;;225              Data    <<= BitsPerPixel;
;;;226              BitsLeft -= BitsPerPixel;
;;;227              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;228                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;229                if (pTrans) {
;;;230                  LCD_COLORINDEX = *(pTrans + Index);
;;;231                } else {
;;;232                  LCD_COLORINDEX = Index;
;;;233                }
;;;234                LCD_FillRect(x - xMul + 1, y, x, yMax);
;;;235                LCD_COLORINDEX = OldColor;
;;;236              }
;;;237            }
;;;238          }
;;;239        }
;;;240      }
;;;241    }
00021e  b00f              ADD      sp,sp,#0x3c
000220  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.548|
000224  4851              LDR      r0,|L1.876|
000226  f9b00004          LDRSH    r0,[r0,#4]            ;187  ; GUI_Context
00022a  9909              LDR      r1,[sp,#0x24]         ;187
00022c  4288              CMP      r0,r1                 ;187
00022e  dd06              BLE      |L1.574|
000230  494e              LDR      r1,|L1.876|
000232  f9b11004          LDRSH    r1,[r1,#4]            ;188  ; GUI_Context
000236  9a09              LDR      r2,[sp,#0x24]         ;188
000238  1a88              SUBS     r0,r1,r2              ;188
00023a  1a24              SUBS     r4,r4,r0              ;189
00023c  bf00              NOP                            ;190
                  |L1.574|
00023e  2600              MOVS     r6,#0                 ;192
000240  484a              LDR      r0,|L1.876|
000242  f9b00008          LDRSH    r0,[r0,#8]            ;193
000246  990b              LDR      r1,[sp,#0x2c]         ;193
000248  4288              CMP      r0,r1                 ;193
00024a  da12              BGE      |L1.626|
00024c  4847              LDR      r0,|L1.876|
00024e  f9b00008          LDRSH    r0,[r0,#8]            ;194
000252  990b              LDR      r1,[sp,#0x2c]         ;194
000254  1a0e              SUBS     r6,r1,r0              ;194
000256  1ba4              SUBS     r4,r4,r6              ;195
000258  2f01              CMP      r7,#1                 ;196
00025a  d109              BNE      |L1.624|
00025c  eb0808e6          ADD      r8,r8,r6,ASR #3       ;198
000260  10f0              ASRS     r0,r6,#3              ;198
000262  990b              LDR      r1,[sp,#0x2c]         ;198
000264  eb0100c0          ADD      r0,r1,r0,LSL #3       ;198
000268  900b              STR      r0,[sp,#0x2c]         ;198
00026a  f0060607          AND      r6,r6,#7              ;198
00026e  bf00              NOP                            ;199
                  |L1.624|
000270  bf00              NOP                            ;199
                  |L1.626|
000272  2c00              CMP      r4,#0                 ;202
000274  dc00              BGT      |L1.632|
000276  e7d2              B        |L1.542|
                  |L1.632|
000278  9b1d              LDR      r3,[sp,#0x74]         ;205
00027a  981b              LDR      r0,[sp,#0x6c]         ;205
00027c  e9cd8602          STRD     r8,r6,[sp,#8]         ;205
000280  e9cd7000          STRD     r7,r0,[sp,#0]         ;205
000284  9304              STR      r3,[sp,#0x10]         ;205
000286  462b              MOV      r3,r5                 ;205
000288  4622              MOV      r2,r4                 ;205
00028a  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;205
00028e  f7fffffe          BL       _DrawBitmap
000292  e069              B        |L1.872|
                  |L1.660|
000294  f1c70008          RSB      r0,r7,#8              ;210
000298  9006              STR      r0,[sp,#0x18]         ;210
00029a  9e0c              LDR      r6,[sp,#0x30]         ;211
00029c  2000              MOVS     r0,#0                 ;211
00029e  9007              STR      r0,[sp,#0x1c]         ;211
0002a0  e05e              B        |L1.864|
                  |L1.674|
0002a2  9819              LDR      r0,[sp,#0x64]         ;212
0002a4  4430              ADD      r0,r0,r6              ;212
0002a6  1e40              SUBS     r0,r0,#1              ;212
0002a8  9005              STR      r0,[sp,#0x14]         ;212
0002aa  4830              LDR      r0,|L1.876|
0002ac  f9b01006          LDRSH    r1,[r0,#6]            ;214
0002b0  9805              LDR      r0,[sp,#0x14]         ;214
0002b2  4281              CMP      r1,r0                 ;214
0002b4  dc4d              BGT      |L1.850|
0002b6  482d              LDR      r0,|L1.876|
0002b8  f9b0000a          LDRSH    r0,[r0,#0xa]          ;214
0002bc  42b0              CMP      r0,r6                 ;214
0002be  db48              BLT      |L1.850|
0002c0  2000              MOVS     r0,#0                 ;215
0002c2  9004              STR      r0,[sp,#0x10]         ;215
0002c4  f8cd8008          STR      r8,[sp,#8]            ;217
0002c8  f8ddb02c          LDR      r11,[sp,#0x2c]        ;218
0002cc  9003              STR      r0,[sp,#0xc]          ;218
0002ce  e03c              B        |L1.842|
                  |L1.720|
0002d0  9804              LDR      r0,[sp,#0x10]         ;220
0002d2  b938              CBNZ     r0,|L1.740|
0002d4  9802              LDR      r0,[sp,#8]            ;221
0002d6  7800              LDRB     r0,[r0,#0]            ;221
0002d8  900a              STR      r0,[sp,#0x28]         ;221
0002da  9802              LDR      r0,[sp,#8]            ;221
0002dc  1c40              ADDS     r0,r0,#1              ;221
0002de  9002              STR      r0,[sp,#8]            ;221
0002e0  2008              MOVS     r0,#8                 ;222
0002e2  9004              STR      r0,[sp,#0x10]         ;222
                  |L1.740|
0002e4  9906              LDR      r1,[sp,#0x18]         ;224
0002e6  980a              LDR      r0,[sp,#0x28]         ;224
0002e8  4108              ASRS     r0,r0,r1              ;224
0002ea  f00009ff          AND      r9,r0,#0xff           ;224
0002ee  980a              LDR      r0,[sp,#0x28]         ;225
0002f0  40b8              LSLS     r0,r0,r7              ;225
0002f2  b2c0              UXTB     r0,r0                 ;225
0002f4  900a              STR      r0,[sp,#0x28]         ;225
0002f6  9804              LDR      r0,[sp,#0x10]         ;226
0002f8  1bc0              SUBS     r0,r0,r7              ;226
0002fa  9004              STR      r0,[sp,#0x10]         ;226
0002fc  f1b90f00          CMP      r9,#0                 ;227
000300  d104              BNE      |L1.780|
000302  481a              LDR      r0,|L1.876|
000304  7b00              LDRB     r0,[r0,#0xc]          ;227  ; GUI_Context
000306  f0100f02          TST      r0,#2                 ;227
00030a  d119              BNE      |L1.832|
                  |L1.780|
00030c  4817              LDR      r0,|L1.876|
00030e  8840              LDRH     r0,[r0,#2]            ;228  ; GUI_Context
000310  9001              STR      r0,[sp,#4]            ;228
000312  981d              LDR      r0,[sp,#0x74]         ;229
000314  b128              CBZ      r0,|L1.802|
000316  981d              LDR      r0,[sp,#0x74]         ;230
000318  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;230
00031c  4913              LDR      r1,|L1.876|
00031e  8048              STRH     r0,[r1,#2]            ;230
000320  e002              B        |L1.808|
                  |L1.802|
000322  4812              LDR      r0,|L1.876|
000324  f8a09002          STRH     r9,[r0,#2]            ;232
                  |L1.808|
000328  ebab010a          SUB      r1,r11,r10            ;234
00032c  1c48              ADDS     r0,r1,#1              ;234
00032e  465a              MOV      r2,r11                ;234
000330  4631              MOV      r1,r6                 ;234
000332  9b05              LDR      r3,[sp,#0x14]         ;234
000334  f7fffffe          BL       LCD_FillRect
000338  490c              LDR      r1,|L1.876|
00033a  9801              LDR      r0,[sp,#4]            ;235
00033c  8048              STRH     r0,[r1,#2]            ;235
00033e  bf00              NOP                            ;236
                  |L1.832|
000340  9803              LDR      r0,[sp,#0xc]          ;218
000342  1c40              ADDS     r0,r0,#1              ;218
000344  9003              STR      r0,[sp,#0xc]          ;218
000346  ebab0b0a          SUB      r11,r11,r10           ;218
                  |L1.842|
00034a  9803              LDR      r0,[sp,#0xc]          ;218
00034c  42a0              CMP      r0,r4                 ;218
00034e  dbbf              BLT      |L1.720|
000350  bf00              NOP                            ;238
                  |L1.850|
000352  9807              LDR      r0,[sp,#0x1c]         ;211
000354  1c40              ADDS     r0,r0,#1              ;211
000356  9007              STR      r0,[sp,#0x1c]         ;211
000358  9819              LDR      r0,[sp,#0x64]         ;211
00035a  1a36              SUBS     r6,r6,r0              ;211
00035c  981b              LDR      r0,[sp,#0x6c]         ;211
00035e  4480              ADD      r8,r8,r0              ;211
                  |L1.864|
000360  9807              LDR      r0,[sp,#0x1c]         ;211
000362  42a8              CMP      r0,r5                 ;211
000364  db9d              BLT      |L1.674|
000366  bf00              NOP                            ;240
                  |L1.872|
000368  bf00              NOP      
00036a  e758              B        |L1.542|
;;;242    
                          ENDP

                  |L1.876|
                          DCD      GUI_Context
                  |L1.880|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIList180
                          DCD      _DrawBitmap180
                          DCD      _Rect2TextRect
