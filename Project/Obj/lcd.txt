; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\lcd.o --depend=.\Obj\lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcd.crf ..\Ucgui\GUI\Core\LCD.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetColorIndex PROC
;;;60     */
;;;61     static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
000000  4601              MOV      r1,r0
;;;62       return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
000002  48f9              LDR      r0,|L1.1000|
000004  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000006  f0100f04          TST      r0,#4
00000a  d001              BEQ      |L1.16|
00000c  1e48              SUBS     r0,r1,#1
                  |L1.14|
;;;63     }
00000e  4770              BX       lr
                  |L1.16|
000010  4608              MOV      r0,r1                 ;62
000012  e7fc              B        |L1.14|
;;;64     
                          ENDP

                  LCD_SetColorIndex PROC
;;;74     */
;;;75     void LCD_SetColorIndex(int Index) {
000014  b510              PUSH     {r4,lr}
000016  4604              MOV      r4,r0
;;;76       LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       _GetColorIndex
00001e  49f2              LDR      r1,|L1.1000|
000020  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;77     }
000024  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  LCD_SetBkColorIndex PROC
;;;82     */
;;;83     void LCD_SetBkColorIndex(int Index) {
000026  b510              PUSH     {r4,lr}
000028  4604              MOV      r4,r0
;;;84       LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       _GetColorIndex
000030  49ed              LDR      r1,|L1.1000|
000032  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;85     }
000036  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  LCD_SetDrawMode PROC
;;;90     */
;;;91     LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
000038  b510              PUSH     {r4,lr}
00003a  4601              MOV      r1,r0
;;;92       LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
00003c  4aea              LDR      r2,|L1.1000|
00003e  7b10              LDRB     r0,[r2,#0xc]  ; GUI_Context
;;;93       if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
000040  7b12              LDRB     r2,[r2,#0xc]  ; GUI_Context
000042  404a              EORS     r2,r2,r1
000044  f0120f04          TST      r2,#4
000048  d007              BEQ      |L1.90|
;;;94         LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
00004a  4be7              LDR      r3,|L1.1000|
00004c  881a              LDRH     r2,[r3,#0]  ; GUI_Context
;;;95         LCD_BKCOLORINDEX    = LCD_COLORINDEX;
00004e  885b              LDRH     r3,[r3,#2]  ; GUI_Context
000050  4ce5              LDR      r4,|L1.1000|
000052  8023              STRH     r3,[r4,#0]
;;;96         LCD_COLORINDEX = temp;
000054  4623              MOV      r3,r4
000056  805a              STRH     r2,[r3,#2]
;;;97       }
000058  bf00              NOP      
                  |L1.90|
;;;98       GUI_Context.DrawMode = dm;
00005a  4be3              LDR      r3,|L1.1000|
00005c  7319              STRB     r1,[r3,#0xc]
;;;99       return OldDM;
;;;100    }
00005e  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  LCD_DrawPixel PROC
;;;105    */
;;;106    void LCD_DrawPixel(int x, int y) {
000060  b570              PUSH     {r4-r6,lr}
000062  4604              MOV      r4,r0
000064  460d              MOV      r5,r1
;;;107      RETURN_IF_Y_OUT();
000066  48e0              LDR      r0,|L1.1000|
000068  f9b00006          LDRSH    r0,[r0,#6]
00006c  42a8              CMP      r0,r5
00006e  dd00              BLE      |L1.114|
                  |L1.112|
;;;108      RETURN_IF_X_OUT();
;;;109      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
;;;110        LCDDEV_L0_XorPixel(x, y);
;;;111      } else {
;;;112        LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
;;;113      }
;;;114    }
000070  bd70              POP      {r4-r6,pc}
                  |L1.114|
000072  48dd              LDR      r0,|L1.1000|
000074  f9b0000a          LDRSH    r0,[r0,#0xa]          ;107
000078  42a8              CMP      r0,r5                 ;107
00007a  da00              BGE      |L1.126|
00007c  e7f8              B        |L1.112|
                  |L1.126|
00007e  48da              LDR      r0,|L1.1000|
000080  f9b00004          LDRSH    r0,[r0,#4]            ;108  ; GUI_Context
000084  42a0              CMP      r0,r4                 ;108
000086  dd00              BLE      |L1.138|
000088  e7f2              B        |L1.112|
                  |L1.138|
00008a  48d7              LDR      r0,|L1.1000|
00008c  f9b00008          LDRSH    r0,[r0,#8]            ;108
000090  42a0              CMP      r0,r4                 ;108
000092  da00              BGE      |L1.150|
000094  e7ec              B        |L1.112|
                  |L1.150|
000096  48d4              LDR      r0,|L1.1000|
000098  7b00              LDRB     r0,[r0,#0xc]          ;109  ; GUI_Context
00009a  f0100f01          TST      r0,#1                 ;109
00009e  d004              BEQ      |L1.170|
0000a0  4629              MOV      r1,r5                 ;110
0000a2  4620              MOV      r0,r4                 ;110
0000a4  f7fffffe          BL       LCD_L0_XorPixel
0000a8  e005              B        |L1.182|
                  |L1.170|
0000aa  48cf              LDR      r0,|L1.1000|
0000ac  8842              LDRH     r2,[r0,#2]            ;112  ; GUI_Context
0000ae  4629              MOV      r1,r5                 ;112
0000b0  4620              MOV      r0,r4                 ;112
0000b2  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.182|
0000b6  bf00              NOP      
0000b8  e7da              B        |L1.112|
;;;115    
                          ENDP

                  LCD_DrawHLine PROC
;;;119    */
;;;120    void LCD_DrawHLine(int x0, int y,  int x1) {
0000ba  b570              PUSH     {r4-r6,lr}
0000bc  4604              MOV      r4,r0
0000be  460d              MOV      r5,r1
0000c0  4616              MOV      r6,r2
;;;121      /* Perform clipping and check if there is something to do */
;;;122      RETURN_IF_Y_OUT();
0000c2  48c9              LDR      r0,|L1.1000|
0000c4  f9b00006          LDRSH    r0,[r0,#6]
0000c8  42a8              CMP      r0,r5
0000ca  dd00              BLE      |L1.206|
                  |L1.204|
;;;123      CLIP_X();
;;;124      if (x1<x0)
;;;125        return;
;;;126      /* Call driver to draw */
;;;127      LCDDEV_L0_DrawHLine(x0, y, x1);
;;;128    }
0000cc  bd70              POP      {r4-r6,pc}
                  |L1.206|
0000ce  48c6              LDR      r0,|L1.1000|
0000d0  f9b0000a          LDRSH    r0,[r0,#0xa]          ;122
0000d4  42a8              CMP      r0,r5                 ;122
0000d6  da00              BGE      |L1.218|
0000d8  e7f8              B        |L1.204|
                  |L1.218|
0000da  48c3              LDR      r0,|L1.1000|
0000dc  f9b00004          LDRSH    r0,[r0,#4]            ;123  ; GUI_Context
0000e0  42a0              CMP      r0,r4                 ;123
0000e2  dd02              BLE      |L1.234|
0000e4  48c0              LDR      r0,|L1.1000|
0000e6  f9b04004          LDRSH    r4,[r0,#4]            ;123  ; GUI_Context
                  |L1.234|
0000ea  48bf              LDR      r0,|L1.1000|
0000ec  f9b00008          LDRSH    r0,[r0,#8]            ;123
0000f0  42b0              CMP      r0,r6                 ;123
0000f2  da02              BGE      |L1.250|
0000f4  48bc              LDR      r0,|L1.1000|
0000f6  f9b06008          LDRSH    r6,[r0,#8]            ;123
                  |L1.250|
0000fa  42a6              CMP      r6,r4                 ;124
0000fc  da00              BGE      |L1.256|
0000fe  e7e5              B        |L1.204|
                  |L1.256|
000100  4632              MOV      r2,r6                 ;127
000102  4629              MOV      r1,r5                 ;127
000104  4620              MOV      r0,r4                 ;127
000106  f7fffffe          BL       LCD_L0_DrawHLine
00010a  bf00              NOP      
00010c  e7de              B        |L1.204|
;;;129    
                          ENDP

                  LCD_FillRect PROC
;;;133    */
;;;134    void LCD_FillRect(int x0, int y0, int x1, int y1) {
00010e  e92d41f0          PUSH     {r4-r8,lr}
000112  4604              MOV      r4,r0
000114  460d              MOV      r5,r1
000116  4616              MOV      r6,r2
000118  461f              MOV      r7,r3
;;;135      /* Perform clipping and check if there is something to do */
;;;136      CLIP_X();
00011a  48b3              LDR      r0,|L1.1000|
00011c  f9b00004          LDRSH    r0,[r0,#4]  ; GUI_Context
000120  42a0              CMP      r0,r4
000122  dd02              BLE      |L1.298|
000124  48b0              LDR      r0,|L1.1000|
000126  f9b04004          LDRSH    r4,[r0,#4]  ; GUI_Context
                  |L1.298|
00012a  48af              LDR      r0,|L1.1000|
00012c  f9b00008          LDRSH    r0,[r0,#8]
000130  42b0              CMP      r0,r6
000132  da02              BGE      |L1.314|
000134  48ac              LDR      r0,|L1.1000|
000136  f9b06008          LDRSH    r6,[r0,#8]
                  |L1.314|
;;;137      if (x1<x0)
00013a  42a6              CMP      r6,r4
00013c  da01              BGE      |L1.322|
                  |L1.318|
;;;138        return;
;;;139      CLIP_Y();
;;;140      if (y1<y0)
;;;141        return;
;;;142      /* Call driver to draw */
;;;143      LCDDEV_L0_FillRect(x0,y0,x1,y1);
;;;144    }
00013e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.322|
000142  48a9              LDR      r0,|L1.1000|
000144  f9b00006          LDRSH    r0,[r0,#6]            ;139
000148  42a8              CMP      r0,r5                 ;139
00014a  dd02              BLE      |L1.338|
00014c  48a6              LDR      r0,|L1.1000|
00014e  f9b05006          LDRSH    r5,[r0,#6]            ;139
                  |L1.338|
000152  48a5              LDR      r0,|L1.1000|
000154  f9b0000a          LDRSH    r0,[r0,#0xa]          ;139
000158  42b8              CMP      r0,r7                 ;139
00015a  da02              BGE      |L1.354|
00015c  48a2              LDR      r0,|L1.1000|
00015e  f9b0700a          LDRSH    r7,[r0,#0xa]          ;139
                  |L1.354|
000162  42af              CMP      r7,r5                 ;140
000164  da00              BGE      |L1.360|
000166  e7ea              B        |L1.318|
                  |L1.360|
000168  463b              MOV      r3,r7                 ;143
00016a  4632              MOV      r2,r6                 ;143
00016c  4629              MOV      r1,r5                 ;143
00016e  4620              MOV      r0,r4                 ;143
000170  f7fffffe          BL       LCD_L0_FillRect
000174  bf00              NOP      
000176  e7e2              B        |L1.318|
;;;145    
                          ENDP

                  LCD_DrawBitmap PROC
;;;149    */
;;;150    void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000178  e92d4fff          PUSH     {r0-r11,lr}
;;;151                           int BitsPerPixel, int BytesPerLine,
;;;152                           const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;153    {
00017c  b08b              SUB      sp,sp,#0x2c
00017e  4605              MOV      r5,r0
000180  468a              MOV      r10,r1
000182  4690              MOV      r8,r2
000184  461f              MOV      r7,r3
000186  f8dd9068          LDR      r9,[sp,#0x68]
00018a  9e1c              LDR      r6,[sp,#0x70]
;;;154      U8  Data = 0;
00018c  2000              MOVS     r0,#0
00018e  900a              STR      r0,[sp,#0x28]
;;;155      int x1, y1;
;;;156      /* Handle rotation if necessary */
;;;157      #if GUI_SUPPORT_ROTATION
;;;158      if (GUI_pLCD_APIList) {
000190  4896              LDR      r0,|L1.1004|
000192  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
000194  b1a0              CBZ      r0,|L1.448|
;;;159        GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
000196  9b1d              LDR      r3,[sp,#0x74]
000198  991b              LDR      r1,[sp,#0x6c]
00019a  e9cd9102          STRD     r9,r1,[sp,#8]
00019e  e9cd6304          STRD     r6,r3,[sp,#0x10]
0001a2  e9dd2318          LDRD     r2,r3,[sp,#0x60]
0001a6  4891              LDR      r0,|L1.1004|
0001a8  e9cd2300          STRD     r2,r3,[sp,#0]
0001ac  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
0001ae  463b              MOV      r3,r7
0001b0  4642              MOV      r2,r8
0001b2  4651              MOV      r1,r10
0001b4  6804              LDR      r4,[r0,#0]
0001b6  4628              MOV      r0,r5
0001b8  47a0              BLX      r4
                  |L1.442|
;;;160        return;
;;;161      }
;;;162      #endif
;;;163      /* Handle the optional Y-magnification */
;;;164      y1 = y0 + ysize - 1;
;;;165      x1 = x0 + xsize - 1;
;;;166    /*  Handle BITMAP without magnification */
;;;167      if ((xMul | yMul) == 1) {
;;;168        int Diff;
;;;169        /*  Clip y0 (top) */
;;;170        Diff = GUI_Context.ClipRect.y0 - y0;
;;;171        if (Diff > 0) {
;;;172          ysize -= Diff;
;;;173          if (ysize <= 0) {
;;;174    		    return;
;;;175          }
;;;176          y0     = GUI_Context.ClipRect.y0;
;;;177          #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;178            pPixel += (U32)     Diff * (U32)     BytesPerLine;
;;;179          #else
;;;180            pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
;;;181          #endif
;;;182        }
;;;183        /*  Clip y1 (bottom) */
;;;184        Diff = y1 - GUI_Context.ClipRect.y1;
;;;185        if (Diff > 0) {
;;;186          ysize -= Diff;
;;;187          if (ysize <= 0) {
;;;188    		    return;
;;;189          }
;;;190        }
;;;191        /*        Clip right side    */
;;;192        Diff = x1 - GUI_Context.ClipRect.x1;
;;;193        if (Diff > 0) {
;;;194          xsize -= Diff;
;;;195        }
;;;196        /*        Clip left side ... (The difficult side ...)    */
;;;197        Diff = 0;
;;;198        if (x0 < GUI_Context.ClipRect.x0) {
;;;199          Diff = GUI_Context.ClipRect.x0 - x0;
;;;200    			xsize -= Diff;
;;;201    			switch (BitsPerPixel) {
;;;202    			case 1:
;;;203      			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
;;;204    				break;
;;;205    			case 2:
;;;206    	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
;;;207    				break;
;;;208    			case 4:
;;;209    				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
;;;210    				break;
;;;211    			case 8:
;;;212    				pPixel+= Diff;      x0 += Diff; Diff=0;
;;;213    				break;
;;;214    			case 16:
;;;215    				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
;;;216    				break;
;;;217    			}
;;;218        }
;;;219        if (xsize <=0) {
;;;220    		  return;
;;;221        }
;;;222        LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;223      } else {
;;;224        /**** Handle BITMAP with magnification ***/
;;;225        int x,y;
;;;226        int yi;
;;;227        int Shift = 8-BitsPerPixel;
;;;228        for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
;;;229          int yMax = y+yMul-1;
;;;230          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;231          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;232            int BitsLeft =0;
;;;233            int xi;
;;;234            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;235            for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
;;;236              U8  Index;
;;;237              if (!BitsLeft) {
;;;238                Data = *pDataLine++;
;;;239                BitsLeft =8;
;;;240              }
;;;241              Index = Data>>Shift;
;;;242              Data    <<= BitsPerPixel;
;;;243              BitsLeft -= BitsPerPixel;
;;;244              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
;;;245                LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
;;;246                if (pTrans) {
;;;247                  LCD_COLORINDEX = *(pTrans+Index);
;;;248                } else {
;;;249                  LCD_COLORINDEX = Index;
;;;250                }
;;;251                LCD_FillRect(x,y, x+xMul-1, yMax);
;;;252                LCD_COLORINDEX = OldColor;
;;;253              }
;;;254            }
;;;255          }
;;;256        }
;;;257      }
;;;258    }
0001ba  b00f              ADD      sp,sp,#0x3c
0001bc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.448|
0001c0  eb0a0007          ADD      r0,r10,r7             ;164
0001c4  1e40              SUBS     r0,r0,#1              ;164
0001c6  9008              STR      r0,[sp,#0x20]         ;164
0001c8  eb050008          ADD      r0,r5,r8              ;165
0001cc  1e40              SUBS     r0,r0,#1              ;165
0001ce  9009              STR      r0,[sp,#0x24]         ;165
0001d0  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;167
0001d4  4308              ORRS     r0,r0,r1              ;167
0001d6  2801              CMP      r0,#1                 ;167
0001d8  d177              BNE      |L1.714|
0001da  4883              LDR      r0,|L1.1000|
0001dc  f9b00006          LDRSH    r0,[r0,#6]            ;170
0001e0  eba0040a          SUB      r4,r0,r10             ;170
0001e4  2c00              CMP      r4,#0                 ;171
0001e6  dd09              BLE      |L1.508|
0001e8  1b3f              SUBS     r7,r7,r4              ;172
0001ea  2f00              CMP      r7,#0                 ;173
0001ec  dc00              BGT      |L1.496|
0001ee  e7e4              B        |L1.442|
                  |L1.496|
0001f0  487d              LDR      r0,|L1.1000|
0001f2  f9b0a006          LDRSH    r10,[r0,#6]           ;176
0001f6  981b              LDR      r0,[sp,#0x6c]         ;180
0001f8  fb046600          MLA      r6,r4,r0,r6           ;180
                  |L1.508|
0001fc  487a              LDR      r0,|L1.1000|
0001fe  f9b0100a          LDRSH    r1,[r0,#0xa]          ;184
000202  9808              LDR      r0,[sp,#0x20]         ;184
000204  1a44              SUBS     r4,r0,r1              ;184
000206  2c00              CMP      r4,#0                 ;185
000208  dd03              BLE      |L1.530|
00020a  1b3f              SUBS     r7,r7,r4              ;186
00020c  2f00              CMP      r7,#0                 ;187
00020e  dc00              BGT      |L1.530|
000210  e7d3              B        |L1.442|
                  |L1.530|
000212  4875              LDR      r0,|L1.1000|
000214  f9b01008          LDRSH    r1,[r0,#8]            ;192
000218  9809              LDR      r0,[sp,#0x24]         ;192
00021a  1a44              SUBS     r4,r0,r1              ;192
00021c  2c00              CMP      r4,#0                 ;193
00021e  dd01              BLE      |L1.548|
000220  eba80804          SUB      r8,r8,r4              ;194
                  |L1.548|
000224  2400              MOVS     r4,#0                 ;197
000226  4870              LDR      r0,|L1.1000|
000228  f9b00004          LDRSH    r0,[r0,#4]            ;198  ; GUI_Context
00022c  42a8              CMP      r0,r5                 ;198
00022e  dd39              BLE      |L1.676|
000230  486d              LDR      r0,|L1.1000|
000232  f9b00004          LDRSH    r0,[r0,#4]            ;199  ; GUI_Context
000236  1b44              SUBS     r4,r0,r5              ;199
000238  eba80804          SUB      r8,r8,r4              ;200
00023c  f1b90f04          CMP      r9,#4                 ;201
000240  d01e              BEQ      |L1.640|
000242  dc06              BGT      |L1.594|
000244  f1b90f01          CMP      r9,#1                 ;201
000248  d00a              BEQ      |L1.608|
00024a  f1b90f02          CMP      r9,#2                 ;201
00024e  d128              BNE      |L1.674|
000250  e00e              B        |L1.624|
                  |L1.594|
000252  f1b90f08          CMP      r9,#8                 ;201
000256  d01b              BEQ      |L1.656|
000258  f1b90f10          CMP      r9,#0x10              ;201
00025c  d121              BNE      |L1.674|
00025e  e01b              B        |L1.664|
                  |L1.608|
000260  eb0606e4          ADD      r6,r6,r4,ASR #3       ;203
000264  10e0              ASRS     r0,r4,#3              ;203
000266  eb0505c0          ADD      r5,r5,r0,LSL #3       ;203
00026a  f0040407          AND      r4,r4,#7              ;203
00026e  e018              B        |L1.674|
                  |L1.624|
000270  eb0606a4          ADD      r6,r6,r4,ASR #2       ;206
000274  10a0              ASRS     r0,r4,#2              ;206
000276  eb050580          ADD      r5,r5,r0,LSL #2       ;206
00027a  f0040403          AND      r4,r4,#3              ;206
00027e  e010              B        |L1.674|
                  |L1.640|
000280  eb060664          ADD      r6,r6,r4,ASR #1       ;209
000284  1060              ASRS     r0,r4,#1              ;209
000286  eb050540          ADD      r5,r5,r0,LSL #1       ;209
00028a  f0040401          AND      r4,r4,#1              ;209
00028e  e008              B        |L1.674|
                  |L1.656|
000290  4426              ADD      r6,r6,r4              ;212
000292  4425              ADD      r5,r5,r4              ;212
000294  2400              MOVS     r4,#0                 ;212
000296  e004              B        |L1.674|
                  |L1.664|
000298  eb060644          ADD      r6,r6,r4,LSL #1       ;215
00029c  4425              ADD      r5,r5,r4              ;215
00029e  2400              MOVS     r4,#0                 ;215
0002a0  bf00              NOP                            ;216
                  |L1.674|
0002a2  bf00              NOP                            ;204
                  |L1.676|
0002a4  f1b80f00          CMP      r8,#0                 ;219
0002a8  dc00              BGT      |L1.684|
0002aa  e786              B        |L1.442|
                  |L1.684|
0002ac  9b1d              LDR      r3,[sp,#0x74]         ;222
0002ae  981b              LDR      r0,[sp,#0x6c]         ;222
0002b0  e9cd9000          STRD     r9,r0,[sp,#0]         ;222
0002b4  e9cd6402          STRD     r6,r4,[sp,#8]         ;222
0002b8  9304              STR      r3,[sp,#0x10]         ;222
0002ba  463b              MOV      r3,r7                 ;222
0002bc  4642              MOV      r2,r8                 ;222
0002be  4651              MOV      r1,r10                ;222
0002c0  4628              MOV      r0,r5                 ;222
0002c2  f7fffffe          BL       LCD_L0_DrawBitmap
0002c6  e06d              B        |L1.932|
0002c8  e7ff              B        |L1.714|
                  |L1.714|
0002ca  f1c90008          RSB      r0,r9,#8              ;227
0002ce  9005              STR      r0,[sp,#0x14]         ;227
0002d0  4654              MOV      r4,r10                ;228
0002d2  2000              MOVS     r0,#0                 ;228
0002d4  9006              STR      r0,[sp,#0x18]         ;228
0002d6  e061              B        |L1.924|
                  |L1.728|
0002d8  9819              LDR      r0,[sp,#0x64]         ;229
0002da  4420              ADD      r0,r0,r4              ;229
0002dc  1e40              SUBS     r0,r0,#1              ;229
0002de  9004              STR      r0,[sp,#0x10]         ;229
0002e0  4841              LDR      r0,|L1.1000|
0002e2  f9b01006          LDRSH    r1,[r0,#6]            ;231
0002e6  9804              LDR      r0,[sp,#0x10]         ;231
0002e8  4281              CMP      r1,r0                 ;231
0002ea  dc50              BGT      |L1.910|
0002ec  483e              LDR      r0,|L1.1000|
0002ee  f9b0000a          LDRSH    r0,[r0,#0xa]          ;231
0002f2  42a0              CMP      r0,r4                 ;231
0002f4  db4b              BLT      |L1.910|
0002f6  2000              MOVS     r0,#0                 ;232
0002f8  9003              STR      r0,[sp,#0xc]          ;232
0002fa  9601              STR      r6,[sp,#4]            ;234
0002fc  9507              STR      r5,[sp,#0x1c]         ;235
0002fe  9002              STR      r0,[sp,#8]            ;235
000300  e041              B        |L1.902|
                  |L1.770|
000302  9803              LDR      r0,[sp,#0xc]          ;237
000304  b938              CBNZ     r0,|L1.790|
000306  9801              LDR      r0,[sp,#4]            ;238
000308  7800              LDRB     r0,[r0,#0]            ;238
00030a  900a              STR      r0,[sp,#0x28]         ;238
00030c  9801              LDR      r0,[sp,#4]            ;238
00030e  1c40              ADDS     r0,r0,#1              ;238
000310  9001              STR      r0,[sp,#4]            ;238
000312  2008              MOVS     r0,#8                 ;239
000314  9003              STR      r0,[sp,#0xc]          ;239
                  |L1.790|
000316  9905              LDR      r1,[sp,#0x14]         ;241
000318  980a              LDR      r0,[sp,#0x28]         ;241
00031a  4108              ASRS     r0,r0,r1              ;241
00031c  f0000bff          AND      r11,r0,#0xff          ;241
000320  980a              LDR      r0,[sp,#0x28]         ;242
000322  fa00f009          LSL      r0,r0,r9              ;242
000326  b2c0              UXTB     r0,r0                 ;242
000328  900a              STR      r0,[sp,#0x28]         ;242
00032a  9803              LDR      r0,[sp,#0xc]          ;243
00032c  eba00009          SUB      r0,r0,r9              ;243
000330  9003              STR      r0,[sp,#0xc]          ;243
000332  f1bb0f00          CMP      r11,#0                ;244
000336  d104              BNE      |L1.834|
000338  482b              LDR      r0,|L1.1000|
00033a  7b00              LDRB     r0,[r0,#0xc]          ;244  ; GUI_Context
00033c  f0100f02          TST      r0,#2                 ;244
000340  d11a              BNE      |L1.888|
                  |L1.834|
000342  4829              LDR      r0,|L1.1000|
000344  8840              LDRH     r0,[r0,#2]            ;245  ; GUI_Context
000346  9000              STR      r0,[sp,#0]            ;245
000348  981d              LDR      r0,[sp,#0x74]         ;246
00034a  b128              CBZ      r0,|L1.856|
00034c  981d              LDR      r0,[sp,#0x74]         ;247
00034e  f830001b          LDRH     r0,[r0,r11,LSL #1]    ;247
000352  4925              LDR      r1,|L1.1000|
000354  8048              STRH     r0,[r1,#2]            ;247
000356  e002              B        |L1.862|
                  |L1.856|
000358  4823              LDR      r0,|L1.1000|
00035a  f8a0b002          STRH     r11,[r0,#2]           ;249
                  |L1.862|
00035e  9918              LDR      r1,[sp,#0x60]         ;251
000360  9807              LDR      r0,[sp,#0x1c]         ;251
000362  4408              ADD      r0,r0,r1              ;251
000364  1e42              SUBS     r2,r0,#1              ;251
000366  4621              MOV      r1,r4                 ;251
000368  9b04              LDR      r3,[sp,#0x10]         ;251
00036a  9807              LDR      r0,[sp,#0x1c]         ;251
00036c  f7fffffe          BL       LCD_FillRect
000370  491d              LDR      r1,|L1.1000|
000372  9800              LDR      r0,[sp,#0]            ;252
000374  8048              STRH     r0,[r1,#2]            ;252
000376  bf00              NOP                            ;253
                  |L1.888|
000378  9802              LDR      r0,[sp,#8]            ;235
00037a  1c40              ADDS     r0,r0,#1              ;235
00037c  9002              STR      r0,[sp,#8]            ;235
00037e  9918              LDR      r1,[sp,#0x60]         ;235
000380  9807              LDR      r0,[sp,#0x1c]         ;235
000382  4408              ADD      r0,r0,r1              ;235
000384  9007              STR      r0,[sp,#0x1c]         ;235
                  |L1.902|
000386  9802              LDR      r0,[sp,#8]            ;235
000388  4540              CMP      r0,r8                 ;235
00038a  dbba              BLT      |L1.770|
00038c  bf00              NOP                            ;255
                  |L1.910|
00038e  9806              LDR      r0,[sp,#0x18]         ;228
000390  1c40              ADDS     r0,r0,#1              ;228
000392  9006              STR      r0,[sp,#0x18]         ;228
000394  9819              LDR      r0,[sp,#0x64]         ;228
000396  4404              ADD      r4,r4,r0              ;228
000398  981b              LDR      r0,[sp,#0x6c]         ;228
00039a  4406              ADD      r6,r6,r0              ;228
                  |L1.924|
00039c  9806              LDR      r0,[sp,#0x18]         ;228
00039e  42b8              CMP      r0,r7                 ;228
0003a0  db9a              BLT      |L1.728|
0003a2  bf00              NOP                            ;257
                  |L1.932|
0003a4  bf00              NOP      
0003a6  e708              B        |L1.442|
;;;259    
                          ENDP

                  LCD_SetClipRectMax PROC
;;;263    */
;;;264    void LCD_SetClipRectMax(void) {
0003a8  b510              PUSH     {r4,lr}
;;;265      LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
0003aa  480f              LDR      r0,|L1.1000|
0003ac  1d00              ADDS     r0,r0,#4
0003ae  f7fffffe          BL       LCD_L0_GetRect
;;;266    }
0003b2  bd10              POP      {r4,pc}
;;;267    
                          ENDP

                  LCD_Init PROC
;;;271    */
;;;272    int LCD_Init(void) {
0003b4  b510              PUSH     {r4,lr}
;;;273      int r = 0;
0003b6  2400              MOVS     r4,#0
;;;274      GUI_DEBUG_LOG("\nLCD_Init...");
;;;275      LCD_SetClipRectMax();
0003b8  f7fffffe          BL       LCD_SetClipRectMax
;;;276      r |= LCD_L0_Init();
0003bc  f7fffffe          BL       LCD_L0_Init
0003c0  4304              ORRS     r4,r4,r0
;;;277      #if GUI_NUM_LAYERS > 1
;;;278        r |= LCD_L0_1_Init();
;;;279      #endif
;;;280      #if GUI_NUM_LAYERS > 2
;;;281        r |= LCD_L0_2_Init();
;;;282      #endif
;;;283      #if GUI_NUM_LAYERS > 3
;;;284        r |= LCD_L0_3_Init();
;;;285      #endif
;;;286      #if GUI_NUM_LAYERS > 4
;;;287        r |= LCD_L0_4_Init();
;;;288      #endif
;;;289      LCD_InitLUT();
0003c2  f7fffffe          BL       LCD_InitLUT
;;;290      {
;;;291      #if GUI_NUM_LAYERS > 1
;;;292        int i;
;;;293        for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
;;;294          GUI_SelectLayer(i);
;;;295      #else
;;;296        {
;;;297      #endif
;;;298          #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
;;;299            /* Clear video memory */
;;;300            LCD_SetDrawMode(GUI_DRAWMODE_REV);
0003c6  2004              MOVS     r0,#4
0003c8  f7fffffe          BL       LCD_SetDrawMode
;;;301            LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
0003cc  f64073ff          MOV      r3,#0xfff
0003d0  461a              MOV      r2,r3
0003d2  2100              MOVS     r1,#0
0003d4  4608              MOV      r0,r1
0003d6  f7fffffe          BL       LCD_FillRect
;;;302            LCD_SetDrawMode(0);
0003da  2000              MOVS     r0,#0
0003dc  f7fffffe          BL       LCD_SetDrawMode
;;;303          #endif
;;;304        }
;;;305      }
;;;306      /* Switch LCD on */
;;;307      LCD_On();
0003e0  f7fffffe          BL       LCD_L0_On
;;;308      return r;
0003e4  4620              MOV      r0,r4
;;;309    }
0003e6  bd10              POP      {r4,pc}
                  |L1.1000|
                          DCD      GUI_Context
                  |L1.1004|
                          DCD      GUI_pLCD_APIList
                          ENDP

                  LCD_Color2Index PROC
;;;314    */
;;;315    int LCD_Color2Index(LCD_COLOR Color) {
0003f0  b510              PUSH     {r4,lr}
0003f2  4604              MOV      r4,r0
;;;316      return LCDDEV_L0_Color2Index(Color);
0003f4  4620              MOV      r0,r4
0003f6  f7fffffe          BL       LCD_L0_Color2Index
;;;317    }
0003fa  bd10              POP      {r4,pc}
;;;318    
                          ENDP

                  LCD_Index2Color PROC
;;;322    */
;;;323    LCD_COLOR LCD_Index2Color(int Index) {
0003fc  b510              PUSH     {r4,lr}
0003fe  4604              MOV      r4,r0
;;;324      return LCDDEV_L0_Index2Color(Index);
000400  4620              MOV      r0,r4
000402  f7fffffe          BL       LCD_L0_Index2Color
;;;325    }
000406  bd10              POP      {r4,pc}
;;;326    
                          ENDP

                  LCD_SetBkColor PROC
;;;330    */
;;;331    void LCD_SetBkColor(GUI_COLOR color) {
000408  b570              PUSH     {r4-r6,lr}
00040a  4604              MOV      r4,r0
;;;332      if (GUI_Context.BkColor != color) {
00040c  480d              LDR      r0,|L1.1092|
00040e  6b40              LDR      r0,[r0,#0x34]  ; GUI_Context
000410  42a0              CMP      r0,r4
000412  d007              BEQ      |L1.1060|
;;;333        GUI_Context.BkColor = color;
000414  480b              LDR      r0,|L1.1092|
000416  6344              STR      r4,[r0,#0x34]  ; GUI_Context
;;;334        LCD_SetBkColorIndex(LCD_Color2Index(color));
000418  4620              MOV      r0,r4
00041a  f7fffffe          BL       LCD_Color2Index
00041e  4605              MOV      r5,r0
000420  f7fffffe          BL       LCD_SetBkColorIndex
                  |L1.1060|
;;;335      }
;;;336    }
000424  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

                  LCD_SetColor PROC
;;;341    */
;;;342    void LCD_SetColor(GUI_COLOR color) {
000426  b570              PUSH     {r4-r6,lr}
000428  4604              MOV      r4,r0
;;;343      if (GUI_Context.Color != color) {
00042a  4806              LDR      r0,|L1.1092|
00042c  6b00              LDR      r0,[r0,#0x30]  ; GUI_Context
00042e  42a0              CMP      r0,r4
000430  d007              BEQ      |L1.1090|
;;;344        GUI_Context.Color = color;
000432  4804              LDR      r0,|L1.1092|
000434  6304              STR      r4,[r0,#0x30]  ; GUI_Context
;;;345        LCD_SetColorIndex(LCD_Color2Index(color));
000436  4620              MOV      r0,r4
000438  f7fffffe          BL       LCD_Color2Index
00043c  4605              MOV      r5,r0
00043e  f7fffffe          BL       LCD_SetColorIndex
                  |L1.1090|
;;;346      }
;;;347    }
000442  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

                  |L1.1092|
                          DCD      GUI_Context
