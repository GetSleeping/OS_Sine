; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\gui_bmp.o --depend=.\Obj\gui_bmp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\gui_bmp.crf ..\Ucgui\GUI\Core\GUI_BMP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetStep PROC
;;;33     */
;;;34     static int _GetStep(int * pYSize, int * pY) {
000000  4602              MOV      r2,r0
;;;35       if (*pYSize > 0) {
000002  6810              LDR      r0,[r2,#0]
000004  2800              CMP      r0,#0
000006  dd05              BLE      |L1.20|
;;;36         *pY = *pYSize - 1;
000008  6810              LDR      r0,[r2,#0]
00000a  1e40              SUBS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]
;;;37         return -1;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.18|
;;;38       } else if (*pYSize < 0) {
;;;39         *pYSize = -*pYSize;
;;;40         *pY = 0;
;;;41         return 1;
;;;42       } else {
;;;43         return 0;
;;;44       }
;;;45     }
000012  4770              BX       lr
                  |L1.20|
000014  6810              LDR      r0,[r2,#0]            ;38
000016  2800              CMP      r0,#0                 ;38
000018  da06              BGE      |L1.40|
00001a  6810              LDR      r0,[r2,#0]            ;39
00001c  4240              RSBS     r0,r0,#0              ;39
00001e  6010              STR      r0,[r2,#0]            ;39
000020  2000              MOVS     r0,#0                 ;40
000022  6008              STR      r0,[r1,#0]            ;40
000024  2001              MOVS     r0,#1                 ;41
000026  e7f4              B        |L1.18|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;43
00002a  e7f2              B        |L1.18|
;;;46     
                          ENDP

                  _DrawBitmap_Pal PROC
;;;50     */
;;;51     static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
00002c  e92d4fff          PUSH     {r0-r11,lr}
000030  b089              SUB      sp,sp,#0x24
000032  4604              MOV      r4,r0
000034  460f              MOV      r7,r1
000036  4690              MOV      r8,r2
000038  461d              MOV      r5,r3
00003a  f8dd905c          LDR      r9,[sp,#0x5c]
;;;52       int i, y, Step;
;;;53       int BytesPerLine = 0;
00003e  2000              MOVS     r0,#0
000040  9007              STR      r0,[sp,#0x1c]
;;;54       Step = _GetStep(&YSize, &y);
000042  a908              ADD      r1,sp,#0x20
000044  a816              ADD      r0,sp,#0x58
000046  f7fffffe          BL       _GetStep
00004a  4682              MOV      r10,r0
;;;55       if (!Step) {
00004c  f1ba0f00          CMP      r10,#0
000050  d103              BNE      |L1.90|
;;;56         return 1;
000052  2001              MOVS     r0,#1
                  |L1.84|
;;;57       }
;;;58       for (i = 0; i < NumColors; i++) {
;;;59         U8 r, g, b;
;;;60         b = *(pData);
;;;61         g = *(pData + 1);
;;;62         r = *(pData + 2);
;;;63         pData += 4;
;;;64         LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
;;;65       }
;;;66       switch (Bpp) {
;;;67         case 1:
;;;68           BytesPerLine = ((XSize + 31) >> 5) << 2;
;;;69           break;
;;;70         case 4:
;;;71           BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
;;;72           break;
;;;73         case 8:
;;;74           BytesPerLine = ((XSize +  3) >> 2) << 2;
;;;75           break;
;;;76       }
;;;77       for (; (y < YSize) && (y >= 0); y += Step) {
;;;78         LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
;;;79         pData += BytesPerLine;
;;;80       }
;;;81       return 0;
;;;82     }
000054  b00d              ADD      sp,sp,#0x34
000056  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.90|
00005a  2600              MOVS     r6,#0                 ;58
00005c  e013              B        |L1.134|
                  |L1.94|
00005e  7820              LDRB     r0,[r4,#0]            ;60
000060  9005              STR      r0,[sp,#0x14]         ;60
000062  f894b001          LDRB     r11,[r4,#1]           ;61
000066  78a0              LDRB     r0,[r4,#2]            ;62
000068  9006              STR      r0,[sp,#0x18]         ;62
00006a  1d24              ADDS     r4,r4,#4              ;63
00006c  9905              LDR      r1,[sp,#0x14]         ;64
00006e  0409              LSLS     r1,r1,#16             ;64
000070  ea41210b          ORR      r1,r1,r11,LSL #8      ;64
000074  9a06              LDR      r2,[sp,#0x18]         ;64
000076  ea410002          ORR      r0,r1,r2              ;64
00007a  f7fffffe          BL       LCD_Color2Index
00007e  49ae              LDR      r1,|L1.824|
000080  f8210016          STRH     r0,[r1,r6,LSL #1]     ;64
000084  1c76              ADDS     r6,r6,#1              ;58
                  |L1.134|
000086  9818              LDR      r0,[sp,#0x60]         ;58
000088  4286              CMP      r6,r0                 ;58
00008a  dbe8              BLT      |L1.94|
00008c  f1b90f01          CMP      r9,#1                 ;66
000090  d006              BEQ      |L1.160|
000092  f1b90f04          CMP      r9,#4                 ;66
000096  d009              BEQ      |L1.172|
000098  f1b90f08          CMP      r9,#8                 ;66
00009c  d112              BNE      |L1.196|
00009e  e00c              B        |L1.186|
                  |L1.160|
0000a0  f105001f          ADD      r0,r5,#0x1f           ;68
0000a4  1140              ASRS     r0,r0,#5              ;68
0000a6  0080              LSLS     r0,r0,#2              ;68
0000a8  9007              STR      r0,[sp,#0x1c]         ;68
0000aa  e00b              B        |L1.196|
                  |L1.172|
0000ac  201f              MOVS     r0,#0x1f              ;71
0000ae  eb000085          ADD      r0,r0,r5,LSL #2       ;71
0000b2  1140              ASRS     r0,r0,#5              ;71
0000b4  0080              LSLS     r0,r0,#2              ;71
0000b6  9007              STR      r0,[sp,#0x1c]         ;71
0000b8  e004              B        |L1.196|
                  |L1.186|
0000ba  1ce8              ADDS     r0,r5,#3              ;74
0000bc  1080              ASRS     r0,r0,#2              ;74
0000be  0080              LSLS     r0,r0,#2              ;74
0000c0  9007              STR      r0,[sp,#0x1c]         ;74
0000c2  bf00              NOP                            ;75
                  |L1.196|
0000c4  bf00              NOP                            ;69
0000c6  e013              B        |L1.240|
                  |L1.200|
0000c8  4b9b              LDR      r3,|L1.824|
0000ca  e9cd9502          STRD     r9,r5,[sp,#8]         ;78
0000ce  e9cd4304          STRD     r4,r3,[sp,#0x10]      ;78
0000d2  2301              MOVS     r3,#1                 ;78
0000d4  9300              STR      r3,[sp,#0]            ;78
0000d6  9301              STR      r3,[sp,#4]            ;78
0000d8  9808              LDR      r0,[sp,#0x20]         ;78
0000da  eb080100          ADD      r1,r8,r0              ;78
0000de  462a              MOV      r2,r5                 ;78
0000e0  4638              MOV      r0,r7                 ;78
0000e2  f7fffffe          BL       LCD_DrawBitmap
0000e6  9807              LDR      r0,[sp,#0x1c]         ;79
0000e8  4404              ADD      r4,r4,r0              ;79
0000ea  9808              LDR      r0,[sp,#0x20]         ;77
0000ec  4450              ADD      r0,r0,r10             ;77
0000ee  9008              STR      r0,[sp,#0x20]         ;77
                  |L1.240|
0000f0  9916              LDR      r1,[sp,#0x58]         ;77
0000f2  9808              LDR      r0,[sp,#0x20]         ;77
0000f4  4288              CMP      r0,r1                 ;77
0000f6  da02              BGE      |L1.254|
0000f8  9808              LDR      r0,[sp,#0x20]         ;77
0000fa  2800              CMP      r0,#0                 ;77
0000fc  dae4              BGE      |L1.200|
                  |L1.254|
0000fe  2000              MOVS     r0,#0                 ;81
000100  e7a8              B        |L1.84|
;;;83     
                          ENDP

                  _DrawBitmap_24bpp PROC
;;;87     */
;;;88     static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
000102  e92d4fff          PUSH     {r0-r11,lr}
000106  b085              SUB      sp,sp,#0x14
000108  4605              MOV      r5,r0
00010a  4688              MOV      r8,r1
00010c  4691              MOV      r9,r2
00010e  461e              MOV      r6,r3
;;;89       int x, y, BytesPerLine, Step;
;;;90       Step = _GetStep(&YSize, &y);
000110  a904              ADD      r1,sp,#0x10
000112  a812              ADD      r0,sp,#0x48
000114  f7fffffe          BL       _GetStep
000118  4683              MOV      r11,r0
;;;91       if (!Step) {
00011a  f1bb0f00          CMP      r11,#0
00011e  d103              BNE      |L1.296|
;;;92         return 1;
000120  2001              MOVS     r0,#1
                  |L1.290|
;;;93       }
;;;94       BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
;;;95       for (; (y < YSize) && (y >= 0); y += Step) {
;;;96         for (x = 0; x < XSize; x++) {
;;;97           const U8 * pColor = pData + 3 * x;
;;;98           U8 r, g, b;
;;;99           b = *(pColor);
;;;100          g = *(pColor + 1);
;;;101          r = *(pColor + 2);
;;;102          LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
;;;103        }
;;;104        pData += BytesPerLine;
;;;105      }
;;;106      return 0;
;;;107    }
000122  b009              ADD      sp,sp,#0x24
000124  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.296|
000128  eb060046          ADD      r0,r6,r6,LSL #1       ;94
00012c  00c0              LSLS     r0,r0,#3              ;94
00012e  301f              ADDS     r0,r0,#0x1f           ;94
000130  1140              ASRS     r0,r0,#5              ;94
000132  ea4f0a80          LSL      r10,r0,#2             ;94
000136  e024              B        |L1.386|
                  |L1.312|
000138  2400              MOVS     r4,#0                 ;96
00013a  e01c              B        |L1.374|
                  |L1.316|
00013c  2003              MOVS     r0,#3                 ;97
00013e  fb005704          MLA      r7,r0,r4,r5           ;97
000142  7838              LDRB     r0,[r7,#0]            ;99
000144  9001              STR      r0,[sp,#4]            ;99
000146  7878              LDRB     r0,[r7,#1]            ;100
000148  9002              STR      r0,[sp,#8]            ;100
00014a  78b8              LDRB     r0,[r7,#2]            ;101
00014c  9003              STR      r0,[sp,#0xc]          ;101
00014e  9901              LDR      r1,[sp,#4]            ;102
000150  040a              LSLS     r2,r1,#16             ;102
000152  9902              LDR      r1,[sp,#8]            ;102
000154  ea422101          ORR      r1,r2,r1,LSL #8       ;102
000158  9a03              LDR      r2,[sp,#0xc]          ;102
00015a  ea410002          ORR      r0,r1,r2              ;102
00015e  f7fffffe          BL       LCD_Color2Index
000162  9000              STR      r0,[sp,#0]            ;102
000164  9a04              LDR      r2,[sp,#0x10]         ;102
000166  eb090102          ADD      r1,r9,r2              ;102
00016a  eb080004          ADD      r0,r8,r4              ;102
00016e  9a00              LDR      r2,[sp,#0]            ;102
000170  f7fffffe          BL       LCD_SetPixelIndex
000174  1c64              ADDS     r4,r4,#1              ;96
                  |L1.374|
000176  42b4              CMP      r4,r6                 ;96
000178  dbe0              BLT      |L1.316|
00017a  4455              ADD      r5,r5,r10             ;104
00017c  9804              LDR      r0,[sp,#0x10]         ;95
00017e  4458              ADD      r0,r0,r11             ;95
000180  9004              STR      r0,[sp,#0x10]         ;95
                  |L1.386|
000182  9912              LDR      r1,[sp,#0x48]         ;95
000184  9804              LDR      r0,[sp,#0x10]         ;95
000186  4288              CMP      r0,r1                 ;95
000188  da02              BGE      |L1.400|
00018a  9804              LDR      r0,[sp,#0x10]         ;95
00018c  2800              CMP      r0,#0                 ;95
00018e  dad3              BGE      |L1.312|
                  |L1.400|
000190  2000              MOVS     r0,#0                 ;106
000192  e7c6              B        |L1.290|
;;;108    
                          ENDP

                  GUI_BMP_GetXSize PROC
;;;118    */
;;;119    int GUI_BMP_GetXSize(const void * pBMP) {
000194  b538              PUSH     {r3-r5,lr}
000196  4604              MOV      r4,r0
;;;120      const U8 * pSrc = (const U8 *)pBMP;
000198  9400              STR      r4,[sp,#0]
;;;121      if (!pBMP) {
00019a  b90c              CBNZ     r4,|L1.416|
;;;122        return 0;
00019c  2000              MOVS     r0,#0
                  |L1.414|
;;;123      }
;;;124      pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
;;;125      return GUI__Read32(&pSrc);
;;;126    }
00019e  bd38              POP      {r3-r5,pc}
                  |L1.416|
0001a0  9800              LDR      r0,[sp,#0]            ;124
0001a2  3012              ADDS     r0,r0,#0x12           ;124
0001a4  9000              STR      r0,[sp,#0]            ;124
0001a6  4668              MOV      r0,sp                 ;125
0001a8  f7fffffe          BL       GUI__Read32
0001ac  e7f7              B        |L1.414|
;;;127    
                          ENDP

                  GUI_BMP_GetYSize PROC
;;;131    */
;;;132    int GUI_BMP_GetYSize(const void * pBMP) {
0001ae  b538              PUSH     {r3-r5,lr}
0001b0  4604              MOV      r4,r0
;;;133      const U8 * pSrc = (const U8 *)pBMP;
0001b2  9400              STR      r4,[sp,#0]
;;;134      if (!pBMP) {
0001b4  b90c              CBNZ     r4,|L1.442|
;;;135        return 0;
0001b6  2000              MOVS     r0,#0
                  |L1.440|
;;;136      }
;;;137      pSrc += 22;
;;;138      return labs((int)GUI__Read32(&pSrc));
;;;139    }
0001b8  bd38              POP      {r3-r5,pc}
                  |L1.442|
0001ba  9800              LDR      r0,[sp,#0]            ;137
0001bc  3016              ADDS     r0,r0,#0x16           ;137
0001be  9000              STR      r0,[sp,#0]            ;137
0001c0  4668              MOV      r0,sp                 ;138
0001c2  f7fffffe          BL       GUI__Read32
0001c6  1e05              SUBS     r5,r0,#0              ;138
0001c8  db01              BLT      |L1.462|
0001ca  4628              MOV      r0,r5                 ;138
0001cc  e7f4              B        |L1.440|
                  |L1.462|
0001ce  4268              RSBS     r0,r5,#0              ;138
0001d0  e7f2              B        |L1.440|
;;;140    
                          ENDP

                  GUI_BMP_Draw PROC
;;;144    */
;;;145    int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
0001d2  e92d4ff0          PUSH     {r4-r11,lr}
0001d6  b089              SUB      sp,sp,#0x24
0001d8  4682              MOV      r10,r0
0001da  460e              MOV      r6,r1
0001dc  4617              MOV      r7,r2
;;;146      #if (GUI_WINSUPPORT)
;;;147        GUI_RECT r;
;;;148      #endif
;;;149      int Ret = 0;
0001de  2000              MOVS     r0,#0
0001e0  9006              STR      r0,[sp,#0x18]
;;;150      I32 Width, Height;
;;;151      U16 BitCount, Type;
;;;152      U32 ClrUsed, Compression;
;;;153      int NumColors;
;;;154      const U8 * pSrc = (const U8 *)pBMP;
0001e2  f8cda00c          STR      r10,[sp,#0xc]
;;;155      Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
0001e6  a803              ADD      r0,sp,#0xc
0001e8  f7fffffe          BL       GUI__Read16
0001ec  9005              STR      r0,[sp,#0x14]
;;;156      pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
0001ee  9803              LDR      r0,[sp,#0xc]
0001f0  300c              ADDS     r0,r0,#0xc
0001f2  9003              STR      r0,[sp,#0xc]
;;;157      /* get values from BITMAPINFOHEADER */
;;;158      pSrc += 4;
0001f4  9803              LDR      r0,[sp,#0xc]
0001f6  1d00              ADDS     r0,r0,#4
0001f8  9003              STR      r0,[sp,#0xc]
;;;159      Width       = GUI__Read32(&pSrc);
0001fa  a803              ADD      r0,sp,#0xc
0001fc  f7fffffe          BL       GUI__Read32
000200  4680              MOV      r8,r0
;;;160      Height      = GUI__Read32(&pSrc);
000202  a803              ADD      r0,sp,#0xc
000204  f7fffffe          BL       GUI__Read32
000208  4605              MOV      r5,r0
;;;161      pSrc += 2;
00020a  9803              LDR      r0,[sp,#0xc]
00020c  1c80              ADDS     r0,r0,#2
00020e  9003              STR      r0,[sp,#0xc]
;;;162      BitCount    = GUI__Read16(&pSrc);
000210  a803              ADD      r0,sp,#0xc
000212  f7fffffe          BL       GUI__Read16
000216  4681              MOV      r9,r0
;;;163      Compression = GUI__Read32(&pSrc);
000218  a803              ADD      r0,sp,#0xc
00021a  f7fffffe          BL       GUI__Read32
00021e  9004              STR      r0,[sp,#0x10]
;;;164      pSrc += 12;
000220  9803              LDR      r0,[sp,#0xc]
000222  300c              ADDS     r0,r0,#0xc
000224  9003              STR      r0,[sp,#0xc]
;;;165      ClrUsed     = GUI__Read32(&pSrc);
000226  a803              ADD      r0,sp,#0xc
000228  f7fffffe          BL       GUI__Read32
00022c  4683              MOV      r11,r0
;;;166      pSrc += 4;
00022e  9803              LDR      r0,[sp,#0xc]
000230  1d00              ADDS     r0,r0,#4
000232  9003              STR      r0,[sp,#0xc]
;;;167      /* calculate number of colors */
;;;168      switch (BitCount) {
000234  f1b90f04          CMP      r9,#4
000238  d014              BEQ      |L1.612|
00023a  dc06              BGT      |L1.586|
00023c  f1b90f00          CMP      r9,#0
000240  d00a              BEQ      |L1.600|
000242  f1b90f01          CMP      r9,#1
000246  d114              BNE      |L1.626|
000248  e00a              B        |L1.608|
                  |L1.586|
00024a  f1b90f08          CMP      r9,#8
00024e  d00b              BEQ      |L1.616|
000250  f1b90f18          CMP      r9,#0x18
000254  d10d              BNE      |L1.626|
000256  e00a              B        |L1.622|
                  |L1.600|
;;;169        case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
000258  2001              MOVS     r0,#1
                  |L1.602|
;;;170        case 1:   NumColors = 2;   break;
;;;171        case 4:   NumColors = 16;  break;
;;;172        case 8:   NumColors = 256; break;
;;;173        case 24:  NumColors = 0;   break;
;;;174        default:
;;;175          return 1; /* biBitCount should be 1, 4, 8 or 24 */
;;;176      }
;;;177      if (NumColors && ClrUsed) {
;;;178        NumColors = ClrUsed;
;;;179      }
;;;180      /* check validity of bmp */
;;;181      if ((NumColors > LCD_MAX_LOG_COLORS) ||
;;;182          (Type != 0x4d42)                 || /* 'BM' */
;;;183          (Compression)                    || /* only uncompressed bitmaps */
;;;184          (Width  > 1024)                  ||
;;;185          (Height > 1024)) {
;;;186        return 1;
;;;187      }
;;;188      /* start output */
;;;189      GUI_LOCK();
;;;190      #if (GUI_WINSUPPORT)
;;;191        WM_ADDORG(x0,y0);
;;;192        r.x1 = (r.x0 = x0) + Width - 1;
;;;193        r.y1 = (r.y0 = y0) + Height - 1;
;;;194        WM_ITERATE_START(&r) {
;;;195      #endif
;;;196      /* Show bitmap */
;;;197      switch (BitCount) {
;;;198        case 1:
;;;199        case 4:
;;;200        case 8:
;;;201          Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
;;;202          break;
;;;203        case 24:
;;;204          Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
;;;205          break;
;;;206      }
;;;207      #if (GUI_WINSUPPORT)
;;;208        } WM_ITERATE_END();
;;;209      #endif
;;;210      GUI_UNLOCK();
;;;211      return Ret;
;;;212    }
00025a  b009              ADD      sp,sp,#0x24
00025c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.608|
000260  2402              MOVS     r4,#2                 ;170
000262  e008              B        |L1.630|
                  |L1.612|
000264  2410              MOVS     r4,#0x10              ;171
000266  e006              B        |L1.630|
                  |L1.616|
000268  f44f7480          MOV      r4,#0x100             ;172
00026c  e003              B        |L1.630|
                  |L1.622|
00026e  2400              MOVS     r4,#0                 ;173
000270  e001              B        |L1.630|
                  |L1.626|
000272  2001              MOVS     r0,#1                 ;175
000274  e7f1              B        |L1.602|
                  |L1.630|
000276  bf00              NOP                            ;170
000278  b11c              CBZ      r4,|L1.642|
00027a  f1bb0f00          CMP      r11,#0                ;177
00027e  d000              BEQ      |L1.642|
000280  465c              MOV      r4,r11                ;178
                  |L1.642|
000282  f5b47f80          CMP      r4,#0x100             ;181
000286  dc0c              BGT      |L1.674|
000288  9805              LDR      r0,[sp,#0x14]         ;182
00028a  f5a0419a          SUB      r1,r0,#0x4d00         ;182
00028e  3942              SUBS     r1,r1,#0x42           ;182
000290  d107              BNE      |L1.674|
000292  9804              LDR      r0,[sp,#0x10]         ;183
000294  b928              CBNZ     r0,|L1.674|
000296  f5b86f80          CMP      r8,#0x400             ;184
00029a  dc02              BGT      |L1.674|
00029c  f5b56f80          CMP      r5,#0x400             ;185
0002a0  dd01              BLE      |L1.678|
                  |L1.674|
0002a2  2001              MOVS     r0,#1                 ;186
0002a4  e7d9              B        |L1.602|
                  |L1.678|
0002a6  f7fffffe          BL       GUI_Lock
0002aa  4824              LDR      r0,|L1.828|
0002ac  6c00              LDR      r0,[r0,#0x40]         ;191  ; GUI_Context
0002ae  4406              ADD      r6,r6,r0              ;191
0002b0  4822              LDR      r0,|L1.828|
0002b2  6c40              LDR      r0,[r0,#0x44]         ;191  ; GUI_Context
0002b4  4407              ADD      r7,r7,r0              ;191
0002b6  b230              SXTH     r0,r6                 ;192
0002b8  f8ad001c          STRH     r0,[sp,#0x1c]         ;192
0002bc  4440              ADD      r0,r0,r8              ;192
0002be  1e40              SUBS     r0,r0,#1              ;192
0002c0  b200              SXTH     r0,r0                 ;192
0002c2  f8ad0020          STRH     r0,[sp,#0x20]         ;192
0002c6  b238              SXTH     r0,r7                 ;193
0002c8  f8ad001e          STRH     r0,[sp,#0x1e]         ;193
0002cc  4428              ADD      r0,r0,r5              ;193
0002ce  1e40              SUBS     r0,r0,#1              ;193
0002d0  b200              SXTH     r0,r0                 ;193
0002d2  f8ad0022          STRH     r0,[sp,#0x22]         ;193
0002d6  a807              ADD      r0,sp,#0x1c           ;194
0002d8  f7fffffe          BL       WM__InitIVRSearch
0002dc  b340              CBZ      r0,|L1.816|
0002de  bf00              NOP                            ;194
                  |L1.736|
0002e0  f1b90f01          CMP      r9,#1                 ;197
0002e4  d009              BEQ      |L1.762|
0002e6  f1b90f04          CMP      r9,#4                 ;197
0002ea  d007              BEQ      |L1.764|
0002ec  f1b90f08          CMP      r9,#8                 ;197
0002f0  d005              BEQ      |L1.766|
0002f2  f1b90f18          CMP      r9,#0x18              ;197
0002f6  d116              BNE      |L1.806|
0002f8  e00c              B        |L1.788|
                  |L1.762|
0002fa  bf00              NOP                            ;199
                  |L1.764|
0002fc  bf00              NOP                            ;200
                  |L1.766|
0002fe  4643              MOV      r3,r8                 ;201
000300  463a              MOV      r2,r7                 ;201
000302  4631              MOV      r1,r6                 ;201
000304  e9cd5900          STRD     r5,r9,[sp,#0]         ;201
000308  9402              STR      r4,[sp,#8]            ;201
00030a  9803              LDR      r0,[sp,#0xc]          ;201
00030c  f7fffffe          BL       _DrawBitmap_Pal
000310  9006              STR      r0,[sp,#0x18]         ;201
000312  e008              B        |L1.806|
                  |L1.788|
000314  4643              MOV      r3,r8                 ;204
000316  463a              MOV      r2,r7                 ;204
000318  4631              MOV      r1,r6                 ;204
00031a  9500              STR      r5,[sp,#0]            ;204
00031c  9803              LDR      r0,[sp,#0xc]          ;204
00031e  f7fffffe          BL       _DrawBitmap_24bpp
000322  9006              STR      r0,[sp,#0x18]         ;204
000324  bf00              NOP                            ;205
                  |L1.806|
000326  bf00              NOP                            ;202
000328  f7fffffe          BL       WM__GetNextIVR
00032c  2800              CMP      r0,#0                 ;208
00032e  d1d7              BNE      |L1.736|
                  |L1.816|
000330  f7fffffe          BL       GUI_Unlock
000334  9806              LDR      r0,[sp,#0x18]         ;211
000336  e790              B        |L1.602|
;;;213    
                          ENDP

                  |L1.824|
                          DCD      LCD__aConvTable
                  |L1.828|
                          DCD      GUI_Context
