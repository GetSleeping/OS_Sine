; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\listbox_insertstring.o --depend=.\Obj\listbox_insertstring.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\listbox_insertstring.crf ..\Ucgui\GUI\Widget\LISTBOX_InsertString.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LISTBOX_InsertString PROC
;;;36     */
;;;37     void LISTBOX_InsertString(LISTBOX_Handle hObj, const char* s, unsigned int Index) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;38       if (hObj && s) {
00000a  b3a6              CBZ      r6,|L1.118|
00000c  b39c              CBZ      r4,|L1.118|
;;;39         LISTBOX_Obj* pObj;
;;;40         unsigned int NumItems;
;;;41         WM_LOCK();
00000e  f7fffffe          BL       GUI_Lock
;;;42         pObj = LISTBOX_H2P(hObj);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4607              MOV      r7,r0
;;;43         NumItems = LISTBOX__GetNumItems(pObj);
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       LISTBOX__GetNumItems
000020  4682              MOV      r10,r0
;;;44         if (Index < NumItems) {
000022  4555              CMP      r5,r10
000024  d220              BCS      |L1.104|
;;;45           WM_HMEM hItem;
;;;46           hItem = GUI_ARRAY_InsertItem(&pObj->ItemArray, Index, sizeof(LISTBOX_ITEM) + strlen(s));
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       strlen
00002c  f1000906          ADD      r9,r0,#6
000030  464a              MOV      r2,r9
000032  4629              MOV      r1,r5
000034  f1070028          ADD      r0,r7,#0x28
000038  f7fffffe          BL       GUI_ARRAY_InsertItem
00003c  4680              MOV      r8,r0
;;;47           if (hItem) {
00003e  f1b80f00          CMP      r8,#0
000042  d010              BEQ      |L1.102|
;;;48             LISTBOX_ITEM* pItem = (LISTBOX_ITEM*)GUI_ALLOC_h2p(hItem);
000044  4640              MOV      r0,r8
000046  f7fffffe          BL       GUI_ALLOC_h2p
00004a  4681              MOV      r9,r0
;;;49             pItem->Status = 0;
00004c  2000              MOVS     r0,#0
00004e  f8890004          STRB     r0,[r9,#4]
;;;50             strcpy(pItem->acText, s);
000052  4621              MOV      r1,r4
000054  f1090005          ADD      r0,r9,#5
000058  f7fffffe          BL       strcpy
;;;51             LISTBOX_InvalidateItem(hObj, Index);
00005c  4629              MOV      r1,r5
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       LISTBOX_InvalidateItem
;;;52           }
000064  bf00              NOP      
                  |L1.102|
;;;53         } else {
000066  e003              B        |L1.112|
                  |L1.104|
;;;54           LISTBOX_AddString(hObj, s);
000068  4621              MOV      r1,r4
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       LISTBOX_AddString
                  |L1.112|
;;;55         }
;;;56         WM_UNLOCK();
000070  f7fffffe          BL       GUI_Unlock
;;;57       }
000074  bf00              NOP      
                  |L1.118|
;;;58     }
000076  e8bd87f0          POP      {r4-r10,pc}
;;;59     
                          ENDP

