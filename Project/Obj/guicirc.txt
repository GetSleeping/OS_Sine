; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\guicirc.o --depend=.\Obj\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\guicirc.crf ..\Ucgui\GUI\Core\GUICirc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
00000c  1931              ADDS     r1,r6,r4
00000e  19e8              ADDS     r0,r5,r7
000010  f7fffffe          BL       LCD_DrawPixel
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
000014  1931              ADDS     r1,r6,r4
000016  1be8              SUBS     r0,r5,r7
000018  f7fffffe          BL       LCD_DrawPixel
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
00001c  19f1              ADDS     r1,r6,r7
00001e  1928              ADDS     r0,r5,r4
000020  f7fffffe          BL       LCD_DrawPixel
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
000024  1bf1              SUBS     r1,r6,r7
000026  1928              ADDS     r0,r5,r4
000028  f7fffffe          BL       LCD_DrawPixel
;;;52       if (yoff) {
00002c  b17c              CBZ      r4,|L1.78|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
00002e  1b31              SUBS     r1,r6,r4
000030  19e8              ADDS     r0,r5,r7
000032  f7fffffe          BL       LCD_DrawPixel
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
000036  1b31              SUBS     r1,r6,r4
000038  1be8              SUBS     r0,r5,r7
00003a  f7fffffe          BL       LCD_DrawPixel
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
00003e  19f1              ADDS     r1,r6,r7
000040  1b28              SUBS     r0,r5,r4
000042  f7fffffe          BL       LCD_DrawPixel
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000046  1bf1              SUBS     r1,r6,r7
000048  1b28              SUBS     r0,r5,r4
00004a  f7fffffe          BL       LCD_DrawPixel
                  |L1.78|
;;;57       }
;;;58     }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000052  e92d47f0          PUSH     {r4-r10,lr}
000056  4607              MOV      r7,r0
000058  4688              MOV      r8,r1
00005a  4614              MOV      r4,r2
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
00005c  f24020c3          MOV      r0,#0x2c3
000060  4360              MULS     r0,r4,r0
000062  f44f717a          MOV      r1,#0x3e8
000066  fb90f0f1          SDIV     r0,r0,r1
00006a  f1000901          ADD      r9,r0,#1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
00006e  eb0471d4          ADD      r1,r4,r4,LSR #31
000072  1049              ASRS     r1,r1,#1
000074  fb041a04          MLA      r10,r4,r4,r1
;;;74       I32 y=r;
000078  4626              MOV      r6,r4
;;;75       Draw8Point(x0,y0,r,0);
00007a  2300              MOVS     r3,#0
00007c  4622              MOV      r2,r4
00007e  4641              MOV      r1,r8
000080  4638              MOV      r0,r7
000082  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
000086  2501              MOVS     r5,#1
000088  e013              B        |L1.178|
                  |L1.138|
;;;77         if ((i*i+y*y) >sqmax) {
00008a  fb05f005          MUL      r0,r5,r5
00008e  fb060006          MLA      r0,r6,r6,r0
000092  4550              CMP      r0,r10
000094  dd06              BLE      |L1.164|
;;;78           Draw8Point(x0,y0,i,y);
000096  4633              MOV      r3,r6
000098  462a              MOV      r2,r5
00009a  4641              MOV      r1,r8
00009c  4638              MOV      r0,r7
00009e  f7fffffe          BL       Draw8Point
;;;79           y--;
0000a2  1e76              SUBS     r6,r6,#1
                  |L1.164|
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
0000a4  4633              MOV      r3,r6
0000a6  462a              MOV      r2,r5
0000a8  4641              MOV      r1,r8
0000aa  4638              MOV      r0,r7
0000ac  f7fffffe          BL       Draw8Point
0000b0  1c6d              ADDS     r5,r5,#1              ;76
                  |L1.178|
0000b2  454d              CMP      r5,r9                 ;76
0000b4  dde9              BLE      |L1.138|
;;;82       }
;;;83     }
0000b6  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
0000ba  b57c              PUSH     {r2-r6,lr}
0000bc  4606              MOV      r6,r0
0000be  460d              MOV      r5,r1
0000c0  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
0000c2  f7fffffe          BL       GUI_Lock
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
0000c6  48d0              LDR      r0,|L1.1032|
0000c8  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0000ca  4406              ADD      r6,r6,r0
0000cc  48ce              LDR      r0,|L1.1032|
0000ce  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0000d0  4405              ADD      r5,r5,r0
;;;96         Rect.x0 = x0-r;
0000d2  1b30              SUBS     r0,r6,r4
0000d4  b200              SXTH     r0,r0
0000d6  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
0000da  1930              ADDS     r0,r6,r4
0000dc  b200              SXTH     r0,r0
0000de  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
0000e2  1b28              SUBS     r0,r5,r4
0000e4  b200              SXTH     r0,r0
0000e6  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
0000ea  1928              ADDS     r0,r5,r4
0000ec  b200              SXTH     r0,r0
0000ee  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
0000f2  4668              MOV      r0,sp
0000f4  f7fffffe          BL       WM__InitIVRSearch
0000f8  b148              CBZ      r0,|L1.270|
0000fa  bf00              NOP      
                  |L1.252|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
0000fc  4622              MOV      r2,r4
0000fe  4629              MOV      r1,r5
000100  4630              MOV      r0,r6
000102  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
000106  f7fffffe          BL       WM__GetNextIVR
00010a  2800              CMP      r0,#0
00010c  d1f6              BNE      |L1.252|
                  |L1.270|
;;;105      #endif
;;;106      GUI_UNLOCK();
00010e  f7fffffe          BL       GUI_Unlock
;;;107    }
000112  bd7c              POP      {r2-r6,pc}
;;;108    
                          ENDP

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
000114  e92d47f0          PUSH     {r4-r10,lr}
000118  4605              MOV      r5,r0
00011a  4688              MOV      r8,r1
00011c  4616              MOV      r6,r2
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
00011e  f24020c3          MOV      r0,#0x2c3
000122  4370              MULS     r0,r6,r0
000124  f44f717a          MOV      r1,#0x3e8
000128  fb90f0f1          SDIV     r0,r0,r1
00012c  f1000901          ADD      r9,r0,#1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000130  eb0671d6          ADD      r1,r6,r6,LSR #31
000134  1049              ASRS     r1,r1,#1
000136  fb061a06          MLA      r10,r6,r6,r1
;;;117      I32 x=r;
00013a  4634              MOV      r4,r6
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
00013c  19aa              ADDS     r2,r5,r6
00013e  1ba8              SUBS     r0,r5,r6
000140  4641              MOV      r1,r8
000142  f7fffffe          BL       LCD_DrawHLine
;;;119      for (i=1; i<= imax; i++) {
000146  2701              MOVS     r7,#1
000148  e025              B        |L1.406|
                  |L1.330|
;;;120        if ((i*i+x*x) >sqmax) {
00014a  fb07f007          MUL      r0,r7,r7
00014e  fb040004          MLA      r0,r4,r4,r0
000152  4550              CMP      r0,r10
000154  dd12              BLE      |L1.380|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
000156  454c              CMP      r4,r9
000158  dd0f              BLE      |L1.378|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
00015a  19eb              ADDS     r3,r5,r7
00015c  1e5a              SUBS     r2,r3,#1
00015e  eb080104          ADD      r1,r8,r4
000162  1beb              SUBS     r3,r5,r7
000164  1c58              ADDS     r0,r3,#1
000166  f7fffffe          BL       LCD_DrawHLine
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
00016a  19eb              ADDS     r3,r5,r7
00016c  1e5a              SUBS     r2,r3,#1
00016e  eba80104          SUB      r1,r8,r4
000172  1beb              SUBS     r3,r5,r7
000174  1c58              ADDS     r0,r3,#1
000176  f7fffffe          BL       LCD_DrawHLine
                  |L1.378|
;;;125          }
;;;126          x--;
00017a  1e64              SUBS     r4,r4,#1
                  |L1.380|
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
00017c  192a              ADDS     r2,r5,r4
00017e  eb080107          ADD      r1,r8,r7
000182  1b28              SUBS     r0,r5,r4
000184  f7fffffe          BL       LCD_DrawHLine
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
000188  192a              ADDS     r2,r5,r4
00018a  eba80107          SUB      r1,r8,r7
00018e  1b28              SUBS     r0,r5,r4
000190  f7fffffe          BL       LCD_DrawHLine
000194  1c7f              ADDS     r7,r7,#1              ;119
                  |L1.406|
000196  454f              CMP      r7,r9                 ;119
000198  ddd7              BLE      |L1.330|
;;;131      }
;;;132    }
00019a  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
00019e  b570              PUSH     {r4-r6,lr}
0001a0  4604              MOV      r4,r0
0001a2  460d              MOV      r5,r1
0001a4  4616              MOV      r6,r2
;;;139      GUI_LOCK();
0001a6  f7fffffe          BL       GUI_Lock
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
0001aa  4897              LDR      r0,|L1.1032|
0001ac  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0001ae  4404              ADD      r4,r4,r0
0001b0  4895              LDR      r0,|L1.1032|
0001b2  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0001b4  4405              ADD      r5,r5,r0
;;;142        WM_ITERATE_START(NULL); {
0001b6  2000              MOVS     r0,#0
0001b8  f7fffffe          BL       WM__InitIVRSearch
0001bc  b148              CBZ      r0,|L1.466|
0001be  bf00              NOP      
                  |L1.448|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
0001c0  4632              MOV      r2,r6
0001c2  4629              MOV      r1,r5
0001c4  4620              MOV      r0,r4
0001c6  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
0001ca  f7fffffe          BL       WM__GetNextIVR
0001ce  2800              CMP      r0,#0
0001d0  d1f6              BNE      |L1.448|
                  |L1.466|
;;;147      #endif
;;;148      GUI_UNLOCK();
0001d2  f7fffffe          BL       GUI_Unlock
;;;149    }
0001d6  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
0001d8  e92d4ffe          PUSH     {r1-r11,lr}
0001dc  4680              MOV      r8,r0
0001de  4689              MOV      r9,r1
0001e0  4616              MOV      r6,r2
0001e2  461c              MOV      r4,r3
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
0001e4  46b2              MOV      r10,r6
;;;176      U32 _ry = ry;
0001e6  46a3              MOV      r11,r4
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
0001e8  fb0af00a          MUL      r0,r10,r10
0001ec  fb00f00b          MUL      r0,r0,r11
0001f0  fb00f10b          MUL      r1,r0,r11
0001f4  fb0af00a          MUL      r0,r10,r10
0001f8  fb00f00b          MUL      r0,r0,r11
0001fc  eb010050          ADD      r0,r1,r0,LSR #1
000200  9002              STR      r0,[sp,#8]
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
000202  4635              MOV      r5,r6
;;;180      for (y=0; y<=ry; y++) {
000204  2700              MOVS     r7,#0
000206  e02c              B        |L1.610|
                  |L1.520|
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
000208  fb06f006          MUL      r0,r6,r6
00020c  fb07f107          MUL      r1,r7,r7
000210  4348              MULS     r0,r1,r0
000212  9000              STR      r0,[sp,#0]
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000214  e000              B        |L1.536|
                  |L1.534|
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
000216  1e6d              SUBS     r5,r5,#1
                  |L1.536|
000218  fb04f004          MUL      r0,r4,r4              ;182
00021c  fb05f105          MUL      r1,r5,r5              ;182
000220  9a00              LDR      r2,[sp,#0]            ;182
000222  fb002001          MLA      r0,r0,r1,r2           ;182
000226  9001              STR      r0,[sp,#4]            ;182
000228  2d00              CMP      r5,#0                 ;183
00022a  dd05              BLE      |L1.568|
00022c  e9dd0101          LDRD     r0,r1,[sp,#4]         ;183
000230  4288              CMP      r0,r1                 ;183
000232  dd01              BLE      |L1.568|
000234  2001              MOVS     r0,#1                 ;183
000236  e000              B        |L1.570|
                  |L1.568|
000238  2000              MOVS     r0,#0                 ;183
                  |L1.570|
00023a  2800              CMP      r0,#0                 ;183
00023c  d1eb              BNE      |L1.534|
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
00023e  eb080205          ADD      r2,r8,r5
000242  eb090107          ADD      r1,r9,r7
000246  eba80005          SUB      r0,r8,r5
00024a  f7fffffe          BL       LCD_DrawHLine
;;;188        if (y)
00024e  b13f              CBZ      r7,|L1.608|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
000250  eb080205          ADD      r2,r8,r5
000254  eba90107          SUB      r1,r9,r7
000258  eba80005          SUB      r0,r8,r5
00025c  f7fffffe          BL       LCD_DrawHLine
                  |L1.608|
000260  1c7f              ADDS     r7,r7,#1              ;180
                  |L1.610|
000262  42a7              CMP      r7,r4                 ;180
000264  ddd0              BLE      |L1.520|
;;;190      }
;;;191    }
000266  e8bd8ffe          POP      {r1-r11,pc}
;;;192    
                          ENDP

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
00026a  e92d41fc          PUSH     {r2-r8,lr}
00026e  4604              MOV      r4,r0
000270  460d              MOV      r5,r1
000272  4616              MOV      r6,r2
000274  461f              MOV      r7,r3
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
000276  f7fffffe          BL       GUI_Lock
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
00027a  4863              LDR      r0,|L1.1032|
00027c  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00027e  4404              ADD      r4,r4,r0
000280  4861              LDR      r0,|L1.1032|
000282  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000284  4405              ADD      r5,r5,r0
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
000286  1ba0              SUBS     r0,r4,r6
000288  b200              SXTH     r0,r0
00028a  f8ad0000          STRH     r0,[sp,#0]
00028e  19a0              ADDS     r0,r4,r6
000290  b200              SXTH     r0,r0
000292  f8ad0004          STRH     r0,[sp,#4]
000296  1be8              SUBS     r0,r5,r7
000298  b200              SXTH     r0,r0
00029a  f8ad0002          STRH     r0,[sp,#2]
00029e  19e8              ADDS     r0,r5,r7
0002a0  b200              SXTH     r0,r0
0002a2  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
0002a6  4668              MOV      r0,sp
0002a8  f7fffffe          BL       WM__InitIVRSearch
0002ac  b150              CBZ      r0,|L1.708|
0002ae  bf00              NOP      
                  |L1.688|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
0002b0  463b              MOV      r3,r7
0002b2  4632              MOV      r2,r6
0002b4  4629              MOV      r1,r5
0002b6  4620              MOV      r0,r4
0002b8  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
0002bc  f7fffffe          BL       WM__GetNextIVR
0002c0  2800              CMP      r0,#0
0002c2  d1f5              BNE      |L1.688|
                  |L1.708|
;;;211      #endif
;;;212      GUI_UNLOCK();
0002c4  f7fffffe          BL       GUI_Unlock
;;;213    }
0002c8  e8bd81fc          POP      {r2-r8,pc}
;;;214    
                          ENDP

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
0002cc  e92d5fff          PUSH     {r0-r12,lr}
0002d0  4605              MOV      r5,r0
0002d2  460e              MOV      r6,r1
0002d4  4691              MOV      r9,r2
0002d6  461f              MOV      r7,r3
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
0002d8  46cb              MOV      r11,r9
;;;224      U32 _ry = ry;
0002da  9700              STR      r7,[sp,#0]
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
0002dc  fb0bf00b          MUL      r0,r11,r11
0002e0  9f00              LDR      r7,[sp,#0]
0002e2  4378              MULS     r0,r7,r0
0002e4  fb00f107          MUL      r1,r0,r7
0002e8  fb0bf00b          MUL      r0,r11,r11
0002ec  4378              MULS     r0,r7,r0
0002ee  eb010050          ADD      r0,r1,r0,LSR #1
0002f2  9003              STR      r0,[sp,#0xc]
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
0002f4  46c8              MOV      r8,r9
0002f6  46ca              MOV      r10,r9
;;;228      for (y=0; y<=ry; y++) {
0002f8  2400              MOVS     r4,#0
0002fa  e050              B        |L1.926|
                  |L1.764|
;;;229        if (y==ry) {
0002fc  42bc              CMP      r4,r7
0002fe  d102              BNE      |L1.774|
;;;230          x=0;
000300  f04f0800          MOV      r8,#0
000304  e01c              B        |L1.832|
                  |L1.774|
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
000306  fb09f009          MUL      r0,r9,r9
00030a  fb04f104          MUL      r1,r4,r4
00030e  4348              MULS     r0,r1,r0
000310  9001              STR      r0,[sp,#4]
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000312  e001              B        |L1.792|
                  |L1.788|
;;;234                 (x>0) && (Sum>OutConst)) x--;
000314  f1a80801          SUB      r8,r8,#1
                  |L1.792|
000318  fb07f007          MUL      r0,r7,r7              ;233
00031c  fb08f108          MUL      r1,r8,r8              ;233
000320  9a01              LDR      r2,[sp,#4]            ;233
000322  fb002001          MLA      r0,r0,r1,r2           ;233
000326  9002              STR      r0,[sp,#8]            ;233
000328  f1b80f00          CMP      r8,#0
00032c  dd05              BLE      |L1.826|
00032e  e9dd0102          LDRD     r0,r1,[sp,#8]
000332  4288              CMP      r0,r1
000334  dd01              BLE      |L1.826|
000336  2001              MOVS     r0,#1
000338  e000              B        |L1.828|
                  |L1.826|
00033a  2000              MOVS     r0,#0
                  |L1.828|
00033c  2800              CMP      r0,#0
00033e  d1e9              BNE      |L1.788|
                  |L1.832|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
000340  b35c              CBZ      r4,|L1.922|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
000342  1b33              SUBS     r3,r6,r4
000344  eba50208          SUB      r2,r5,r8
000348  eba60c04          SUB      r12,r6,r4
00034c  f10c0101          ADD      r1,r12,#1
000350  eba5000a          SUB      r0,r5,r10
000354  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
000358  1933              ADDS     r3,r6,r4
00035a  eba50208          SUB      r2,r5,r8
00035e  eb060c04          ADD      r12,r6,r4
000362  f1ac0101          SUB      r1,r12,#1
000366  eba5000a          SUB      r0,r5,r10
00036a  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
00036e  1b33              SUBS     r3,r6,r4
000370  eb050208          ADD      r2,r5,r8
000374  eba60c04          SUB      r12,r6,r4
000378  f10c0101          ADD      r1,r12,#1
00037c  eb05000a          ADD      r0,r5,r10
000380  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
000384  1933              ADDS     r3,r6,r4
000386  eb050208          ADD      r2,r5,r8
00038a  eb060c04          ADD      r12,r6,r4
00038e  f1ac0101          SUB      r1,r12,#1
000392  eb05000a          ADD      r0,r5,r10
000396  f7fffffe          BL       GL_DrawLine1
                  |L1.922|
;;;244        }
;;;245        xOld = x;
00039a  46c2              MOV      r10,r8
00039c  1c64              ADDS     r4,r4,#1              ;228
                  |L1.926|
00039e  42bc              CMP      r4,r7                 ;228
0003a0  ddac              BLE      |L1.764|
;;;246      }
;;;247    }
0003a2  e8bd9fff          POP      {r0-r12,pc}
;;;248    
                          ENDP

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
0003a6  e92d41fc          PUSH     {r2-r8,lr}
0003aa  4604              MOV      r4,r0
0003ac  460d              MOV      r5,r1
0003ae  4616              MOV      r6,r2
0003b0  461f              MOV      r7,r3
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
0003b2  f7fffffe          BL       GUI_Lock
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
0003b6  4814              LDR      r0,|L1.1032|
0003b8  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0003ba  4404              ADD      r4,r4,r0
0003bc  4812              LDR      r0,|L1.1032|
0003be  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0003c0  4405              ADD      r5,r5,r0
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
0003c2  1ba0              SUBS     r0,r4,r6
0003c4  b200              SXTH     r0,r0
0003c6  f8ad0000          STRH     r0,[sp,#0]
0003ca  19a0              ADDS     r0,r4,r6
0003cc  b200              SXTH     r0,r0
0003ce  f8ad0004          STRH     r0,[sp,#4]
0003d2  1be8              SUBS     r0,r5,r7
0003d4  b200              SXTH     r0,r0
0003d6  f8ad0002          STRH     r0,[sp,#2]
0003da  19e8              ADDS     r0,r5,r7
0003dc  b200              SXTH     r0,r0
0003de  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
0003e2  4668              MOV      r0,sp
0003e4  f7fffffe          BL       WM__InitIVRSearch
0003e8  b150              CBZ      r0,|L1.1024|
0003ea  bf00              NOP      
                  |L1.1004|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
0003ec  463b              MOV      r3,r7
0003ee  4632              MOV      r2,r6
0003f0  4629              MOV      r1,r5
0003f2  4620              MOV      r0,r4
0003f4  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
0003f8  f7fffffe          BL       WM__GetNextIVR
0003fc  2800              CMP      r0,#0
0003fe  d1f5              BNE      |L1.1004|
                  |L1.1024|
;;;267      #endif
;;;268      GUI_UNLOCK();
000400  f7fffffe          BL       GUI_Unlock
;;;269    }
000404  e8bd81fc          POP      {r2-r8,pc}
;;;270    
                          ENDP

                  |L1.1032|
                          DCD      GUI_Context
