; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\gui2dlib.o --depend=.\Obj\gui2dlib.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\gui2dlib.crf ..\Ucgui\GUI\Core\GUI2DLib.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SwapInt PROC
;;;42     */
;;;43     static void _SwapInt(int* pa, int* pb) {
000000  6802              LDR      r2,[r0,#0]
;;;44       int t;
;;;45       t = *pa;
;;;46       *pa = *pb;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;47       *pb = t;
000006  600a              STR      r2,[r1,#0]
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP

                  Abs PROC
;;;53     */
;;;54     static int Abs(int v) {
00000a  4601              MOV      r1,r0
;;;55       return ABS(v);
00000c  2900              CMP      r1,#0
00000e  dd01              BLE      |L1.20|
000010  4608              MOV      r0,r1
                  |L1.18|
;;;56     }
000012  4770              BX       lr
                  |L1.20|
000014  4248              RSBS     r0,r1,#0              ;55
000016  e7fc              B        |L1.18|
;;;57     
                          ENDP

                  GUI_sin PROC
;;;105    */
;;;106    int GUI_sin(int angle) {
000018  b570              PUSH     {r4-r6,lr}
00001a  4601              MOV      r1,r0
;;;107      char IsNeg =0;
00001c  2500              MOVS     r5,#0
;;;108      int i;
;;;109    	U16 Faktor;
;;;110      U32 t;
;;;111      angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
00001e  f3c1010b          UBFX     r1,r1,#0,#12
;;;112      if (angle> 2* GUI_90DEG) {
000022  f5b16f00          CMP      r1,#0x800
000026  dd02              BLE      |L1.46|
;;;113        angle -= 2* GUI_90DEG;
000028  f5a16100          SUB      r1,r1,#0x800
;;;114        IsNeg =1;
00002c  2501              MOVS     r5,#1
                  |L1.46|
;;;115      }
;;;116      if (angle> GUI_90DEG) {  /* between 90-180 */
00002e  f5b16f80          CMP      r1,#0x400
000032  dd01              BLE      |L1.56|
;;;117        angle = 2*GUI_90DEG-angle;   /* use sine symetry */
000034  f5c16100          RSB      r1,r1,#0x800
                  |L1.56|
;;;118      }
;;;119      /* Now angle is reduced to 0° <= <= 90° */
;;;120    #if 0
;;;121      angle >>=2;    /* make sure we do not exceed 16 bits in calculations */
;;;122      i = angle>>4;
;;;123      Faktor = (1<<4)-(angle&((1<<4)-1));
;;;124      r = aSin[i]*Faktor;
;;;125      if (Faktor !=(1<<4)) {
;;;126        r += aSin[i+1]*((1<<4)-Faktor);
;;;127      }
;;;128      r = (r+(1<<3)) >>4;   /* divide,incl. rounding */
;;;129    #else
;;;130      i = angle>>6;
000038  118c              ASRS     r4,r1,#6
;;;131      {
;;;132        Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
00003a  f001003f          AND      r0,r1,#0x3f
00003e  f1c00240          RSB      r2,r0,#0x40
;;;133        t = aSin[i]*(U32)Faktor;
000042  48fb              LDR      r0,|L1.1072|
000044  f8300014          LDRH     r0,[r0,r4,LSL #1]
000048  fb00f302          MUL      r3,r0,r2
;;;134        if (Faktor !=(1<<6)) {
00004c  2a40              CMP      r2,#0x40
00004e  d007              BEQ      |L1.96|
;;;135          t += aSin[i+1]*((1<<6)-Faktor);
000050  4ef7              LDR      r6,|L1.1072|
000052  1c60              ADDS     r0,r4,#1
000054  f8360010          LDRH     r0,[r6,r0,LSL #1]
000058  f1c20640          RSB      r6,r2,#0x40
00005c  fb003306          MLA      r3,r0,r6,r3
                  |L1.96|
;;;136        }
;;;137    	}
;;;138      t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
000060  f1030020          ADD      r0,r3,#0x20
000064  0983              LSRS     r3,r0,#6
;;;139    #endif
;;;140      return (IsNeg) ? 0-t : t;
000066  b10d              CBZ      r5,|L1.108|
000068  4258              RSBS     r0,r3,#0
                  |L1.106|
;;;141    }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  4618              MOV      r0,r3                 ;140
00006e  e7fc              B        |L1.106|
;;;142    
                          ENDP

                  GUI_cos PROC
;;;146    */
;;;147    int GUI_cos(int angle) {
000070  b510              PUSH     {r4,lr}
000072  4604              MOV      r4,r0
;;;148      return GUI_sin(angle+GUI_90DEG);
000074  f5046080          ADD      r0,r4,#0x400
000078  f7fffffe          BL       GUI_sin
;;;149    }
00007c  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  _atan0_45 PROC
;;;182    */
;;;183    static int _atan0_45(int q) {
00007e  b530              PUSH     {r4,r5,lr}
000080  4601              MOV      r1,r0
;;;184      int r;
;;;185      int i, Faktor;
;;;186      /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
;;;187      q >>=2;    /* make sure we do not exceed 16 bits in calculations */
000082  1089              ASRS     r1,r1,#2
;;;188      i = q>>4;
000084  110b              ASRS     r3,r1,#4
;;;189      Faktor = (1<<4)-(q&((1<<4)-1));
000086  f001040f          AND      r4,r1,#0xf
00008a  f1c40210          RSB      r2,r4,#0x10
;;;190      r = aTan[i]*Faktor;
00008e  4ce9              LDR      r4,|L1.1076|
000090  f9344013          LDRSH    r4,[r4,r3,LSL #1]
000094  fb04f002          MUL      r0,r4,r2
;;;191      if (Faktor !=(1<<4)) {
000098  2a10              CMP      r2,#0x10
00009a  d007              BEQ      |L1.172|
;;;192        r += aTan[i+1]*((1<<4)-Faktor);
00009c  4de5              LDR      r5,|L1.1076|
00009e  1c5c              ADDS     r4,r3,#1
0000a0  f9354014          LDRSH    r4,[r5,r4,LSL #1]
0000a4  f1c20510          RSB      r5,r2,#0x10
0000a8  fb040005          MLA      r0,r4,r5,r0
                  |L1.172|
;;;193      }
;;;194      r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
0000ac  f1000408          ADD      r4,r0,#8
0000b0  17e5              ASRS     r5,r4,#31
0000b2  eb047515          ADD      r5,r4,r5,LSR #28
0000b6  1128              ASRS     r0,r5,#4
;;;195      return r;
;;;196    }
0000b8  bd30              POP      {r4,r5,pc}
;;;197    
                          ENDP

                  _atan2 PROC
;;;201    */
;;;202    static int _atan2(I32 x, I32 y) {
0000ba  e92d41f0          PUSH     {r4-r8,lr}
0000be  4605              MOV      r5,r0
0000c0  460c              MOV      r4,r1
;;;203      U8 q =0;
0000c2  2600              MOVS     r6,#0
;;;204      int angle;
;;;205    /* first make sure we are in angle between 0 and 45° */
;;;206      if (x<0) {
0000c4  2d00              CMP      r5,#0
0000c6  da01              BGE      |L1.204|
;;;207        q=1;
0000c8  2601              MOVS     r6,#1
;;;208        x=-x;
0000ca  426d              RSBS     r5,r5,#0
                  |L1.204|
;;;209      }
;;;210      if (y<0) {
0000cc  2c00              CMP      r4,#0
0000ce  da02              BGE      |L1.214|
;;;211        q |= (1<<1);
0000d0  f0460602          ORR      r6,r6,#2
;;;212        y=-y;
0000d4  4264              RSBS     r4,r4,#0
                  |L1.214|
;;;213      }
;;;214      if (y>x) {
0000d6  42ac              CMP      r4,r5
0000d8  dd05              BLE      |L1.230|
;;;215        int t = y;
0000da  4620              MOV      r0,r4
;;;216        y=x;
0000dc  462c              MOV      r4,r5
;;;217        x=t;
0000de  4605              MOV      r5,r0
;;;218        q |= (1<<2);  
0000e0  f0460604          ORR      r6,r6,#4
;;;219      }
0000e4  bf00              NOP      
                  |L1.230|
;;;220      y <<=10;
0000e6  02a4              LSLS     r4,r4,#10
;;;221      y += (x/2);
0000e8  4628              MOV      r0,r5
0000ea  eb0571d5          ADD      r1,r5,r5,LSR #31
0000ee  eb040461          ADD      r4,r4,r1,ASR #1
;;;222      y /= x;
0000f2  fb94f4f5          SDIV     r4,r4,r5
;;;223      angle = _atan0_45(y);
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       _atan0_45
0000fc  4607              MOV      r7,r0
;;;224      if (q&(1<<2)) { /* y/x reverse ? */
0000fe  f0160f04          TST      r6,#4
000102  d001              BEQ      |L1.264|
;;;225        angle = GUI_90DEG-angle;
000104  f5c76780          RSB      r7,r7,#0x400
                  |L1.264|
;;;226      }
;;;227      if (q&1) {  /* xreverse ? */
000108  f0160f01          TST      r6,#1
00010c  d001              BEQ      |L1.274|
;;;228        angle = GUI_180DEG-angle;
00010e  f5c76700          RSB      r7,r7,#0x800
                  |L1.274|
;;;229      }
;;;230      if (q&(1<<1)) { /* y-reverse ? */
000112  f0160f02          TST      r6,#2
000116  d001              BEQ      |L1.284|
;;;231        angle = GUI_360DEG-angle;
000118  f5c75780          RSB      r7,r7,#0x1000
                  |L1.284|
;;;232      }
;;;233      return angle;
00011c  4638              MOV      r0,r7
;;;234    }
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;235    
                          ENDP

                  _SetLineColor PROC
;;;239    */
;;;240    static int _SetLineColor(int i) {
000122  4601              MOV      r1,r0
;;;241      switch (GUI_Context.LineStyle) {
000124  48c4              LDR      r0,|L1.1080|
000126  7d80              LDRB     r0,[r0,#0x16]  ; GUI_Context
000128  2801              CMP      r0,#1
00012a  d006              BEQ      |L1.314|
00012c  2802              CMP      r0,#2
00012e  d011              BEQ      |L1.340|
000130  2803              CMP      r0,#3
000132  d01c              BEQ      |L1.366|
000134  2804              CMP      r0,#4
000136  d142              BNE      |L1.446|
000138  e02a              B        |L1.400|
                  |L1.314|
;;;242      case GUI_LS_DASH:
;;;243        i = (i+6)%16;
00013a  1d88              ADDS     r0,r1,#6
00013c  17c2              ASRS     r2,r0,#31
00013e  eb007212          ADD      r2,r0,r2,LSR #28
000142  1112              ASRS     r2,r2,#4
000144  eba01102          SUB      r1,r0,r2,LSL #4
;;;244        return (i<12);
000148  290c              CMP      r1,#0xc
00014a  da01              BGE      |L1.336|
00014c  2001              MOVS     r0,#1
                  |L1.334|
;;;245      case GUI_LS_DOT:
;;;246        i %= 4;
;;;247        return (i<2);
;;;248      case GUI_LS_DASHDOT:
;;;249        i %= 20;
;;;250        if (i<12)
;;;251          return 1;
;;;252        else if ((i>=16) && (i<18))
;;;253          return 1;
;;;254        return 0;
;;;255      case GUI_LS_DASHDOTDOT:
;;;256        i %= 24;
;;;257        if (i<12)
;;;258          return 1;
;;;259        else if ((i>=16) && (i<18))
;;;260          return 1;
;;;261        else if ((i>=20) && (i<22))
;;;262          return 1;
;;;263        else 
;;;264          return 0;
;;;265      }
;;;266      return 0;
;;;267    }
00014e  4770              BX       lr
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;244
000152  e7fc              B        |L1.334|
                  |L1.340|
000154  4608              MOV      r0,r1                 ;246
000156  17ca              ASRS     r2,r1,#31             ;246
000158  eb017292          ADD      r2,r1,r2,LSR #30      ;246
00015c  1092              ASRS     r2,r2,#2              ;246
00015e  eba10182          SUB      r1,r1,r2,LSL #2       ;246
000162  2902              CMP      r1,#2                 ;247
000164  da01              BGE      |L1.362|
000166  2001              MOVS     r0,#1                 ;247
000168  e7f1              B        |L1.334|
                  |L1.362|
00016a  2000              MOVS     r0,#0                 ;247
00016c  e7ef              B        |L1.334|
                  |L1.366|
00016e  2014              MOVS     r0,#0x14              ;249
000170  fb91f2f0          SDIV     r2,r1,r0              ;249
000174  fb001112          MLS      r1,r0,r2,r1           ;249
000178  290c              CMP      r1,#0xc               ;250
00017a  da01              BGE      |L1.384|
00017c  2001              MOVS     r0,#1                 ;251
00017e  e7e6              B        |L1.334|
                  |L1.384|
000180  2910              CMP      r1,#0x10              ;252
000182  db03              BLT      |L1.396|
000184  2912              CMP      r1,#0x12              ;252
000186  da01              BGE      |L1.396|
000188  2001              MOVS     r0,#1                 ;253
00018a  e7e0              B        |L1.334|
                  |L1.396|
00018c  2000              MOVS     r0,#0                 ;254
00018e  e7de              B        |L1.334|
                  |L1.400|
000190  2018              MOVS     r0,#0x18              ;256
000192  fb91f2f0          SDIV     r2,r1,r0              ;256
000196  fb001112          MLS      r1,r0,r2,r1           ;256
00019a  290c              CMP      r1,#0xc               ;257
00019c  da01              BGE      |L1.418|
00019e  2001              MOVS     r0,#1                 ;258
0001a0  e7d5              B        |L1.334|
                  |L1.418|
0001a2  2910              CMP      r1,#0x10              ;259
0001a4  db03              BLT      |L1.430|
0001a6  2912              CMP      r1,#0x12              ;259
0001a8  da01              BGE      |L1.430|
0001aa  2001              MOVS     r0,#1                 ;260
0001ac  e7cf              B        |L1.334|
                  |L1.430|
0001ae  2914              CMP      r1,#0x14              ;261
0001b0  db03              BLT      |L1.442|
0001b2  2916              CMP      r1,#0x16              ;261
0001b4  da01              BGE      |L1.442|
0001b6  2001              MOVS     r0,#1                 ;262
0001b8  e7c9              B        |L1.334|
                  |L1.442|
0001ba  2000              MOVS     r0,#0                 ;264
0001bc  e7c7              B        |L1.334|
                  |L1.446|
0001be  2000              MOVS     r0,#0                 ;266
0001c0  e7c5              B        |L1.334|
;;;268    
                          ENDP

                  _CalcOrto PROC
;;;283    */
;;;284    static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
0001c2  e92d5ff0          PUSH     {r4-r12,lr}
0001c6  4681              MOV      r9,r0
0001c8  468a              MOV      r10,r1
0001ca  4616              MOV      r6,r2
0001cc  461f              MOV      r7,r3
0001ce  f8ddb028          LDR      r11,[sp,#0x28]
;;;285      I32 x,y;
;;;286    /*
;;;287      int Angle = _atan2(xDiff, yDiff);
;;;288    */
;;;289    #if 0
;;;290      double Angle = atan2(xDiff, yDiff);
;;;291      x = (int)(-r*cos(Angle));
;;;292      y = (int)(r*sin(Angle));
;;;293    #else
;;;294      int Angle = _atan2(xDiff, yDiff);
0001d2  4651              MOV      r1,r10
0001d4  4648              MOV      r0,r9
0001d6  f7fffffe          BL       _atan2
0001da  4680              MOV      r8,r0
;;;295      Angle+= GUI_90DEG;
0001dc  f5086880          ADD      r8,r8,#0x400
;;;296      x = ( r*(I32)GUI_cos(Angle));
0001e0  4640              MOV      r0,r8
0001e2  f7fffffe          BL       GUI_cos
0001e6  fb00f406          MUL      r4,r0,r6
;;;297      y = ( r*(I32)GUI_sin(Angle));
0001ea  4640              MOV      r0,r8
0001ec  f7fffffe          BL       GUI_sin
0001f0  fb00f506          MUL      r5,r0,r6
;;;298    #endif
;;;299      x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
0001f4  2c00              CMP      r4,#0
0001f6  da04              BGE      |L1.514|
0001f8  f5c47000          RSB      r0,r4,#0x200
0001fc  1280              ASRS     r0,r0,#10
0001fe  4240              RSBS     r0,r0,#0
000200  e002              B        |L1.520|
                  |L1.514|
000202  f5047000          ADD      r0,r4,#0x200
000206  1280              ASRS     r0,r0,#10
                  |L1.520|
000208  4604              MOV      r4,r0
;;;300      y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
00020a  2d00              CMP      r5,#0
00020c  da04              BGE      |L1.536|
00020e  f5c57000          RSB      r0,r5,#0x200
000212  1280              ASRS     r0,r0,#10
000214  4240              RSBS     r0,r0,#0
000216  e002              B        |L1.542|
                  |L1.536|
000218  f5057000          ADD      r0,r5,#0x200
00021c  1280              ASRS     r0,r0,#10
                  |L1.542|
00021e  4605              MOV      r5,r0
;;;301      *px = x;
000220  603c              STR      r4,[r7,#0]
;;;302      *py = y;
000222  f8cb5000          STR      r5,[r11,#0]
;;;303    }
000226  e8bd9ff0          POP      {r4-r12,pc}
;;;304    
                          ENDP

                  GL_DrawPoint PROC
;;;663    */
;;;664    void GL_DrawPoint(int x, int y) {
00022a  b570              PUSH     {r4-r6,lr}
00022c  4604              MOV      r4,r0
00022e  460d              MOV      r5,r1
;;;665      if (GUI_Context.PenSize == 1) {
000230  4881              LDR      r0,|L1.1080|
000232  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
000234  2801              CMP      r0,#1
000236  d104              BNE      |L1.578|
;;;666        LCD_HL_DrawPixel(x, y);
000238  4629              MOV      r1,r5
00023a  4620              MOV      r0,r4
00023c  f7fffffe          BL       LCD_DrawPixel
000240  e009              B        |L1.598|
                  |L1.578|
;;;667      } else {
;;;668        GL_FillCircle(x, y, (GUI_Context.PenSize - 1) / 2);
000242  487d              LDR      r0,|L1.1080|
000244  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
000246  1e46              SUBS     r6,r0,#1
000248  eb0670d6          ADD      r0,r6,r6,LSR #31
00024c  1042              ASRS     r2,r0,#1
00024e  4629              MOV      r1,r5
000250  4620              MOV      r0,r4
000252  f7fffffe          BL       GL_FillCircle
                  |L1.598|
;;;669      }
;;;670    }
000256  bd70              POP      {r4-r6,pc}
;;;671    
                          ENDP

                  _DrawLineEnd PROC
;;;317    */
;;;318    static void _DrawLineEnd(int x0, int y0) {
000258  b570              PUSH     {r4-r6,lr}
00025a  4604              MOV      r4,r0
00025c  460d              MOV      r5,r1
;;;319      switch (GUI_Context.PenShape) {
00025e  4876              LDR      r0,|L1.1080|
000260  7d40              LDRB     r0,[r0,#0x15]  ; GUI_Context
000262  b110              CBZ      r0,|L1.618|
000264  2801              CMP      r0,#1
000266  d106              BNE      |L1.630|
000268  e004              B        |L1.628|
                  |L1.618|
;;;320      case GUI_PS_ROUND:
;;;321        GL_DrawPoint(x0,y0);
00026a  4629              MOV      r1,r5
00026c  4620              MOV      r0,r4
00026e  f7fffffe          BL       GL_DrawPoint
;;;322        break;
000272  e000              B        |L1.630|
                  |L1.628|
;;;323      case GUI_PS_FLAT:
;;;324        break;
000274  bf00              NOP      
                  |L1.630|
000276  bf00              NOP                            ;322
;;;325      }
;;;326    }
000278  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP

                  GL_DrawLine1 PROC
;;;588    */
;;;589    void GL_DrawLine1(int x0, int y0, int x1, int y1) {
00027a  e92d41ff          PUSH     {r0-r8,lr}
00027e  b082              SUB      sp,sp,#8
;;;590      int xdiff = x1-x0;
000280  9902              LDR      r1,[sp,#8]
000282  9804              LDR      r0,[sp,#0x10]
000284  1a40              SUBS     r0,r0,r1
000286  9001              STR      r0,[sp,#4]
;;;591      int ydiff = y1-y0;
000288  9903              LDR      r1,[sp,#0xc]
00028a  9805              LDR      r0,[sp,#0x14]
00028c  1a40              SUBS     r0,r0,r1
00028e  9000              STR      r0,[sp,#0]
;;;592      int xdiffby2;
;;;593      int i;
;;;594      char Swapped =0;
000290  2700              MOVS     r7,#0
;;;595    /* check if no line */
;;;596      if (!(xdiff|ydiff)) {
000292  e9dd1000          LDRD     r1,r0,[sp,#0]
000296  4308              ORRS     r0,r0,r1
000298  d106              BNE      |L1.680|
;;;597        GL_DrawPoint(x0,y0);
00029a  e9dd0102          LDRD     r0,r1,[sp,#8]
00029e  f7fffffe          BL       GL_DrawPoint
                  |L1.674|
;;;598        return;
;;;599      }
;;;600    #if 0
;;;601    /* check if horizontal line */
;;;602      if (!xdiff) {
;;;603        GL_DrawVLine(x0,y0,y1);
;;;604        return;
;;;605      }
;;;606    /* check if vertical line */
;;;607      if (!ydiff) {
;;;608        GL_DrawHLine(y0,x0,x1);
;;;609        return;
;;;610      }
;;;611    #endif
;;;612    /* check if we swap x and y for calculation */
;;;613      if (Abs(xdiff) < Abs(ydiff)) {
;;;614        _SwapInt(&xdiff,&ydiff);
;;;615        _SwapInt(&x0,&y0);
;;;616        _SwapInt(&x1,&y1);
;;;617        Swapped =1;
;;;618      }
;;;619    /* make sure line direction is positive */
;;;620      if (xdiff!=Abs(xdiff)) {
;;;621        xdiff = -xdiff;
;;;622        ydiff = -ydiff;
;;;623        _SwapInt(&x0,&x1);
;;;624        _SwapInt(&y0,&y1);
;;;625      }
;;;626      xdiffby2 = xdiff/2;
;;;627      if (ydiff<0)
;;;628        xdiffby2 = -xdiffby2;
;;;629    /* Draw pixel by pixel solid*/
;;;630      if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;631        for (i=0; i<=xdiff; i++) {
;;;632          I32 l = ((I32)ydiff)*i+xdiffby2;
;;;633          int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
;;;634          if (!Swapped)
;;;635            LCD_HL_DrawPixel(x0+i, y);
;;;636          else
;;;637            LCD_HL_DrawPixel(y, x0+i);
;;;638        }
;;;639    /* Draw pixel by pixel with fill style */
;;;640      } else {
;;;641        for (i=0; i<=xdiff; i++) {
;;;642          long l = ((long)ydiff)*i+xdiffby2;
;;;643          int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
;;;644          if (!_SetLineColor(i)) {
;;;645            if (!Swapped)
;;;646              LCD_HL_DrawPixel(x0+i, y);
;;;647            else
;;;648              LCD_HL_DrawPixel(y, x0+i);
;;;649          }
;;;650        }
;;;651      }
;;;652    }
0002a2  b006              ADD      sp,sp,#0x18
0002a4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.680|
0002a8  9801              LDR      r0,[sp,#4]            ;613
0002aa  f7fffffe          BL       Abs
0002ae  4606              MOV      r6,r0                 ;613
0002b0  9800              LDR      r0,[sp,#0]            ;613
0002b2  f7fffffe          BL       Abs
0002b6  4286              CMP      r6,r0                 ;613
0002b8  da0c              BGE      |L1.724|
0002ba  4669              MOV      r1,sp                 ;614
0002bc  a801              ADD      r0,sp,#4              ;614
0002be  f7fffffe          BL       _SwapInt
0002c2  a903              ADD      r1,sp,#0xc            ;615
0002c4  a802              ADD      r0,sp,#8              ;615
0002c6  f7fffffe          BL       _SwapInt
0002ca  a905              ADD      r1,sp,#0x14           ;616
0002cc  a804              ADD      r0,sp,#0x10           ;616
0002ce  f7fffffe          BL       _SwapInt
0002d2  2701              MOVS     r7,#1                 ;617
                  |L1.724|
0002d4  9801              LDR      r0,[sp,#4]            ;620
0002d6  f7fffffe          BL       Abs
0002da  9901              LDR      r1,[sp,#4]            ;620
0002dc  4288              CMP      r0,r1                 ;620
0002de  d00d              BEQ      |L1.764|
0002e0  9801              LDR      r0,[sp,#4]            ;621
0002e2  4240              RSBS     r0,r0,#0              ;621
0002e4  9001              STR      r0,[sp,#4]            ;621
0002e6  9800              LDR      r0,[sp,#0]            ;622
0002e8  4240              RSBS     r0,r0,#0              ;622
0002ea  9000              STR      r0,[sp,#0]            ;622
0002ec  a904              ADD      r1,sp,#0x10           ;623
0002ee  a802              ADD      r0,sp,#8              ;623
0002f0  f7fffffe          BL       _SwapInt
0002f4  a905              ADD      r1,sp,#0x14           ;624
0002f6  a803              ADD      r0,sp,#0xc            ;624
0002f8  f7fffffe          BL       _SwapInt
                  |L1.764|
0002fc  9801              LDR      r0,[sp,#4]            ;626
0002fe  eb0071d0          ADD      r1,r0,r0,LSR #31      ;626
000302  104d              ASRS     r5,r1,#1              ;626
000304  9800              LDR      r0,[sp,#0]            ;627
000306  2800              CMP      r0,#0                 ;627
000308  da00              BGE      |L1.780|
00030a  426d              RSBS     r5,r5,#0              ;628
                  |L1.780|
00030c  484a              LDR      r0,|L1.1080|
00030e  7d80              LDRB     r0,[r0,#0x16]         ;630  ; GUI_Context
000310  bb50              CBNZ     r0,|L1.872|
000312  2400              MOVS     r4,#0                 ;631
000314  e024              B        |L1.864|
                  |L1.790|
000316  9800              LDR      r0,[sp,#0]            ;632
000318  fb005604          MLA      r6,r0,r4,r5           ;632
00031c  2e00              CMP      r6,#0                 ;633
00031e  dd01              BLE      |L1.804|
000320  4630              MOV      r0,r6                 ;633
000322  e000              B        |L1.806|
                  |L1.804|
000324  4270              RSBS     r0,r6,#0              ;633
                  |L1.806|
000326  f64771ff          MOV      r1,#0x7fff            ;633
00032a  4288              CMP      r0,r1                 ;633
00032c  da05              BGE      |L1.826|
00032e  9801              LDR      r0,[sp,#4]            ;633
000330  fb96f0f0          SDIV     r0,r6,r0              ;633
000334  9903              LDR      r1,[sp,#0xc]          ;633
000336  4408              ADD      r0,r0,r1              ;633
000338  e004              B        |L1.836|
                  |L1.826|
00033a  9801              LDR      r0,[sp,#4]            ;633
00033c  fb96f0f0          SDIV     r0,r6,r0              ;633
000340  9903              LDR      r1,[sp,#0xc]          ;633
000342  4408              ADD      r0,r0,r1              ;633
                  |L1.836|
000344  4680              MOV      r8,r0                 ;633
000346  b92f              CBNZ     r7,|L1.852|
000348  9902              LDR      r1,[sp,#8]            ;635
00034a  1908              ADDS     r0,r1,r4              ;635
00034c  4641              MOV      r1,r8                 ;635
00034e  f7fffffe          BL       LCD_DrawPixel
000352  e004              B        |L1.862|
                  |L1.852|
000354  9802              LDR      r0,[sp,#8]            ;637
000356  1901              ADDS     r1,r0,r4              ;637
000358  4640              MOV      r0,r8                 ;637
00035a  f7fffffe          BL       LCD_DrawPixel
                  |L1.862|
00035e  1c64              ADDS     r4,r4,#1              ;631
                  |L1.864|
000360  9801              LDR      r0,[sp,#4]            ;631
000362  4284              CMP      r4,r0                 ;631
000364  ddd7              BLE      |L1.790|
000366  e02d              B        |L1.964|
                  |L1.872|
000368  2400              MOVS     r4,#0                 ;641
00036a  e028              B        |L1.958|
                  |L1.876|
00036c  9800              LDR      r0,[sp,#0]            ;642
00036e  fb005604          MLA      r6,r0,r4,r5           ;642
000372  2e00              CMP      r6,#0                 ;643
000374  dd01              BLE      |L1.890|
000376  4630              MOV      r0,r6                 ;643
000378  e000              B        |L1.892|
                  |L1.890|
00037a  4270              RSBS     r0,r6,#0              ;643
                  |L1.892|
00037c  f64771ff          MOV      r1,#0x7fff            ;643
000380  4288              CMP      r0,r1                 ;643
000382  da05              BGE      |L1.912|
000384  9801              LDR      r0,[sp,#4]            ;643
000386  fb96f0f0          SDIV     r0,r6,r0              ;643
00038a  9903              LDR      r1,[sp,#0xc]          ;643
00038c  4408              ADD      r0,r0,r1              ;643
00038e  e004              B        |L1.922|
                  |L1.912|
000390  9801              LDR      r0,[sp,#4]            ;643
000392  fb96f0f0          SDIV     r0,r6,r0              ;643
000396  9903              LDR      r1,[sp,#0xc]          ;643
000398  4408              ADD      r0,r0,r1              ;643
                  |L1.922|
00039a  4680              MOV      r8,r0                 ;643
00039c  4620              MOV      r0,r4                 ;644
00039e  f7fffffe          BL       _SetLineColor
0003a2  b958              CBNZ     r0,|L1.956|
0003a4  b92f              CBNZ     r7,|L1.946|
0003a6  9902              LDR      r1,[sp,#8]            ;646
0003a8  1908              ADDS     r0,r1,r4              ;646
0003aa  4641              MOV      r1,r8                 ;646
0003ac  f7fffffe          BL       LCD_DrawPixel
0003b0  e004              B        |L1.956|
                  |L1.946|
0003b2  9802              LDR      r0,[sp,#8]            ;648
0003b4  1901              ADDS     r1,r0,r4              ;648
0003b6  4640              MOV      r0,r8                 ;648
0003b8  f7fffffe          BL       LCD_DrawPixel
                  |L1.956|
0003bc  1c64              ADDS     r4,r4,#1              ;641
                  |L1.958|
0003be  9801              LDR      r0,[sp,#4]            ;641
0003c0  4284              CMP      r4,r0                 ;641
0003c2  ddd3              BLE      |L1.876|
                  |L1.964|
0003c4  bf00              NOP      
0003c6  e76c              B        |L1.674|
;;;653    
                          ENDP

                  GL_DrawLine PROC
;;;337    */
;;;338    void GL_DrawLine(int x0, int y0, int x1, int y1) {
0003c8  e92d4ff0          PUSH     {r4-r11,lr}
0003cc  b089              SUB      sp,sp,#0x24
0003ce  4606              MOV      r6,r0
0003d0  460f              MOV      r7,r1
0003d2  4614              MOV      r4,r2
0003d4  461d              MOV      r5,r3
;;;339      if (GUI_Context.PenSize ==1) {
0003d6  4818              LDR      r0,|L1.1080|
0003d8  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
0003da  2801              CMP      r0,#1
0003dc  d106              BNE      |L1.1004|
;;;340        GL_DrawLine1(x0,y0,x1,y1);
0003de  462b              MOV      r3,r5
0003e0  4622              MOV      r2,r4
0003e2  4639              MOV      r1,r7
0003e4  4630              MOV      r0,r6
0003e6  f7fffffe          BL       GL_DrawLine1
0003ea  e084              B        |L1.1270|
                  |L1.1004|
;;;341      } else {
;;;342        int xdiff, ydiff;
;;;343        xdiff = x0-x1;
0003ec  1b30              SUBS     r0,r6,r4
0003ee  9008              STR      r0,[sp,#0x20]
;;;344        ydiff = y0-y1;
0003f0  1b78              SUBS     r0,r7,r5
0003f2  9007              STR      r0,[sp,#0x1c]
;;;345        if (xdiff | ydiff) {    
0003f4  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
0003f8  4308              ORRS     r0,r0,r1
0003fa  d07b              BEQ      |L1.1268|
;;;346          GUI_POINT Poly[4];
;;;347          int xOff, yOff;
;;;348          int xOffP, yOffP, xOffM, yOffM;
;;;349          _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
0003fc  ab01              ADD      r3,sp,#4
0003fe  9300              STR      r3,[sp,#0]
000400  4b0d              LDR      r3,|L1.1080|
000402  7d1b              LDRB     r3,[r3,#0x14]  ; GUI_Context
000404  1e5a              SUBS     r2,r3,#1
000406  1b79              SUBS     r1,r7,r5
000408  1b30              SUBS     r0,r6,r4
00040a  ab02              ADD      r3,sp,#8
00040c  f7fffffe          BL       _CalcOrto
;;;350      /* Do rounding for offsets */
;;;351          if (xOff >0) {
000410  9802              LDR      r0,[sp,#8]
000412  2800              CMP      r0,#0
000414  dd12              BLE      |L1.1084|
;;;352            xOffP = (xOff+1)/2;
000416  9902              LDR      r1,[sp,#8]
000418  1c48              ADDS     r0,r1,#1
00041a  eb0071d0          ADD      r1,r0,r0,LSR #31
00041e  ea4f0861          ASR      r8,r1,#1
;;;353            xOffM =  xOff   /2;
000422  9802              LDR      r0,[sp,#8]
000424  eb0071d0          ADD      r1,r0,r0,LSR #31
000428  ea4f0a61          ASR      r10,r1,#1
00042c  e011              B        |L1.1106|
00042e  0000              DCW      0x0000
                  |L1.1072|
                          DCD      aSin
                  |L1.1076|
                          DCD      aTan
                  |L1.1080|
                          DCD      GUI_Context
                  |L1.1084|
;;;354          } else {
;;;355            xOffP =   xOff/2;
00043c  9802              LDR      r0,[sp,#8]
00043e  eb0071d0          ADD      r1,r0,r0,LSR #31
000442  ea4f0861          ASR      r8,r1,#1
;;;356            xOffM =  (xOff-1)   /2;
000446  9902              LDR      r1,[sp,#8]
000448  1e48              SUBS     r0,r1,#1
00044a  eb0071d0          ADD      r1,r0,r0,LSR #31
00044e  ea4f0a61          ASR      r10,r1,#1
                  |L1.1106|
;;;357          }
;;;358          if (yOff >0) {
000452  9801              LDR      r0,[sp,#4]
000454  2800              CMP      r0,#0
000456  dd0b              BLE      |L1.1136|
;;;359            yOffP = (yOff+1)/2;
000458  9901              LDR      r1,[sp,#4]
00045a  1c48              ADDS     r0,r1,#1
00045c  eb0071d0          ADD      r1,r0,r0,LSR #31
000460  ea4f0961          ASR      r9,r1,#1
;;;360            yOffM =  yOff   /2;
000464  9801              LDR      r0,[sp,#4]
000466  eb0071d0          ADD      r1,r0,r0,LSR #31
00046a  ea4f0b61          ASR      r11,r1,#1
00046e  e00a              B        |L1.1158|
                  |L1.1136|
;;;361          } else {
;;;362            yOffP =   yOff/2;
000470  9801              LDR      r0,[sp,#4]
000472  eb0071d0          ADD      r1,r0,r0,LSR #31
000476  ea4f0961          ASR      r9,r1,#1
;;;363            yOffM =  (yOff-1)   /2;
00047a  9901              LDR      r1,[sp,#4]
00047c  1e48              SUBS     r0,r1,#1
00047e  eb0071d0          ADD      r1,r0,r0,LSR #31
000482  ea4f0b61          ASR      r11,r1,#1
                  |L1.1158|
;;;364          }
;;;365          Poly[0].x = x0+xOffP;
000486  eb060008          ADD      r0,r6,r8
00048a  b200              SXTH     r0,r0
00048c  f8ad000c          STRH     r0,[sp,#0xc]
;;;366          Poly[0].y = y0+yOffP;
000490  eb070009          ADD      r0,r7,r9
000494  b200              SXTH     r0,r0
000496  f8ad000e          STRH     r0,[sp,#0xe]
;;;367          Poly[1].x = x0-xOffM; 
00049a  eba6000a          SUB      r0,r6,r10
00049e  b200              SXTH     r0,r0
0004a0  f8ad0010          STRH     r0,[sp,#0x10]
;;;368          Poly[1].y = y0-yOffM; 
0004a4  eba7000b          SUB      r0,r7,r11
0004a8  b201              SXTH     r1,r0
0004aa  f8ad1012          STRH     r1,[sp,#0x12]
;;;369          Poly[2].x = x1-xOffM;
0004ae  eba4000a          SUB      r0,r4,r10
0004b2  b200              SXTH     r0,r0
0004b4  f8ad0014          STRH     r0,[sp,#0x14]
;;;370          Poly[2].y = y1-yOffM;
0004b8  eba5000b          SUB      r0,r5,r11
0004bc  b201              SXTH     r1,r0
0004be  f8ad1016          STRH     r1,[sp,#0x16]
;;;371          Poly[3].x = x1+xOffP; 
0004c2  eb040008          ADD      r0,r4,r8
0004c6  b200              SXTH     r0,r0
0004c8  f8ad0018          STRH     r0,[sp,#0x18]
;;;372          Poly[3].y = y1+yOffP;
0004cc  eb050009          ADD      r0,r5,r9
0004d0  b201              SXTH     r1,r0
0004d2  f8ad101a          STRH     r1,[sp,#0x1a]
;;;373          GL_FillPolygon(&Poly[0], 4, 0,0);
0004d6  2300              MOVS     r3,#0
0004d8  461a              MOV      r2,r3
0004da  2104              MOVS     r1,#4
0004dc  a803              ADD      r0,sp,#0xc
0004de  f7fffffe          BL       GL_FillPolygon
;;;374          _DrawLineEnd(x0,y0);
0004e2  4639              MOV      r1,r7
0004e4  4630              MOV      r0,r6
0004e6  f7fffffe          BL       _DrawLineEnd
;;;375          _DrawLineEnd(x1,y1);
0004ea  4629              MOV      r1,r5
0004ec  4620              MOV      r0,r4
0004ee  f7fffffe          BL       _DrawLineEnd
;;;376        }
0004f2  bf00              NOP      
                  |L1.1268|
;;;377      }
0004f4  bf00              NOP      
                  |L1.1270|
;;;378    }
0004f6  b009              ADD      sp,sp,#0x24
0004f8  e8bd8ff0          POP      {r4-r11,pc}
;;;379    
                          ENDP

                  GUI_DrawLine PROC
;;;383    */
;;;384    void GUI_DrawLine(int x0, int y0, int x1, int y1) {
0004fc  e92d41f0          PUSH     {r4-r8,lr}
000500  4604              MOV      r4,r0
000502  460d              MOV      r5,r1
000504  4616              MOV      r6,r2
000506  461f              MOV      r7,r3
;;;385      GUI_LOCK();
000508  f7fffffe          BL       GUI_Lock
;;;386      #if (GUI_WINSUPPORT)
;;;387        WM_ADDORG(x0,y0);
00050c  48bd              LDR      r0,|L1.2052|
00050e  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000510  4404              ADD      r4,r4,r0
000512  48bc              LDR      r0,|L1.2052|
000514  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000516  4405              ADD      r5,r5,r0
;;;388        WM_ADDORG(x1,y1);
000518  48ba              LDR      r0,|L1.2052|
00051a  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00051c  4406              ADD      r6,r6,r0
00051e  48b9              LDR      r0,|L1.2052|
000520  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000522  4407              ADD      r7,r7,r0
;;;389        WM_ITERATE_START(NULL); {
000524  2000              MOVS     r0,#0
000526  f7fffffe          BL       WM__InitIVRSearch
00052a  b150              CBZ      r0,|L1.1346|
00052c  bf00              NOP      
                  |L1.1326|
;;;390      #endif
;;;391      GL_DrawLine (x0, y0, x1, y1);
00052e  463b              MOV      r3,r7
000530  4632              MOV      r2,r6
000532  4629              MOV      r1,r5
000534  4620              MOV      r0,r4
000536  f7fffffe          BL       GL_DrawLine
;;;392      #if (GUI_WINSUPPORT)
;;;393        } WM_ITERATE_END();
00053a  f7fffffe          BL       WM__GetNextIVR
00053e  2800              CMP      r0,#0
000540  d1f5              BNE      |L1.1326|
                  |L1.1346|
;;;394      #endif
;;;395      GUI_UNLOCK();
000542  f7fffffe          BL       GUI_Unlock
;;;396    }
000546  e8bd81f0          POP      {r4-r8,pc}
;;;397    
                          ENDP

                  GL_DrawLineTo PROC
;;;469    */
;;;470    void GL_DrawLineTo(int x, int y) {
00054a  b570              PUSH     {r4-r6,lr}
00054c  4604              MOV      r4,r0
00054e  460d              MOV      r5,r1
;;;471      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
000550  4aac              LDR      r2,|L1.2052|
000552  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
000556  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
00055a  462b              MOV      r3,r5
00055c  4622              MOV      r2,r4
00055e  f7fffffe          BL       GL_DrawLine
;;;472      GUI_Context.DrawPosX = x;
000562  b220              SXTH     r0,r4
000564  49a7              LDR      r1,|L1.2052|
000566  84c8              STRH     r0,[r1,#0x26]
;;;473      GUI_Context.DrawPosY = y;
000568  b228              SXTH     r0,r5
00056a  8508              STRH     r0,[r1,#0x28]
;;;474    }
00056c  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP

                  GL_MoveTo PROC
;;;516    */
;;;517    void GL_MoveTo(int x, int y) {
00056e  b202              SXTH     r2,r0
;;;518      GUI_Context.DrawPosX = x;
000570  4ba4              LDR      r3,|L1.2052|
000572  84da              STRH     r2,[r3,#0x26]
;;;519      GUI_Context.DrawPosY = y;
000574  b20a              SXTH     r2,r1
000576  851a              STRH     r2,[r3,#0x28]
;;;520    }
000578  4770              BX       lr
;;;521    
                          ENDP

                  GL_DrawPolygon PROC
;;;401    */
;;;402    void GL_DrawPolygon(const GUI_POINT*pPoints, int NumPoints, int x0, int y0) {
00057a  e92d41f0          PUSH     {r4-r8,lr}
00057e  4604              MOV      r4,r0
000580  4688              MOV      r8,r1
000582  4616              MOV      r6,r2
000584  461f              MOV      r7,r3
;;;403      const GUI_POINT* pPoint = pPoints;
000586  4625              MOV      r5,r4
;;;404      GL_MoveTo(pPoint->x+x0, pPoint->y+y0);
000588  f9b52002          LDRSH    r2,[r5,#2]
00058c  19d1              ADDS     r1,r2,r7
00058e  f9b52000          LDRSH    r2,[r5,#0]
000592  1990              ADDS     r0,r2,r6
000594  f7fffffe          BL       GL_MoveTo
;;;405      while (--NumPoints >0) {
000598  e008              B        |L1.1452|
                  |L1.1434|
;;;406        pPoint++;
00059a  1d2d              ADDS     r5,r5,#4
;;;407        GL_DrawLineTo(pPoint->x+x0, pPoint->y+y0);
00059c  f9b52002          LDRSH    r2,[r5,#2]
0005a0  19d1              ADDS     r1,r2,r7
0005a2  f9b52000          LDRSH    r2,[r5,#0]
0005a6  1990              ADDS     r0,r2,r6
0005a8  f7fffffe          BL       GL_DrawLineTo
                  |L1.1452|
0005ac  f1a80001          SUB      r0,r8,#1              ;405
0005b0  f1b00800          SUBS     r8,r0,#0              ;405
0005b4  dcf1              BGT      |L1.1434|
;;;408      }
;;;409      /* Now draw closing line unless it has already been closed */
;;;410      if ( (pPoint->x != pPoints->x)
0005b6  f9b50000          LDRSH    r0,[r5,#0]
0005ba  f9b41000          LDRSH    r1,[r4,#0]
0005be  4288              CMP      r0,r1
0005c0  d105              BNE      |L1.1486|
;;;411         ||(pPoint->y != pPoints->y))
0005c2  f9b50002          LDRSH    r0,[r5,#2]
0005c6  f9b41002          LDRSH    r1,[r4,#2]
0005ca  4288              CMP      r0,r1
0005cc  d007              BEQ      |L1.1502|
                  |L1.1486|
;;;412      {
;;;413        GL_DrawLineTo(pPoints->x+x0, pPoints->y+y0);
0005ce  f9b42002          LDRSH    r2,[r4,#2]
0005d2  19d1              ADDS     r1,r2,r7
0005d4  f9b42000          LDRSH    r2,[r4,#0]
0005d8  1990              ADDS     r0,r2,r6
0005da  f7fffffe          BL       GL_DrawLineTo
                  |L1.1502|
;;;414      }
;;;415    }
0005de  e8bd81f0          POP      {r4-r8,pc}
;;;416    
                          ENDP

                  GUI_DrawPolygon PROC
;;;420    */
;;;421    void GUI_DrawPolygon(const GUI_POINT* pPoints, int NumPoints, int x0, int y0) {
0005e2  e92d41f0          PUSH     {r4-r8,lr}
0005e6  4606              MOV      r6,r0
0005e8  460f              MOV      r7,r1
0005ea  4614              MOV      r4,r2
0005ec  461d              MOV      r5,r3
;;;422      GUI_LOCK();
0005ee  f7fffffe          BL       GUI_Lock
;;;423      #if (GUI_WINSUPPORT)
;;;424        WM_ADDORG(x0,y0);
0005f2  4884              LDR      r0,|L1.2052|
0005f4  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0005f6  4404              ADD      r4,r4,r0
0005f8  4882              LDR      r0,|L1.2052|
0005fa  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0005fc  4405              ADD      r5,r5,r0
;;;425        WM_ITERATE_START(NULL); {
0005fe  2000              MOVS     r0,#0
000600  f7fffffe          BL       WM__InitIVRSearch
000604  b150              CBZ      r0,|L1.1564|
000606  bf00              NOP      
                  |L1.1544|
;;;426      #endif
;;;427      GL_DrawPolygon (pPoints, NumPoints, x0, y0);
000608  462b              MOV      r3,r5
00060a  4622              MOV      r2,r4
00060c  4639              MOV      r1,r7
00060e  4630              MOV      r0,r6
000610  f7fffffe          BL       GL_DrawPolygon
;;;428      #if (GUI_WINSUPPORT)
;;;429        } WM_ITERATE_END();
000614  f7fffffe          BL       WM__GetNextIVR
000618  2800              CMP      r0,#0
00061a  d1f5              BNE      |L1.1544|
                  |L1.1564|
;;;430      #endif
;;;431      GUI_UNLOCK();
00061c  f7fffffe          BL       GUI_Unlock
;;;432    }
000620  e8bd81f0          POP      {r4-r8,pc}
;;;433    
                          ENDP

                  GL_DrawLineRelNM PROC
;;;443    */
;;;444    static void GL_DrawLineRelNM(int dx, int dy) {
000624  b570              PUSH     {r4-r6,lr}
000626  4604              MOV      r4,r0
000628  460d              MOV      r5,r1
;;;445      GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY, 
00062a  4e76              LDR      r6,|L1.2052|
00062c  f9b66028          LDRSH    r6,[r6,#0x28]  ; GUI_Context
000630  1973              ADDS     r3,r6,r5
000632  4e74              LDR      r6,|L1.2052|
000634  f9b66026          LDRSH    r6,[r6,#0x26]  ; GUI_Context
000638  1932              ADDS     r2,r6,r4
00063a  4e72              LDR      r6,|L1.2052|
00063c  f9b61028          LDRSH    r1,[r6,#0x28]  ; GUI_Context
000640  f9b60026          LDRSH    r0,[r6,#0x26]  ; GUI_Context
000644  f7fffffe          BL       GL_DrawLine
;;;446                   GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy); 
;;;447    }
000648  bd70              POP      {r4-r6,pc}
;;;448    
                          ENDP

                  GUI_MoveRel PROC
;;;505    */
;;;506    void GUI_MoveRel(int dx, int dy) { /*tbd: GL_LinePos. */
00064a  b570              PUSH     {r4-r6,lr}
00064c  4605              MOV      r5,r0
00064e  460c              MOV      r4,r1
;;;507      GUI_LOCK();
000650  f7fffffe          BL       GUI_Lock
;;;508      GUI_Context.DrawPosX += dx;
000654  486b              LDR      r0,|L1.2052|
000656  8cc0              LDRH     r0,[r0,#0x26]  ; GUI_Context
000658  4428              ADD      r0,r0,r5
00065a  b200              SXTH     r0,r0
00065c  4969              LDR      r1,|L1.2052|
00065e  84c8              STRH     r0,[r1,#0x26]
;;;509      GUI_Context.DrawPosY += dy;
000660  4608              MOV      r0,r1
000662  8d00              LDRH     r0,[r0,#0x28]  ; GUI_Context
000664  4420              ADD      r0,r0,r4
000666  b200              SXTH     r0,r0
000668  8508              STRH     r0,[r1,#0x28]
;;;510      GUI_UNLOCK();
00066a  f7fffffe          BL       GUI_Unlock
;;;511    }
00066e  bd70              POP      {r4-r6,pc}
;;;512    
                          ENDP

                  GUI_DrawLineRel PROC
;;;452    */
;;;453    void GUI_DrawLineRel(int dx, int dy) {
000670  b570              PUSH     {r4-r6,lr}
000672  4604              MOV      r4,r0
000674  460d              MOV      r5,r1
;;;454      GUI_LOCK();
000676  f7fffffe          BL       GUI_Lock
;;;455      #if (GUI_WINSUPPORT)
;;;456        WM_ITERATE_START(NULL); {
00067a  2000              MOVS     r0,#0
00067c  f7fffffe          BL       WM__InitIVRSearch
000680  b140              CBZ      r0,|L1.1684|
000682  bf00              NOP      
                  |L1.1668|
;;;457      #endif
;;;458      GL_DrawLineRelNM(dx,dy);
000684  4629              MOV      r1,r5
000686  4620              MOV      r0,r4
000688  f7fffffe          BL       GL_DrawLineRelNM
;;;459      #if (GUI_WINSUPPORT)
;;;460        } WM_ITERATE_END();
00068c  f7fffffe          BL       WM__GetNextIVR
000690  2800              CMP      r0,#0
000692  d1f7              BNE      |L1.1668|
                  |L1.1684|
;;;461      #endif
;;;462      GUI_MoveRel(dx,dy);
000694  4629              MOV      r1,r5
000696  4620              MOV      r0,r4
000698  f7fffffe          BL       GUI_MoveRel
;;;463      GUI_UNLOCK();
00069c  f7fffffe          BL       GUI_Unlock
;;;464    }
0006a0  bd70              POP      {r4-r6,pc}
;;;465    
                          ENDP

                  GL_DrawLineToNM PROC
;;;479    */
;;;480    static void GL_DrawLineToNM(int x, int y) {
0006a2  b570              PUSH     {r4-r6,lr}
0006a4  4604              MOV      r4,r0
0006a6  460d              MOV      r5,r1
;;;481      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
0006a8  4a56              LDR      r2,|L1.2052|
0006aa  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
0006ae  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
0006b2  462b              MOV      r3,r5
0006b4  4622              MOV      r2,r4
0006b6  f7fffffe          BL       GL_DrawLine
;;;482    }
0006ba  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

                  GUI_DrawLineTo PROC
;;;487    */
;;;488    void GUI_DrawLineTo(int x, int y) {
0006bc  b570              PUSH     {r4-r6,lr}
0006be  4604              MOV      r4,r0
0006c0  460d              MOV      r5,r1
;;;489      GUI_LOCK();
0006c2  f7fffffe          BL       GUI_Lock
;;;490      #if (GUI_WINSUPPORT)
;;;491        WM_ADDORG(x,y);
0006c6  484f              LDR      r0,|L1.2052|
0006c8  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0006ca  4404              ADD      r4,r4,r0
0006cc  484d              LDR      r0,|L1.2052|
0006ce  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0006d0  4405              ADD      r5,r5,r0
;;;492        WM_ITERATE_START(NULL); {
0006d2  2000              MOVS     r0,#0
0006d4  f7fffffe          BL       WM__InitIVRSearch
0006d8  b140              CBZ      r0,|L1.1772|
0006da  bf00              NOP      
                  |L1.1756|
;;;493      #endif
;;;494      GL_DrawLineToNM(x,y);
0006dc  4629              MOV      r1,r5
0006de  4620              MOV      r0,r4
0006e0  f7fffffe          BL       GL_DrawLineToNM
;;;495      #if (GUI_WINSUPPORT)
;;;496        } WM_ITERATE_END();
0006e4  f7fffffe          BL       WM__GetNextIVR
0006e8  2800              CMP      r0,#0
0006ea  d1f7              BNE      |L1.1756|
                  |L1.1772|
;;;497      #endif
;;;498      GL_MoveTo(x,y);
0006ec  4629              MOV      r1,r5
0006ee  4620              MOV      r0,r4
0006f0  f7fffffe          BL       GL_MoveTo
;;;499      GUI_UNLOCK();
0006f4  f7fffffe          BL       GUI_Unlock
;;;500    }
0006f8  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

                  GUI_MoveTo PROC
;;;525    */
;;;526    void GUI_MoveTo(int x, int y) {
0006fa  b570              PUSH     {r4-r6,lr}
0006fc  4605              MOV      r5,r0
0006fe  460c              MOV      r4,r1
;;;527      GUI_LOCK();
000700  f7fffffe          BL       GUI_Lock
;;;528      #if (GUI_WINSUPPORT)
;;;529        WM_ADDORG(x,y);
000704  483f              LDR      r0,|L1.2052|
000706  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000708  4405              ADD      r5,r5,r0
00070a  483e              LDR      r0,|L1.2052|
00070c  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00070e  4404              ADD      r4,r4,r0
;;;530      #endif
;;;531      GL_MoveTo(x,y);
000710  4621              MOV      r1,r4
000712  4628              MOV      r0,r5
000714  f7fffffe          BL       GL_MoveTo
;;;532      GUI_UNLOCK();
000718  f7fffffe          BL       GUI_Unlock
;;;533    }
00071c  bd70              POP      {r4-r6,pc}
;;;534    
                          ENDP

                  _DrawRect PROC
;;;544    */
;;;545    static void _DrawRect(int x0, int y0, int x1, int y1) {
00071e  e92d41f0          PUSH     {r4-r8,lr}
000722  4607              MOV      r7,r0
000724  460d              MOV      r5,r1
000726  4616              MOV      r6,r2
000728  461c              MOV      r4,r3
;;;546      LCD_DrawHLine(x0, y0, x1);
00072a  4632              MOV      r2,r6
00072c  4629              MOV      r1,r5
00072e  4638              MOV      r0,r7
000730  f7fffffe          BL       LCD_DrawHLine
;;;547      LCD_DrawHLine(x0, y1, x1);
000734  4632              MOV      r2,r6
000736  4621              MOV      r1,r4
000738  4638              MOV      r0,r7
00073a  f7fffffe          BL       LCD_DrawHLine
;;;548      LCD_DrawVLine(x0, y0 + 1, y1 - 1);
00073e  1e62              SUBS     r2,r4,#1
000740  1c69              ADDS     r1,r5,#1
000742  4638              MOV      r0,r7
000744  f7fffffe          BL       LCD_DrawVLine
;;;549      LCD_DrawVLine(x1, y0 + 1, y1 - 1);
000748  1e62              SUBS     r2,r4,#1
00074a  1c69              ADDS     r1,r5,#1
00074c  4630              MOV      r0,r6
00074e  f7fffffe          BL       LCD_DrawVLine
;;;550    }
000752  e8bd81f0          POP      {r4-r8,pc}
;;;551    
                          ENDP

                  GUI_DrawRect PROC
;;;555    */
;;;556    void GUI_DrawRect(int x0, int y0, int x1, int y1) {
000756  e92d41fc          PUSH     {r2-r8,lr}
00075a  4605              MOV      r5,r0
00075c  460e              MOV      r6,r1
00075e  4617              MOV      r7,r2
000760  4698              MOV      r8,r3
;;;557      #if (GUI_WINSUPPORT)
;;;558        int Off;
;;;559        GUI_RECT r;
;;;560      #endif
;;;561      GUI_LOCK();
000762  f7fffffe          BL       GUI_Lock
;;;562      #if (GUI_WINSUPPORT)
;;;563        Off = GUI_Context.PenSize -1;
000766  4827              LDR      r0,|L1.2052|
000768  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
00076a  1e44              SUBS     r4,r0,#1
;;;564        WM_ADDORG(x0,y0);
00076c  4825              LDR      r0,|L1.2052|
00076e  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000770  4405              ADD      r5,r5,r0
000772  4824              LDR      r0,|L1.2052|
000774  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000776  4406              ADD      r6,r6,r0
;;;565        WM_ADDORG(x1,y1);
000778  4822              LDR      r0,|L1.2052|
00077a  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00077c  4407              ADD      r7,r7,r0
00077e  4821              LDR      r0,|L1.2052|
000780  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000782  4480              ADD      r8,r8,r0
;;;566        r.x0 = x0 - Off;
000784  1b28              SUBS     r0,r5,r4
000786  b200              SXTH     r0,r0
000788  f8ad0000          STRH     r0,[sp,#0]
;;;567        r.x1 = x1 + Off;
00078c  1938              ADDS     r0,r7,r4
00078e  b200              SXTH     r0,r0
000790  f8ad0004          STRH     r0,[sp,#4]
;;;568        r.y0 = y0 - Off;
000794  1b30              SUBS     r0,r6,r4
000796  b200              SXTH     r0,r0
000798  f8ad0002          STRH     r0,[sp,#2]
;;;569        r.y1 = y1 + Off;
00079c  eb080004          ADD      r0,r8,r4
0007a0  b200              SXTH     r0,r0
0007a2  f8ad0006          STRH     r0,[sp,#6]
;;;570        WM_ITERATE_START(&r); {
0007a6  4668              MOV      r0,sp
0007a8  f7fffffe          BL       WM__InitIVRSearch
0007ac  b150              CBZ      r0,|L1.1988|
0007ae  bf00              NOP      
                  |L1.1968|
;;;571      #endif
;;;572      _DrawRect(x0, y0, x1, y1);
0007b0  4643              MOV      r3,r8
0007b2  463a              MOV      r2,r7
0007b4  4631              MOV      r1,r6
0007b6  4628              MOV      r0,r5
0007b8  f7fffffe          BL       _DrawRect
;;;573      #if (GUI_WINSUPPORT)
;;;574        } WM_ITERATE_END();
0007bc  f7fffffe          BL       WM__GetNextIVR
0007c0  2800              CMP      r0,#0
0007c2  d1f5              BNE      |L1.1968|
                  |L1.1988|
;;;575      #endif
;;;576      GUI_UNLOCK();
0007c4  f7fffffe          BL       GUI_Unlock
;;;577    }
0007c8  e8bd81fc          POP      {r2-r8,pc}
;;;578    
                          ENDP

                  GUI_DrawPoint PROC
;;;675    */
;;;676    void GUI_DrawPoint(int x, int y) {
0007cc  b570              PUSH     {r4-r6,lr}
0007ce  4604              MOV      r4,r0
0007d0  460d              MOV      r5,r1
;;;677      GUI_LOCK();
0007d2  f7fffffe          BL       GUI_Lock
;;;678      #if (GUI_WINSUPPORT)
;;;679        WM_ADDORG(x, y);
0007d6  480b              LDR      r0,|L1.2052|
0007d8  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0007da  4404              ADD      r4,r4,r0
0007dc  4809              LDR      r0,|L1.2052|
0007de  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0007e0  4405              ADD      r5,r5,r0
;;;680        WM_ITERATE_START(NULL); {
0007e2  2000              MOVS     r0,#0
0007e4  f7fffffe          BL       WM__InitIVRSearch
0007e8  b140              CBZ      r0,|L1.2044|
0007ea  bf00              NOP      
                  |L1.2028|
;;;681      #endif
;;;682      GL_DrawPoint(x, y);
0007ec  4629              MOV      r1,r5
0007ee  4620              MOV      r0,r4
0007f0  f7fffffe          BL       GL_DrawPoint
;;;683      #if (GUI_WINSUPPORT)
;;;684        } WM_ITERATE_END();
0007f4  f7fffffe          BL       WM__GetNextIVR
0007f8  2800              CMP      r0,#0
0007fa  d1f7              BNE      |L1.2028|
                  |L1.2044|
;;;685      #endif
;;;686      GUI_UNLOCK();
0007fc  f7fffffe          BL       GUI_Unlock
;;;687    }
000800  bd70              POP      {r4-r6,pc}
;;;688    
                          ENDP

000802  0000              DCW      0x0000
                  |L1.2052|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aSin
000000  00000064          DCW      0x0000,0x0064
000004  00c80129          DCW      0x00c8,0x0129
000008  018801e3          DCW      0x0188,0x01e3
00000c  0239028a          DCW      0x0239,0x028a
000010  02d40318          DCW      0x02d4,0x0318
000014  03530387          DCW      0x0353,0x0387
000018  03b203d4          DCW      0x03b2,0x03d4
00001c  03ec03fb          DCW      0x03ec,0x03fb
000020  0400              DCW      0x0400
                  aTan
000022  0000              DCW      0x0000
000024  00290051          DCW      0x0029,0x0051
000028  007900a0          DCW      0x0079,0x00a0
00002c  00c500ea          DCW      0x00c5,0x00ea
000030  010d012e          DCW      0x010d,0x012e
000034  014e016c          DCW      0x014e,0x016c
000038  018901a3          DCW      0x0189,0x01a3
00003c  01bd01d5          DCW      0x01bd,0x01d5
000040  01eb0200          DCW      0x01eb,0x0200
