; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\edit.o --depend=.\Obj\edit.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\edit.crf ..\Ucgui\GUI\Widget\EDIT.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;151    */
;;;152    static void _Paint(EDIT_Obj* pObj, EDIT_Handle hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;153      GUI_RECT rFillRect, rInside, r, rText, rInvert;
;;;154      const char GUI_UNI_PTR * pText = NULL;
00000a  2600              MOVS     r6,#0
;;;155      int IsEnabled, CursorWidth;
;;;156      IsEnabled = WM__IsEnabled(hObj);
00000c  4648              MOV      r0,r9
00000e  f7fffffe          BL       WM__IsEnabled
000012  4682              MOV      r10,r0
;;;157      /* Set colors and font */
;;;158      LCD_SetBkColor(pObj->Props.aBkColor[IsEnabled]);
000014  f1040168          ADD      r1,r4,#0x68
000018  f851002a          LDR      r0,[r1,r10,LSL #2]
00001c  f7fffffe          BL       LCD_SetBkColor
;;;159      LCD_SetColor(pObj->Props.aTextColor[0]);
000020  6e20              LDR      r0,[r4,#0x60]
000022  f7fffffe          BL       LCD_SetColor
;;;160      GUI_SetFont(pObj->Props.pFont);
000026  6de0              LDR      r0,[r4,#0x5c]
000028  f7fffffe          BL       GUI_SetFont
;;;161      /* Calculate size */
;;;162      WM__GetClientRectWin(&pObj->Widget.Win, &r);
00002c  a907              ADD      r1,sp,#0x1c
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       WM__GetClientRectWin
;;;163      WIDGET__GetInsideRect(&pObj->Widget, &rFillRect);
000034  a90b              ADD      r1,sp,#0x2c
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       WIDGET__GetInsideRect
;;;164      if (pObj->hpText) {
00003c  8d20              LDRH     r0,[r4,#0x28]
00003e  b120              CBZ      r0,|L1.74|
;;;165        pText = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000040  f9b40028          LDRSH    r0,[r4,#0x28]
000044  f7fffffe          BL       GUI_ALLOC_h2p
000048  4606              MOV      r6,r0
                  |L1.74|
;;;166      }
;;;167      rInside = rFillRect;
00004a  e9dd010b          LDRD     r0,r1,[sp,#0x2c]
00004e  e9cd0109          STRD     r0,r1,[sp,#0x24]
;;;168      rInside.x0 += pObj->Props.Border + EDIT_XOFF;
000052  f8bd1024          LDRH     r1,[sp,#0x24]
000056  6da0              LDR      r0,[r4,#0x58]
000058  1c40              ADDS     r0,r0,#1
00005a  4408              ADD      r0,r0,r1
00005c  b200              SXTH     r0,r0
00005e  f8ad0024          STRH     r0,[sp,#0x24]
;;;169      rInside.x1 -= pObj->Props.Border + EDIT_XOFF;
000062  f8bd1028          LDRH     r1,[sp,#0x28]
000066  6da0              LDR      r0,[r4,#0x58]
000068  1c40              ADDS     r0,r0,#1
00006a  1a08              SUBS     r0,r1,r0
00006c  b200              SXTH     r0,r0
00006e  f8ad0028          STRH     r0,[sp,#0x28]
;;;170      GUI__CalcTextRect(pText, &rInside, &rText, pObj->Props.Align);
000072  aa05              ADD      r2,sp,#0x14
000074  a909              ADD      r1,sp,#0x24
000076  4630              MOV      r0,r6
000078  6d63              LDR      r3,[r4,#0x54]
00007a  f7fffffe          BL       GUI__CalcTextRect
;;;171      /* Calculate position and size of cursor */
;;;172      if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00007e  8ce0              LDRH     r0,[r4,#0x26]
000080  f0100f01          TST      r0,#1
000084  d05b              BEQ      |L1.318|
;;;173        const char GUI_UNI_PTR * p = pText;
000086  9602              STR      r6,[sp,#8]
;;;174        CursorWidth = ((pObj->XSizeCursor > 0) ? (pObj->XSizeCursor) : (1));
000088  f8940049          LDRB     r0,[r4,#0x49]
00008c  2800              CMP      r0,#0
00008e  dd02              BLE      |L1.150|
000090  f8940049          LDRB     r0,[r4,#0x49]
000094  e000              B        |L1.152|
                  |L1.150|
000096  2001              MOVS     r0,#1
                  |L1.152|
000098  4607              MOV      r7,r0
;;;175        if (pText) {
00009a  b3e6              CBZ      r6,|L1.278|
;;;176          U16 Char;
;;;177          int i;
;;;178    	//  pObj->SelSize = 3;	//houhh 20061023...
;;;179          if ((pObj->EditMode != GUI_EDIT_MODE_INSERT) || (pObj->SelSize)) {
00009c  f8940048          LDRB     r0,[r4,#0x48]
0000a0  b908              CBNZ     r0,|L1.166|
0000a2  6c60              LDR      r0,[r4,#0x44]
0000a4  b388              CBZ      r0,|L1.266|
                  |L1.166|
;;;180            int NumChars, CursorOffset;
;;;181            NumChars = GUI__GetNumChars(pText);
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       GUI__GetNumChars
0000ac  4683              MOV      r11,r0
;;;182            if (pObj->CursorPos < NumChars) {
0000ae  6c20              LDR      r0,[r4,#0x40]
0000b0  4558              CMP      r0,r11
0000b2  da29              BGE      |L1.264|
;;;183              if (pObj->SelSize) {
0000b4  6c60              LDR      r0,[r4,#0x44]
0000b6  b1c8              CBZ      r0,|L1.236|
;;;184                CursorWidth = 0;
0000b8  2700              MOVS     r7,#0
;;;185                for (i = pObj->CursorPos; i < (int)(pObj->CursorPos + pObj->SelSize); i++) {
0000ba  6c25              LDR      r5,[r4,#0x40]
0000bc  e00e              B        |L1.220|
                  |L1.190|
;;;186                  CursorOffset = GUI_UC__NumChars2NumBytes(pText, i);
0000be  4629              MOV      r1,r5
0000c0  4630              MOV      r0,r6
0000c2  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0000c6  4680              MOV      r8,r0
;;;187                  Char         = GUI_UC_GetCharCode      (pText + CursorOffset);
0000c8  eb060008          ADD      r0,r6,r8
0000cc  f7fffffe          BL       GUI_UC_GetCharCode
0000d0  9001              STR      r0,[sp,#4]
;;;188                  CursorWidth += GUI_GetCharDistX        (Char);
0000d2  9801              LDR      r0,[sp,#4]
0000d4  f7fffffe          BL       GUI_GetCharDistX
0000d8  4407              ADD      r7,r7,r0
0000da  1c6d              ADDS     r5,r5,#1              ;185
                  |L1.220|
0000dc  e9d40110          LDRD     r0,r1,[r4,#0x40]      ;185
0000e0  4408              ADD      r0,r0,r1              ;185
0000e2  42a8              CMP      r0,r5                 ;185
0000e4  dceb              BGT      |L1.190|
;;;189                }
;;;190                if (!CursorWidth) {
0000e6  b97f              CBNZ     r7,|L1.264|
;;;191                  CursorWidth = 1;
0000e8  2701              MOVS     r7,#1
0000ea  e00d              B        |L1.264|
                  |L1.236|
;;;192                }
;;;193              } else {
;;;194                CursorOffset = GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
0000ec  4630              MOV      r0,r6
0000ee  6c21              LDR      r1,[r4,#0x40]
0000f0  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0000f4  4680              MOV      r8,r0
;;;195                Char = GUI_UC_GetCharCode(pText + CursorOffset);
0000f6  eb060008          ADD      r0,r6,r8
0000fa  f7fffffe          BL       GUI_UC_GetCharCode
0000fe  9001              STR      r0,[sp,#4]
;;;196                CursorWidth = GUI_GetCharDistX(Char);
000100  9801              LDR      r0,[sp,#4]
000102  f7fffffe          BL       GUI_GetCharDistX
000106  4607              MOV      r7,r0
                  |L1.264|
;;;197              }
;;;198            }
;;;199          }
000108  bf00              NOP      
                  |L1.266|
;;;200          rInvert = rText;
00010a  e9dd0105          LDRD     r0,r1,[sp,#0x14]
00010e  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;201          for (i = 0; i != pObj->CursorPos; i++) {
000112  2500              MOVS     r5,#0
000114  e00e              B        |L1.308|
                  |L1.278|
000116  e011              B        |L1.316|
                  |L1.280|
;;;202            Char = GUI_UC__GetCharCodeInc(&p);
000118  a802              ADD      r0,sp,#8
00011a  f7fffffe          BL       GUI_UC__GetCharCodeInc
00011e  9001              STR      r0,[sp,#4]
;;;203            rInvert.x0 += GUI_GetCharDistX(Char);
000120  9801              LDR      r0,[sp,#4]
000122  f7fffffe          BL       GUI_GetCharDistX
000126  f8bd100c          LDRH     r1,[sp,#0xc]
00012a  4408              ADD      r0,r0,r1
00012c  b200              SXTH     r0,r0
00012e  f8ad000c          STRH     r0,[sp,#0xc]
000132  1c6d              ADDS     r5,r5,#1              ;201
                  |L1.308|
000134  6c20              LDR      r0,[r4,#0x40]         ;201
000136  42a8              CMP      r0,r5                 ;201
000138  d1ee              BNE      |L1.280|
;;;204          }
;;;205        }
00013a  bf00              NOP      
                  |L1.316|
;;;206      }
00013c  bf00              NOP      
                  |L1.318|
;;;207      /* WM loop */
;;;208      WM_ITERATE_START(NULL) {
00013e  2000              MOVS     r0,#0
000140  f7fffffe          BL       WM__InitIVRSearch
000144  b3f0              CBZ      r0,|L1.452|
000146  bf00              NOP      
                  |L1.328|
;;;209        /* Set clipping rectangle */
;;;210        WM_SetUserClipRect(&rFillRect);
000148  a80b              ADD      r0,sp,#0x2c
00014a  f7fffffe          BL       WM_SetUserClipRect
;;;211        /* Display text */
;;;212        WIDGET__FillStringInRect(pText, &rFillRect, &rInside, &rText);
00014e  ab05              ADD      r3,sp,#0x14
000150  aa09              ADD      r2,sp,#0x24
000152  a90b              ADD      r1,sp,#0x2c
000154  4630              MOV      r0,r6
000156  f7fffffe          BL       WIDGET__FillStringInRect
;;;213        /* Display cursor if needed */
;;;214        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00015a  8ce0              LDRH     r0,[r4,#0x26]
00015c  f0100f01          TST      r0,#1
000160  d043              BEQ      |L1.490|
;;;215    		///////////////houhh 20061020...
;;;216    		//  static GUI_TIMER_HANDLE Timer1 = NULL;	//houhh 20061018...
;;;217    		if(!Timer1){
000162  48f8              LDR      r0,|L1.1348|
000164  8800              LDRH     r0,[r0,#0]  ; Timer1
000166  b9b0              CBNZ     r0,|L1.406|
;;;218    			  Timer1 = GUI_TIMER_Create((GUI_TIMER_CALLBACK*)ShowCurrsor, 1000*2, 0, 0);	//houhh 20061018...
000168  2300              MOVS     r3,#0
00016a  461a              MOV      r2,r3
00016c  f44f61fa          MOV      r1,#0x7d0
000170  48f5              LDR      r0,|L1.1352|
000172  f7fffffe          BL       GUI_TIMER_Create
000176  49f3              LDR      r1,|L1.1348|
000178  8008              STRH     r0,[r1,#0]
;;;219    			  GUI_TIMER_SetTime(Timer1, 1000*2);
00017a  f44f61fa          MOV      r1,#0x7d0
00017e  48f1              LDR      r0,|L1.1348|
000180  f9b00000          LDRSH    r0,[r0,#0]  ; Timer1
000184  f7fffffe          BL       GUI_TIMER_SetTime
;;;220    			  GUI_TIMER_SetPeriod(Timer1, 500);
000188  f44f71fa          MOV      r1,#0x1f4
00018c  48ed              LDR      r0,|L1.1348|
00018e  f9b00000          LDRSH    r0,[r0,#0]  ; Timer1
000192  f7fffffe          BL       GUI_TIMER_SetPeriod
                  |L1.406|
;;;221    		  }
;;;222    		if(Timer1) GUI_TIMER_Context(Timer1, hObj);
000196  48eb              LDR      r0,|L1.1348|
000198  8800              LDRH     r0,[r0,#0]  ; Timer1
00019a  b128              CBZ      r0,|L1.424|
00019c  4649              MOV      r1,r9
00019e  48e9              LDR      r0,|L1.1348|
0001a0  f9b00000          LDRSH    r0,[r0,#0]  ; Timer1
0001a4  f7fffffe          BL       GUI_TIMER_Context
                  |L1.424|
;;;223    		if(pObj->CurrsorShow%2) //houhh 20061022...
0001a8  6f20              LDR      r0,[r4,#0x70]
0001aa  eb0071d0          ADD      r1,r0,r0,LSR #31
0001ae  1049              ASRS     r1,r1,#1
0001b0  ebb00141          SUBS     r1,r0,r1,LSL #1
0001b4  d00d              BEQ      |L1.466|
;;;224    		  GUI_InvertRect(rInvert.x0, rInvert.y0, rInvert.x0 + CursorWidth - 1, rInvert.y1);
0001b6  f9bd3012          LDRSH    r3,[sp,#0x12]
0001ba  f9bd500c          LDRSH    r5,[sp,#0xc]
0001be  443d              ADD      r5,r5,r7
0001c0  1e6a              SUBS     r2,r5,#1
0001c2  e000              B        |L1.454|
                  |L1.452|
0001c4  e01b              B        |L1.510|
                  |L1.454|
0001c6  f9bd100e          LDRSH    r1,[sp,#0xe]
0001ca  f9bd000c          LDRSH    r0,[sp,#0xc]
0001ce  f7fffffe          BL       GUI_InvertRect
                  |L1.466|
;;;225    		/////////////
;;;226    		GUI_InvertRect(rInvert.x0, rInvert.y0, rInvert.x0 + CursorWidth - 1, rInvert.y1);
0001d2  f9bd3012          LDRSH    r3,[sp,#0x12]
0001d6  f9bd500c          LDRSH    r5,[sp,#0xc]
0001da  443d              ADD      r5,r5,r7
0001dc  1e6a              SUBS     r2,r5,#1
0001de  f9bd100e          LDRSH    r1,[sp,#0xe]
0001e2  f9bd000c          LDRSH    r0,[sp,#0xc]
0001e6  f7fffffe          BL       GUI_InvertRect
                  |L1.490|
;;;227        }
;;;228        WM_SetUserClipRect(NULL);
0001ea  2000              MOVS     r0,#0
0001ec  f7fffffe          BL       WM_SetUserClipRect
;;;229        /* Draw the 3D effect (if configured) */
;;;230        WIDGET__EFFECT_DrawDown(&pObj->Widget);
0001f0  4620              MOV      r0,r4
0001f2  f7fffffe          BL       WIDGET__EFFECT_DrawDown
;;;231      } WM_ITERATE_END();
0001f6  f7fffffe          BL       WM__GetNextIVR
0001fa  2800              CMP      r0,#0
0001fc  d1a4              BNE      |L1.328|
                  |L1.510|
;;;232    }
0001fe  b00d              ADD      sp,sp,#0x34
000200  e8bd8ff0          POP      {r4-r11,pc}
;;;233    
                          ENDP

                  ShowCurrsor PROC
;;;132    
;;;133    void ShowCurrsor(GUI_TIMER_MESSAGE* TimeMsg)
000204  e92d41f0          PUSH     {r4-r8,lr}
;;;134    {
000208  4605              MOV      r5,r0
;;;135    	EDIT_Handle hObj = (EDIT_Handle) TimeMsg->Context;
00020a  6868              LDR      r0,[r5,#4]
00020c  b206              SXTH     r6,r0
;;;136    	EDIT_Obj*   pObj = (EDIT_Obj*) GUI_ALLOC_h2p(hObj);
00020e  4630              MOV      r0,r6
000210  f7fffffe          BL       GUI_ALLOC_h2p
000214  4604              MOV      r4,r0
;;;137    
;;;138        WM_Obj* pWin = WM_H2P(hObj);
000216  4630              MOV      r0,r6
000218  f7fffffe          BL       GUI_ALLOC_h2p
00021c  4607              MOV      r7,r0
;;;139    	GUI_DEBUG_LOG("EDIT: _Callback(WM_PAINT)\n");
;;;140        WM_SelectWindow(hObj);
00021e  4630              MOV      r0,r6
000220  f7fffffe          BL       WM_SelectWindow
;;;141    	_Paint(pObj, hObj);
000224  4631              MOV      r1,r6
000226  4620              MOV      r0,r4
000228  f7fffffe          BL       _Paint
;;;142    	pObj->CurrsorShow++;
00022c  6f20              LDR      r0,[r4,#0x70]
00022e  1c40              ADDS     r0,r0,#1
000230  6720              STR      r0,[r4,#0x70]
;;;143    	GUI_TIMER_Restart(Timer1);
000232  48c4              LDR      r0,|L1.1348|
000234  f9b00000          LDRSH    r0,[r0,#0]  ; Timer1
000238  f7fffffe          BL       GUI_TIMER_Restart
;;;144    
;;;145    }
00023c  e8bd81f0          POP      {r4-r8,pc}
;;;146    ///////
                          ENDP

                  _Delete PROC
;;;237    */
;;;238    static void _Delete(EDIT_Obj* pObj) {
000240  b510              PUSH     {r4,lr}
000242  4604              MOV      r4,r0
;;;239      GUI_ALLOC_FreePtr(&pObj->hpText);
000244  f1040028          ADD      r0,r4,#0x28
000248  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;240    }
00024c  bd10              POP      {r4,pc}
;;;241    
                          ENDP

                  EDIT__SetCursorPos PROC
;;;433    */
;;;434    void EDIT__SetCursorPos(EDIT_Obj* pObj, int CursorPos) {
00024e  e92d41f0          PUSH     {r4-r8,lr}
000252  4604              MOV      r4,r0
000254  460d              MOV      r5,r1
;;;435      if (pObj->hpText) {
000256  8d20              LDRH     r0,[r4,#0x28]
000258  b320              CBZ      r0,|L1.676|
;;;436        char* pText;
;;;437        int NumChars, Offset;
;;;438        pText    = (char*) GUI_ALLOC_h2p(pObj->hpText);
00025a  f9b40028          LDRSH    r0,[r4,#0x28]
00025e  f7fffffe          BL       GUI_ALLOC_h2p
000262  4680              MOV      r8,r0
;;;439        NumChars = GUI__GetNumChars(pText);
000264  4640              MOV      r0,r8
000266  f7fffffe          BL       GUI__GetNumChars
00026a  4606              MOV      r6,r0
;;;440        Offset   = (pObj->EditMode == GUI_EDIT_MODE_INSERT) ? 0 : 1;
00026c  f8940048          LDRB     r0,[r4,#0x48]
000270  b108              CBZ      r0,|L1.630|
000272  2001              MOVS     r0,#1
000274  e000              B        |L1.632|
                  |L1.630|
000276  2000              MOVS     r0,#0
                  |L1.632|
000278  4607              MOV      r7,r0
;;;441        if (CursorPos < 0) {
00027a  2d00              CMP      r5,#0
00027c  da00              BGE      |L1.640|
;;;442          CursorPos = 0;
00027e  2500              MOVS     r5,#0
                  |L1.640|
;;;443        }
;;;444        if (CursorPos > NumChars) {
000280  42b5              CMP      r5,r6
000282  dd00              BLE      |L1.646|
;;;445          CursorPos = NumChars;
000284  4635              MOV      r5,r6
                  |L1.646|
;;;446        }
;;;447        if (CursorPos > (pObj->MaxLen - Offset)) {
000286  f9b4002a          LDRSH    r0,[r4,#0x2a]
00028a  1bc0              SUBS     r0,r0,r7
00028c  42a8              CMP      r0,r5
00028e  da02              BGE      |L1.662|
;;;448          CursorPos = pObj->MaxLen - Offset;
000290  f9b4002a          LDRSH    r0,[r4,#0x2a]
000294  1bc5              SUBS     r5,r0,r7
                  |L1.662|
;;;449        }
;;;450        if (pObj->CursorPos != CursorPos) {
000296  6c20              LDR      r0,[r4,#0x40]
000298  42a8              CMP      r0,r5
00029a  d000              BEQ      |L1.670|
;;;451          pObj->CursorPos = CursorPos;
00029c  6425              STR      r5,[r4,#0x40]
                  |L1.670|
;;;452        }
;;;453        pObj->SelSize = 0;
00029e  2000              MOVS     r0,#0
0002a0  6460              STR      r0,[r4,#0x44]
;;;454      }
0002a2  bf00              NOP      
                  |L1.676|
;;;455    }
0002a4  e8bd81f0          POP      {r4-r8,pc}
;;;456    
                          ENDP

                  EDIT_SetCursorAtPixel PROC
;;;245    */
;;;246    void EDIT_SetCursorAtPixel(EDIT_Handle hObj, int xPos) {
0002a8  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
0002ac  b083              SUB      sp,sp,#0xc
0002ae  460c              MOV      r4,r1
;;;247      if (hObj) {
0002b0  9803              LDR      r0,[sp,#0xc]
0002b2  b3f0              CBZ      r0,|L1.818|
;;;248        EDIT_Obj* pObj;
;;;249        WM_LOCK();
0002b4  f7fffffe          BL       GUI_Lock
;;;250        pObj = EDIT_H2P(hObj);
0002b8  9803              LDR      r0,[sp,#0xc]
0002ba  f7fffffe          BL       GUI_ALLOC_h2p
0002be  4605              MOV      r5,r0
;;;251        if (pObj->hpText) {    
0002c0  8d28              LDRH     r0,[r5,#0x28]
0002c2  b3b8              CBZ      r0,|L1.820|
;;;252          const GUI_FONT GUI_UNI_PTR *pOldFont;
;;;253          int xSize, TextWidth, NumChars;
;;;254          const char GUI_UNI_PTR * pText;
;;;255          pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
0002c4  f9b50028          LDRSH    r0,[r5,#0x28]
0002c8  f7fffffe          BL       GUI_ALLOC_h2p
0002cc  9001              STR      r0,[sp,#4]
;;;256          pOldFont = GUI_SetFont(pObj->Props.pFont);
0002ce  6de8              LDR      r0,[r5,#0x5c]
0002d0  f7fffffe          BL       GUI_SetFont
0002d4  9002              STR      r0,[sp,#8]
;;;257          xSize = WM_GetWindowSizeX(hObj);
0002d6  9803              LDR      r0,[sp,#0xc]
0002d8  f7fffffe          BL       WM_GetWindowSizeX
0002dc  4683              MOV      r11,r0
;;;258          TextWidth = GUI_GetStringDistX(pText);
0002de  9801              LDR      r0,[sp,#4]
0002e0  f7fffffe          BL       GUI_GetStringDistX
0002e4  4680              MOV      r8,r0
;;;259          switch (pObj->Props.Align & GUI_TA_HORIZONTAL) {
0002e6  6d68              LDR      r0,[r5,#0x54]
0002e8  f0000003          AND      r0,r0,#3
0002ec  2801              CMP      r0,#1
0002ee  d009              BEQ      |L1.772|
0002f0  2802              CMP      r0,#2
0002f2  d10e              BNE      |L1.786|
;;;260          case GUI_TA_HCENTER:
;;;261            xPos -= (xSize - TextWidth + 1) / 2;
0002f4  ebab0108          SUB      r1,r11,r8
0002f8  1c48              ADDS     r0,r1,#1
0002fa  eb0071d0          ADD      r1,r0,r0,LSR #31
0002fe  eba40461          SUB      r4,r4,r1,ASR #1
;;;262            break;
000302  e00d              B        |L1.800|
                  |L1.772|
;;;263          case GUI_TA_RIGHT:
;;;264            xPos -= xSize - TextWidth - (pObj->Props.Border + EDIT_XOFF);
000304  ebab0108          SUB      r1,r11,r8
000308  6da8              LDR      r0,[r5,#0x58]
00030a  1c40              ADDS     r0,r0,#1
00030c  1a08              SUBS     r0,r1,r0
00030e  1a24              SUBS     r4,r4,r0
;;;265            break;
000310  e006              B        |L1.800|
                  |L1.786|
;;;266          default:
;;;267            xPos -= (pObj->Props.Border + EDIT_XOFF) + pObj->Widget.pEffect->EffectSize;
000312  6da8              LDR      r0,[r5,#0x58]
000314  1c40              ADDS     r0,r0,#1
000316  6a29              LDR      r1,[r5,#0x20]
000318  6949              LDR      r1,[r1,#0x14]
00031a  4408              ADD      r0,r0,r1
00031c  1a24              SUBS     r4,r4,r0
00031e  bf00              NOP                            ;259
                  |L1.800|
000320  bf00              NOP                            ;262
;;;268          }
;;;269          NumChars = GUI__GetNumChars(pText);
000322  9801              LDR      r0,[sp,#4]
000324  f7fffffe          BL       GUI__GetNumChars
000328  4606              MOV      r6,r0
;;;270          if (xPos < 0) {
00032a  2c00              CMP      r4,#0
00032c  da07              BGE      |L1.830|
;;;271            EDIT__SetCursorPos(pObj, 0);
00032e  2100              MOVS     r1,#0
000330  e001              B        |L1.822|
                  |L1.818|
000332  e033              B        |L1.924|
                  |L1.820|
000334  e02f              B        |L1.918|
                  |L1.822|
000336  4628              MOV      r0,r5
000338  f7fffffe          BL       EDIT__SetCursorPos
00033c  e024              B        |L1.904|
                  |L1.830|
;;;272          } else if (xPos > TextWidth) {
00033e  4544              CMP      r4,r8
000340  dd04              BLE      |L1.844|
;;;273            EDIT__SetCursorPos(pObj, NumChars);
000342  4631              MOV      r1,r6
000344  4628              MOV      r0,r5
000346  f7fffffe          BL       EDIT__SetCursorPos
00034a  e01d              B        |L1.904|
                  |L1.844|
;;;274          } else {
;;;275            int i, x, xLenChar;
;;;276            U16 Char;
;;;277            for (i = 0, x = 0; (i < NumChars) && (x < xPos); i++) {
00034c  f04f0900          MOV      r9,#0
000350  46ca              MOV      r10,r9
000352  e00f              B        |L1.884|
                  |L1.852|
;;;278              Char     = GUI_UC__GetCharCodeInc(&pText);
000354  a801              ADD      r0,sp,#4
000356  f7fffffe          BL       GUI_UC__GetCharCodeInc
00035a  9000              STR      r0,[sp,#0]
;;;279              xLenChar = GUI_GetCharDistX(Char);
00035c  9800              LDR      r0,[sp,#0]
00035e  f7fffffe          BL       GUI_GetCharDistX
000362  4607              MOV      r7,r0
;;;280              if (xPos < (x + xLenChar))
000364  eb0a0007          ADD      r0,r10,r7
000368  42a0              CMP      r0,r4
00036a  dd00              BLE      |L1.878|
;;;281                break;
00036c  e006              B        |L1.892|
                  |L1.878|
;;;282              x += xLenChar;
00036e  44ba              ADD      r10,r10,r7
000370  f1090901          ADD      r9,r9,#1              ;277
                  |L1.884|
000374  45b1              CMP      r9,r6                 ;277
000376  da01              BGE      |L1.892|
000378  45a2              CMP      r10,r4                ;277
00037a  dbeb              BLT      |L1.852|
                  |L1.892|
00037c  bf00              NOP                            ;281
;;;283            }
;;;284            EDIT__SetCursorPos(pObj, i);
00037e  4649              MOV      r1,r9
000380  4628              MOV      r0,r5
000382  f7fffffe          BL       EDIT__SetCursorPos
;;;285          }
000386  bf00              NOP      
                  |L1.904|
;;;286          GUI_SetFont(pOldFont);
000388  9802              LDR      r0,[sp,#8]
00038a  f7fffffe          BL       GUI_SetFont
;;;287          EDIT_Invalidate(hObj);
00038e  9803              LDR      r0,[sp,#0xc]
000390  f7fffffe          BL       WM_InvalidateWindow
;;;288        }
000394  bf00              NOP      
                  |L1.918|
;;;289        WM_UNLOCK();
000396  f7fffffe          BL       GUI_Unlock
;;;290      }
00039a  bf00              NOP      
                  |L1.924|
;;;291    }
00039c  b005              ADD      sp,sp,#0x14
00039e  e8bd8ff0          POP      {r4-r11,pc}
;;;292    
                          ENDP

                  _IncrementBuffer PROC
;;;298    */
;;;299    static int _IncrementBuffer(EDIT_Obj* pObj, unsigned AddBytes) {
0003a2  e92d41f0          PUSH     {r4-r8,lr}
0003a6  4604              MOV      r4,r0
0003a8  460e              MOV      r6,r1
;;;300      WM_HMEM hNew;
;;;301      int NewSize;
;;;302      NewSize = pObj->BufferSize + AddBytes;
0003aa  8da0              LDRH     r0,[r4,#0x2c]
0003ac  1987              ADDS     r7,r0,r6
;;;303      hNew    = GUI_ALLOC_Realloc(pObj->hpText, NewSize);
0003ae  f9b40028          LDRSH    r0,[r4,#0x28]
0003b2  4639              MOV      r1,r7
0003b4  f7fffffe          BL       GUI_ALLOC_Realloc
0003b8  4605              MOV      r5,r0
;;;304      if (hNew) {
0003ba  b175              CBZ      r5,|L1.986|
;;;305        if (!(pObj->hpText)) {
0003bc  8d20              LDRH     r0,[r4,#0x28]
0003be  b938              CBNZ     r0,|L1.976|
;;;306          char* pText;
;;;307          pText  = (char*) GUI_ALLOC_h2p(hNew);
0003c0  4628              MOV      r0,r5
0003c2  f7fffffe          BL       GUI_ALLOC_h2p
0003c6  4680              MOV      r8,r0
;;;308          *pText = 0;
0003c8  2000              MOVS     r0,#0
0003ca  f8880000          STRB     r0,[r8,#0]
;;;309        }
0003ce  bf00              NOP      
                  |L1.976|
;;;310        pObj->BufferSize = NewSize;
0003d0  85a7              STRH     r7,[r4,#0x2c]
;;;311        pObj->hpText     = hNew;
0003d2  8525              STRH     r5,[r4,#0x28]
;;;312        return 1;
0003d4  2001              MOVS     r0,#1
                  |L1.982|
;;;313      }
;;;314      return 0;
;;;315    }
0003d6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.986|
0003da  2000              MOVS     r0,#0                 ;314
0003dc  e7fb              B        |L1.982|
;;;316    
                          ENDP

                  _IsSpaceInBuffer PROC
;;;327    */
;;;328    static int _IsSpaceInBuffer(EDIT_Obj* pObj, int BytesNeeded) {
0003de  e92d41f0          PUSH     {r4-r8,lr}
0003e2  4604              MOV      r4,r0
0003e4  460d              MOV      r5,r1
;;;329      int NumBytes = 0;
0003e6  2600              MOVS     r6,#0
;;;330      if (pObj->hpText) {
0003e8  8d20              LDRH     r0,[r4,#0x28]
0003ea  b138              CBZ      r0,|L1.1020|
;;;331        NumBytes = strlen((char*)GUI_ALLOC_h2p(pObj->hpText));
0003ec  f9b40028          LDRSH    r0,[r4,#0x28]
0003f0  f7fffffe          BL       GUI_ALLOC_h2p
0003f4  4607              MOV      r7,r0
0003f6  f7fffffe          BL       strlen
0003fa  4606              MOV      r6,r0
                  |L1.1020|
;;;332      }
;;;333      BytesNeeded = (BytesNeeded + NumBytes + 1) - pObj->BufferSize;
0003fc  19a8              ADDS     r0,r5,r6
0003fe  1c40              ADDS     r0,r0,#1
000400  8da1              LDRH     r1,[r4,#0x2c]
000402  1a45              SUBS     r5,r0,r1
;;;334      if (BytesNeeded > 0) {
000404  2d00              CMP      r5,#0
000406  dd08              BLE      |L1.1050|
;;;335        if (!_IncrementBuffer(pObj, BytesNeeded + EDIT_REALLOC_SIZE)) {
000408  f1050110          ADD      r1,r5,#0x10
00040c  4620              MOV      r0,r4
00040e  f7fffffe          BL       _IncrementBuffer
000412  b910              CBNZ     r0,|L1.1050|
;;;336          return 0;
000414  2000              MOVS     r0,#0
                  |L1.1046|
;;;337        }
;;;338      }
;;;339      return 1;
;;;340    }
000416  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1050|
00041a  2001              MOVS     r0,#1                 ;339
00041c  e7fb              B        |L1.1046|
;;;341    
                          ENDP

                  _IsCharsAvailable PROC
;;;351    */
;;;352    static int _IsCharsAvailable(EDIT_Obj* pObj, int CharsNeeded) {
00041e  e92d41f0          PUSH     {r4-r8,lr}
000422  4604              MOV      r4,r0
000424  460d              MOV      r5,r1
;;;353      if ((CharsNeeded > 0) && (pObj->MaxLen > 0)) {
000426  2d00              CMP      r5,#0
000428  dd17              BLE      |L1.1114|
00042a  f9b4002a          LDRSH    r0,[r4,#0x2a]
00042e  2800              CMP      r0,#0
000430  dd13              BLE      |L1.1114|
;;;354        int NumChars = 0;
000432  2600              MOVS     r6,#0
;;;355        if (pObj->hpText) {
000434  8d20              LDRH     r0,[r4,#0x28]
000436  b138              CBZ      r0,|L1.1096|
;;;356          NumChars = GUI__GetNumChars((char*)GUI_ALLOC_h2p(pObj->hpText));
000438  f9b40028          LDRSH    r0,[r4,#0x28]
00043c  f7fffffe          BL       GUI_ALLOC_h2p
000440  4607              MOV      r7,r0
000442  f7fffffe          BL       GUI__GetNumChars
000446  4606              MOV      r6,r0
                  |L1.1096|
;;;357        }
;;;358        if ((CharsNeeded + NumChars) > pObj->MaxLen) {
000448  19a8              ADDS     r0,r5,r6
00044a  f9b4102a          LDRSH    r1,[r4,#0x2a]
00044e  4288              CMP      r0,r1
000450  dd02              BLE      |L1.1112|
;;;359          return 0;
000452  2000              MOVS     r0,#0
                  |L1.1108|
;;;360        }
;;;361      }
;;;362      return 1;
;;;363    }
000454  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1112|
000458  bf00              NOP                            ;361
                  |L1.1114|
00045a  2001              MOVS     r0,#1                 ;362
00045c  e7fa              B        |L1.1108|
;;;364    
                          ENDP

                  _DeleteChar PROC
;;;371    */
;;;372    static void _DeleteChar(EDIT_Handle hObj, EDIT_Obj* pObj) {
00045e  e92d41f0          PUSH     {r4-r8,lr}
000462  4607              MOV      r7,r0
000464  460c              MOV      r4,r1
;;;373      if (pObj->hpText) {
000466  8d20              LDRH     r0,[r4,#0x28]
000468  b1f0              CBZ      r0,|L1.1192|
;;;374        unsigned CursorOffset;
;;;375        char* pText;
;;;376        pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
00046a  f9b40028          LDRSH    r0,[r4,#0x28]
00046e  f7fffffe          BL       GUI_ALLOC_h2p
000472  4605              MOV      r5,r0
;;;377        CursorOffset = GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
000474  4628              MOV      r0,r5
000476  6c21              LDR      r1,[r4,#0x40]
000478  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00047c  4606              MOV      r6,r0
;;;378        if (CursorOffset < strlen(pText)) {
00047e  4628              MOV      r0,r5
000480  f7fffffe          BL       strlen
000484  42b0              CMP      r0,r6
000486  d90e              BLS      |L1.1190|
;;;379          int NumBytes;
;;;380          pText += CursorOffset;
000488  4435              ADD      r5,r5,r6
;;;381          NumBytes = GUI_UC_GetCharSize(pText);
00048a  4628              MOV      r0,r5
00048c  f7fffffe          BL       GUI_UC_GetCharSize
000490  4680              MOV      r8,r0
;;;382          strcpy(pText, pText + NumBytes);
000492  eb050108          ADD      r1,r5,r8
000496  4628              MOV      r0,r5
000498  f7fffffe          BL       strcpy
;;;383          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00049c  2105              MOVS     r1,#5
00049e  4638              MOV      r0,r7
0004a0  f7fffffe          BL       WM_NotifyParent
;;;384        }
0004a4  bf00              NOP      
                  |L1.1190|
;;;385      }
0004a6  bf00              NOP      
                  |L1.1192|
;;;386    }
0004a8  e8bd81f0          POP      {r4-r8,pc}
;;;387    
                          ENDP

                  _InsertChar PROC
;;;393    */
;;;394    static int _InsertChar(EDIT_Handle hObj, EDIT_Obj* pObj, U16 Char) {
0004ac  e92d47f0          PUSH     {r4-r10,lr}
0004b0  4680              MOV      r8,r0
0004b2  460c              MOV      r4,r1
0004b4  4616              MOV      r6,r2
;;;395      if (_IsCharsAvailable(pObj, 1)) {
0004b6  2101              MOVS     r1,#1
0004b8  4620              MOV      r0,r4
0004ba  f7fffffe          BL       _IsCharsAvailable
0004be  b348              CBZ      r0,|L1.1300|
;;;396        int BytesNeeded;
;;;397        BytesNeeded = GUI_UC__CalcSizeOfChar(Char);
0004c0  4630              MOV      r0,r6
0004c2  f7fffffe          BL       GUI_UC__CalcSizeOfChar
0004c6  4607              MOV      r7,r0
;;;398        if (_IsSpaceInBuffer(pObj, BytesNeeded)) {
0004c8  4639              MOV      r1,r7
0004ca  4620              MOV      r0,r4
0004cc  f7fffffe          BL       _IsSpaceInBuffer
0004d0  b1f8              CBZ      r0,|L1.1298|
;;;399          int CursorOffset;
;;;400          char* pText;
;;;401          pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
0004d2  f9b40028          LDRSH    r0,[r4,#0x28]
0004d6  f7fffffe          BL       GUI_ALLOC_h2p
0004da  4605              MOV      r5,r0
;;;402          CursorOffset = GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
0004dc  4628              MOV      r0,r5
0004de  6c21              LDR      r1,[r4,#0x40]
0004e0  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0004e4  4681              MOV      r9,r0
;;;403          pText += CursorOffset;
0004e6  444d              ADD      r5,r5,r9
;;;404          memmove(pText + BytesNeeded, pText, strlen(pText) + 1);
0004e8  4628              MOV      r0,r5
0004ea  f7fffffe          BL       strlen
0004ee  f1000a01          ADD      r10,r0,#1
0004f2  19e8              ADDS     r0,r5,r7
0004f4  4652              MOV      r2,r10
0004f6  4629              MOV      r1,r5
0004f8  f7fffffe          BL       __aeabi_memmove
;;;405          GUI_UC_Encode(pText, Char);
0004fc  4631              MOV      r1,r6
0004fe  4628              MOV      r0,r5
000500  f7fffffe          BL       GUI_UC_Encode
;;;406          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000504  2105              MOVS     r1,#5
000506  4640              MOV      r0,r8
000508  f7fffffe          BL       WM_NotifyParent
;;;407          return 1;
00050c  2001              MOVS     r0,#1
                  |L1.1294|
;;;408        }
;;;409      }
;;;410      return 0;
;;;411    }
00050e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1298|
000512  bf00              NOP                            ;409
                  |L1.1300|
000514  2000              MOVS     r0,#0                 ;410
000516  e7fa              B        |L1.1294|
;;;412    
                          ENDP

                  EDIT__GetCurrentChar PROC
;;;416    */
;;;417    U16 EDIT__GetCurrentChar(EDIT_Obj* pObj) {
000518  b570              PUSH     {r4-r6,lr}
00051a  4604              MOV      r4,r0
;;;418      U16 Char = 0;
00051c  2600              MOVS     r6,#0
;;;419      if (pObj->hpText) {
00051e  8d20              LDRH     r0,[r4,#0x28]
000520  b170              CBZ      r0,|L1.1344|
;;;420        const char* pText;
;;;421        pText  = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000522  f9b40028          LDRSH    r0,[r4,#0x28]
000526  f7fffffe          BL       GUI_ALLOC_h2p
00052a  4605              MOV      r5,r0
;;;422        pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
00052c  4628              MOV      r0,r5
00052e  6c21              LDR      r1,[r4,#0x40]
000530  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000534  4405              ADD      r5,r5,r0
;;;423        Char   = GUI_UC_GetCharCode(pText);
000536  4628              MOV      r0,r5
000538  f7fffffe          BL       GUI_UC_GetCharCode
00053c  4606              MOV      r6,r0
;;;424      }
00053e  bf00              NOP      
                  |L1.1344|
;;;425      return Char;
000540  4630              MOV      r0,r6
;;;426    }
000542  bd70              POP      {r4-r6,pc}
                  |L1.1348|
                          DCD      Timer1
                  |L1.1352|
                          DCD      ShowCurrsor
                          ENDP

                  _OnTouch PROC
;;;460    */
;;;461    static void _OnTouch(EDIT_Handle hObj, EDIT_Obj* pObj, WM_MESSAGE*pMsg) {
00054c  e92d41f0          PUSH     {r4-r8,lr}
000550  4607              MOV      r7,r0
000552  460c              MOV      r4,r1
000554  4615              MOV      r5,r2
;;;462      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000556  68ae              LDR      r6,[r5,#8]
;;;463      GUI_USE_PARA(pObj);
000558  bf00              NOP      
;;;464      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00055a  68a8              LDR      r0,[r5,#8]
00055c  b140              CBZ      r0,|L1.1392|
;;;465    	  static int StartPress = 0;	//houhh 20061023...
;;;466        if (pState->Pressed) {
00055e  7a30              LDRB     r0,[r6,#8]
000560  b130              CBZ      r0,|L1.1392|
;;;467          GUI_DEBUG_LOG1("EDIT__Callback(WM_TOUCH, Pressed, Handle %d)\n",1);
;;;468          EDIT_SetCursorAtPixel(hObj, pState->x);
000562  4638              MOV      r0,r7
000564  6831              LDR      r1,[r6,#0]
000566  f7fffffe          BL       EDIT_SetCursorAtPixel
;;;469    	  StartPress = pObj->CursorPos;	//houhh 20061023...
00056a  49f8              LDR      r1,|L1.2380|
00056c  6c20              LDR      r0,[r4,#0x40]
00056e  6008              STR      r0,[r1,#0]  ; StartPress
                  |L1.1392|
;;;470        } else {
;;;471          GUI_DEBUG_LOG1("EDIT__Callback(WM_TOUCH, Released, Handle %d)\n",1);
;;;472        }
;;;473      } else {
;;;474        GUI_DEBUG_LOG1("_EDIT_Callback(WM_TOUCH, Moved out, Handle %d)\n",1);
;;;475      }
;;;476    }
000570  e8bd81f0          POP      {r4-r8,pc}
;;;477    
                          ENDP

                  EDIT_AddKey PROC
;;;572    */
;;;573    void EDIT_AddKey(EDIT_Handle hObj, int Key) {
000574  e92d41f0          PUSH     {r4-r8,lr}
000578  4607              MOV      r7,r0
00057a  460d              MOV      r5,r1
;;;574      if (hObj) {
00057c  b3f7              CBZ      r7,|L1.1532|
;;;575        EDIT_Obj* pObj;
;;;576        WM_LOCK();
00057e  f7fffffe          BL       GUI_Lock
;;;577        pObj = EDIT_H2P(hObj);
000582  4638              MOV      r0,r7
000584  f7fffffe          BL       GUI_ALLOC_h2p
000588  4604              MOV      r4,r0
;;;578        if (pObj) {
00058a  b3c4              CBZ      r4,|L1.1534|
;;;579          if (pObj->pfAddKeyEx) {
00058c  6ce0              LDR      r0,[r4,#0x4c]
00058e  b120              CBZ      r0,|L1.1434|
;;;580            pObj->pfAddKeyEx(hObj, Key);
000590  4629              MOV      r1,r5
000592  4638              MOV      r0,r7
000594  6ce2              LDR      r2,[r4,#0x4c]
000596  4790              BLX      r2
000598  e094              B        |L1.1732|
                  |L1.1434|
;;;581          } else {
;;;582            switch (Key) {
00059a  2d12              CMP      r5,#0x12
00059c  d04c              BEQ      |L1.1592|
00059e  dc08              BGT      |L1.1458|
0005a0  2d08              CMP      r5,#8
0005a2  d055              BEQ      |L1.1616|
0005a4  2d0d              CMP      r5,#0xd
0005a6  d075              BEQ      |L1.1684|
0005a8  2d10              CMP      r5,#0x10
0005aa  d04b              BEQ      |L1.1604|
0005ac  2d11              CMP      r5,#0x11
0005ae  d173              BNE      |L1.1688|
0005b0  e008              B        |L1.1476|
                  |L1.1458|
0005b2  2d13              CMP      r5,#0x13
0005b4  d024              BEQ      |L1.1536|
0005b6  2d1b              CMP      r5,#0x1b
0005b8  d06d              BEQ      |L1.1686|
0005ba  2d1d              CMP      r5,#0x1d
0005bc  d057              BEQ      |L1.1646|
0005be  2d1e              CMP      r5,#0x1e
0005c0  d16a              BNE      |L1.1688|
0005c2  e04f              B        |L1.1636|
                  |L1.1476|
;;;583            case GUI_KEY_UP:
;;;584              if (pObj->hpText) {
0005c4  8d20              LDRH     r0,[r4,#0x28]
0005c6  b1c0              CBZ      r0,|L1.1530|
;;;585                char* pText;
;;;586                U16 Char;
;;;587                pText  = (char*) GUI_ALLOC_h2p(pObj->hpText);
0005c8  f9b40028          LDRSH    r0,[r4,#0x28]
0005cc  f7fffffe          BL       GUI_ALLOC_h2p
0005d0  4606              MOV      r6,r0
;;;588                pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
0005d2  4630              MOV      r0,r6
0005d4  6c21              LDR      r1,[r4,#0x40]
0005d6  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0005da  4406              ADD      r6,r6,r0
;;;589                Char   = GUI_UC_GetCharCode(pText);
0005dc  4630              MOV      r0,r6
0005de  f7fffffe          BL       GUI_UC_GetCharCode
0005e2  4680              MOV      r8,r0
;;;590                if (Char < 0x7f) {  
0005e4  f1b80f7f          CMP      r8,#0x7f
0005e8  da06              BGE      |L1.1528|
;;;591                  *pText = Char + 1;
0005ea  f1080001          ADD      r0,r8,#1
0005ee  7030              STRB     r0,[r6,#0]
;;;592                  WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
0005f0  2105              MOVS     r1,#5
0005f2  4638              MOV      r0,r7
0005f4  f7fffffe          BL       WM_NotifyParent
                  |L1.1528|
;;;593                }
;;;594              }
0005f8  bf00              NOP      
                  |L1.1530|
;;;595              break;
0005fa  e062              B        |L1.1730|
                  |L1.1532|
0005fc  e068              B        |L1.1744|
                  |L1.1534|
0005fe  e064              B        |L1.1738|
                  |L1.1536|
;;;596            case GUI_KEY_DOWN:
;;;597              if (pObj->hpText) {
000600  8d20              LDRH     r0,[r4,#0x28]
000602  b1c0              CBZ      r0,|L1.1590|
;;;598                char* pText;
;;;599                U16 Char;
;;;600                pText  = (char*) GUI_ALLOC_h2p(pObj->hpText);
000604  f9b40028          LDRSH    r0,[r4,#0x28]
000608  f7fffffe          BL       GUI_ALLOC_h2p
00060c  4606              MOV      r6,r0
;;;601                pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
00060e  4630              MOV      r0,r6
000610  6c21              LDR      r1,[r4,#0x40]
000612  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000616  4406              ADD      r6,r6,r0
;;;602                Char   = GUI_UC_GetCharCode(pText);
000618  4630              MOV      r0,r6
00061a  f7fffffe          BL       GUI_UC_GetCharCode
00061e  4680              MOV      r8,r0
;;;603                if (Char > 0x20) {  
000620  f1b80f20          CMP      r8,#0x20
000624  dd06              BLE      |L1.1588|
;;;604                  *pText = Char - 1;
000626  f1a80001          SUB      r0,r8,#1
00062a  7030              STRB     r0,[r6,#0]
;;;605                  WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00062c  2105              MOVS     r1,#5
00062e  4638              MOV      r0,r7
000630  f7fffffe          BL       WM_NotifyParent
                  |L1.1588|
;;;606                }
;;;607              }
000634  bf00              NOP      
                  |L1.1590|
;;;608              break;
000636  e044              B        |L1.1730|
                  |L1.1592|
;;;609            case GUI_KEY_RIGHT:
;;;610              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000638  6c20              LDR      r0,[r4,#0x40]
00063a  1c41              ADDS     r1,r0,#1
00063c  4620              MOV      r0,r4
00063e  f7fffffe          BL       EDIT__SetCursorPos
;;;611              break;
000642  e03e              B        |L1.1730|
                  |L1.1604|
;;;612            case GUI_KEY_LEFT:
;;;613              EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000644  6c20              LDR      r0,[r4,#0x40]
000646  1e41              SUBS     r1,r0,#1
000648  4620              MOV      r0,r4
00064a  f7fffffe          BL       EDIT__SetCursorPos
;;;614              break;
00064e  e038              B        |L1.1730|
                  |L1.1616|
;;;615            case GUI_KEY_BACKSPACE:
;;;616              EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000650  6c20              LDR      r0,[r4,#0x40]
000652  1e41              SUBS     r1,r0,#1
000654  4620              MOV      r0,r4
000656  f7fffffe          BL       EDIT__SetCursorPos
;;;617              _DeleteChar(hObj, pObj);
00065a  4621              MOV      r1,r4
00065c  4638              MOV      r0,r7
00065e  f7fffffe          BL       _DeleteChar
;;;618              break;
000662  e02e              B        |L1.1730|
                  |L1.1636|
;;;619            case GUI_KEY_DELETE:
;;;620              _DeleteChar(hObj, pObj);
000664  4621              MOV      r1,r4
000666  4638              MOV      r0,r7
000668  f7fffffe          BL       _DeleteChar
;;;621              break;
00066c  e029              B        |L1.1730|
                  |L1.1646|
;;;622            case GUI_KEY_INSERT:
;;;623              if (pObj->EditMode == GUI_EDIT_MODE_OVERWRITE) {
00066e  f8940048          LDRB     r0,[r4,#0x48]
000672  2801              CMP      r0,#1
000674  d103              BNE      |L1.1662|
;;;624                pObj->EditMode = GUI_EDIT_MODE_INSERT;
000676  2000              MOVS     r0,#0
000678  f8840048          STRB     r0,[r4,#0x48]
00067c  e006              B        |L1.1676|
                  |L1.1662|
;;;625              } else {
;;;626                pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
00067e  2001              MOVS     r0,#1
000680  f8840048          STRB     r0,[r4,#0x48]
;;;627                EDIT__SetCursorPos(pObj, pObj->CursorPos);
000684  4620              MOV      r0,r4
000686  6c21              LDR      r1,[r4,#0x40]
000688  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.1676|
;;;628              }
;;;629              break;
00068c  e019              B        |L1.1730|
00068e  e001              B        |L1.1684|
000690  e002              B        |L1.1688|
000692  e000              B        |L1.1686|
                  |L1.1684|
;;;630            case GUI_KEY_ENTER:
;;;631            case GUI_KEY_ESCAPE:
000694  bf00              NOP      
                  |L1.1686|
;;;632              break;
000696  e014              B        |L1.1730|
                  |L1.1688|
;;;633            default:
;;;634              if (Key >= 0x20) {
000698  2d20              CMP      r5,#0x20
00069a  db11              BLT      |L1.1728|
;;;635                if (pObj->EditMode != GUI_EDIT_MODE_INSERT) {
00069c  f8940048          LDRB     r0,[r4,#0x48]
0006a0  b118              CBZ      r0,|L1.1706|
;;;636                  _DeleteChar(hObj, pObj);
0006a2  4621              MOV      r1,r4
0006a4  4638              MOV      r0,r7
0006a6  f7fffffe          BL       _DeleteChar
                  |L1.1706|
;;;637                }
;;;638                if (_InsertChar(hObj, pObj, Key)) {
0006aa  b2aa              UXTH     r2,r5
0006ac  4621              MOV      r1,r4
0006ae  4638              MOV      r0,r7
0006b0  f7fffffe          BL       _InsertChar
0006b4  b120              CBZ      r0,|L1.1728|
;;;639                  EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
0006b6  6c20              LDR      r0,[r4,#0x40]
0006b8  1c41              ADDS     r1,r0,#1
0006ba  4620              MOV      r0,r4
0006bc  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.1728|
0006c0  bf00              NOP                            ;582
                  |L1.1730|
0006c2  bf00              NOP                            ;595
                  |L1.1732|
;;;640                }
;;;641              }
;;;642            }
;;;643          }
;;;644          EDIT_Invalidate(hObj);
0006c4  4638              MOV      r0,r7
0006c6  f7fffffe          BL       WM_InvalidateWindow
                  |L1.1738|
;;;645        }
;;;646        WM_UNLOCK();
0006ca  f7fffffe          BL       GUI_Unlock
;;;647      }
0006ce  bf00              NOP      
                  |L1.1744|
;;;648    }
0006d0  e8bd81f0          POP      {r4-r8,pc}
;;;649    
                          ENDP

                  EDIT__Callback PROC
;;;481    */
;;;482    static void EDIT__Callback (WM_MESSAGE * pMsg) {
0006d4  e92d41f0          PUSH     {r4-r8,lr}
0006d8  4604              MOV      r4,r0
;;;483      int IsEnabled;
;;;484      EDIT_Handle hObj = (EDIT_Handle) pMsg->hWin;
0006da  f9b45004          LDRSH    r5,[r4,#4]
;;;485      EDIT_Obj*   pObj = (EDIT_Obj*) GUI_ALLOC_h2p(hObj);
0006de  4628              MOV      r0,r5
0006e0  f7fffffe          BL       GUI_ALLOC_h2p
0006e4  4680              MOV      r8,r0
;;;486      IsEnabled = WM__IsEnabled(hObj);
0006e6  4628              MOV      r0,r5
0006e8  f7fffffe          BL       WM__IsEnabled
0006ec  4607              MOV      r7,r0
;;;487      /* Let widget handle the standard messages */
;;;488      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0006ee  4621              MOV      r1,r4
0006f0  4628              MOV      r0,r5
0006f2  f7fffffe          BL       WIDGET_HandleActive
0006f6  b908              CBNZ     r0,|L1.1788|
                  |L1.1784|
;;;489        return;
;;;490      }
;;;491      switch (pMsg->MsgId) {
;;;492      case WM_TOUCH:
;;;493        _OnTouch(hObj, pObj, pMsg);
;;;494        break;
;;;495      case WM_PAINT:
;;;496        GUI_DEBUG_LOG("EDIT: _Callback(WM_PAINT)\n");
;;;497        _Paint(pObj, hObj);
;;;498        return;
;;;499      case WM_DELETE:
;;;500        GUI_DEBUG_LOG("EDIT: _Callback(WM_DELETE)\n");
;;;501        _Delete(pObj);
;;;502        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;503      case WM_KEY:
;;;504        if (IsEnabled) {
;;;505          if ( ((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt >0) {
;;;506            int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;507            switch (Key) {
;;;508              case GUI_KEY_TAB:
;;;509                break;                    /* Send to parent by not doing anything */
;;;510              default:
;;;511                EDIT_AddKey(hObj, Key);
;;;512                return;
;;;513            }
;;;514          }
;;;515        }
;;;516        break;
;;;517      }
;;;518      WM_DefaultProc(pMsg);
;;;519    }
0006f8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1788|
0006fc  6820              LDR      r0,[r4,#0]            ;491
0006fe  280b              CMP      r0,#0xb               ;491
000700  d011              BEQ      |L1.1830|
000702  280c              CMP      r0,#0xc               ;491
000704  d004              BEQ      |L1.1808|
000706  280e              CMP      r0,#0xe               ;491
000708  d011              BEQ      |L1.1838|
00070a  280f              CMP      r0,#0xf               ;491
00070c  d121              BNE      |L1.1874|
00070e  e005              B        |L1.1820|
                  |L1.1808|
000710  4622              MOV      r2,r4                 ;493
000712  4641              MOV      r1,r8                 ;493
000714  4628              MOV      r0,r5                 ;493
000716  f7fffffe          BL       _OnTouch
00071a  e01a              B        |L1.1874|
                  |L1.1820|
00071c  4629              MOV      r1,r5                 ;497
00071e  4640              MOV      r0,r8                 ;497
000720  f7fffffe          BL       _Paint
000724  e7e8              B        |L1.1784|
                  |L1.1830|
000726  4640              MOV      r0,r8                 ;501
000728  f7fffffe          BL       _Delete
00072c  e011              B        |L1.1874|
                  |L1.1838|
00072e  b17f              CBZ      r7,|L1.1872|
000730  68a0              LDR      r0,[r4,#8]            ;505
000732  6840              LDR      r0,[r0,#4]            ;505
000734  2800              CMP      r0,#0                 ;505
000736  dd0b              BLE      |L1.1872|
000738  68a0              LDR      r0,[r4,#8]            ;506
00073a  6806              LDR      r6,[r0,#0]            ;506
00073c  2e09              CMP      r6,#9                 ;507
00073e  d100              BNE      |L1.1858|
000740  e004              B        |L1.1868|
                  |L1.1858|
000742  4631              MOV      r1,r6                 ;511
000744  4628              MOV      r0,r5                 ;511
000746  f7fffffe          BL       EDIT_AddKey
00074a  e7d5              B        |L1.1784|
                  |L1.1868|
00074c  bf00              NOP                            ;509
00074e  bf00              NOP                            ;514
                  |L1.1872|
000750  bf00              NOP                            ;516
                  |L1.1874|
000752  bf00              NOP                            ;494
000754  4620              MOV      r0,r4                 ;518
000756  f7fffffe          BL       WM_DefaultProc
00075a  bf00              NOP      
00075c  e7cc              B        |L1.1784|
;;;520    
                          ENDP

                  EDIT_CreateEx PROC
;;;530    */
;;;531    EDIT_Handle EDIT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags,
00075e  e92d4fff          PUSH     {r0-r11,lr}
;;;532                              int Id, int MaxLen)
;;;533    {
000762  b085              SUB      sp,sp,#0x14
000764  4607              MOV      r7,r0
000766  4688              MOV      r8,r1
000768  4691              MOV      r9,r2
00076a  f8ddb058          LDR      r11,[sp,#0x58]
00076e  e9dd5a13          LDRD     r5,r10,[sp,#0x4c]
;;;534      EDIT_Handle hObj;
;;;535      GUI_USE_PARA(ExFlags);
000772  bf00              NOP      
;;;536      /* Alloc memory for obj */
;;;537      WinFlags |= WM_CF_LATE_CLIP;    /* Always use late clipping since widget is optimized for it. */
000774  f4455580          ORR      r5,r5,#0x1000
;;;538      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WM_CF_SHOW | WinFlags, EDIT__Callback,
000778  2354              MOVS     r3,#0x54
00077a  4a75              LDR      r2,|L1.2384|
00077c  b2a8              UXTH     r0,r5
00077e  f0400102          ORR      r1,r0,#2
000782  9812              LDR      r0,[sp,#0x48]
000784  e88d000f          STM      sp,{r0-r3}
000788  464a              MOV      r2,r9
00078a  4641              MOV      r1,r8
00078c  4638              MOV      r0,r7
00078e  9b08              LDR      r3,[sp,#0x20]
000790  f7fffffe          BL       WM_CreateWindowAsChild
000794  4606              MOV      r6,r0
;;;539                                    sizeof(EDIT_Obj) - sizeof(WM_Obj));
;;;540      if (hObj) {
000796  b366              CBZ      r6,|L1.2034|
;;;541        EDIT_Obj* pObj;
;;;542        WM_LOCK();
000798  f7fffffe          BL       GUI_Lock
;;;543        pObj = (EDIT_Obj*)GUI_ALLOC_h2p(hObj);
00079c  4630              MOV      r0,r6
00079e  f7fffffe          BL       GUI_ALLOC_h2p
0007a2  4604              MOV      r4,r0
;;;544        /* init widget specific variables */
;;;545        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
0007a4  2210              MOVS     r2,#0x10
0007a6  4620              MOV      r0,r4
0007a8  9915              LDR      r1,[sp,#0x54]
0007aa  f7fffffe          BL       WIDGET__Init
;;;546        /* init member variables */
;;;547        INIT_ID(pObj);
;;;548        pObj->Props         = EDIT__DefaultProps;
0007ae  221c              MOVS     r2,#0x1c
0007b0  4968              LDR      r1,|L1.2388|
0007b2  f1040054          ADD      r0,r4,#0x54
0007b6  f7fffffe          BL       __aeabi_memcpy4
;;;549        pObj->XSizeCursor   = 1;
0007ba  2001              MOVS     r0,#1
0007bc  f8840049          STRB     r0,[r4,#0x49]
;;;550        pObj->MaxLen        = (MaxLen == 0) ? 8 : MaxLen;
0007c0  f1bb0f00          CMP      r11,#0
0007c4  d101              BNE      |L1.1994|
0007c6  2008              MOVS     r0,#8
0007c8  e000              B        |L1.1996|
                  |L1.1994|
0007ca  4658              MOV      r0,r11
                  |L1.1996|
0007cc  b200              SXTH     r0,r0
0007ce  8560              STRH     r0,[r4,#0x2a]
;;;551        pObj->BufferSize    = 0;
0007d0  2000              MOVS     r0,#0
0007d2  85a0              STRH     r0,[r4,#0x2c]
;;;552        pObj->hpText        = 0;
0007d4  8520              STRH     r0,[r4,#0x28]
;;;553        if (_IncrementBuffer(pObj, pObj->MaxLen + 1) == 0) {
0007d6  f9b4002a          LDRSH    r0,[r4,#0x2a]
0007da  1c41              ADDS     r1,r0,#1
0007dc  4620              MOV      r0,r4
0007de  f7fffffe          BL       _IncrementBuffer
0007e2  b918              CBNZ     r0,|L1.2028|
;;;554          GUI_DEBUG_ERROROUT("EDIT_Create failed to alloc buffer");
;;;555          EDIT_Delete(hObj);
0007e4  4630              MOV      r0,r6
0007e6  f7fffffe          BL       WM_DeleteWindow
;;;556          hObj = 0;
0007ea  2600              MOVS     r6,#0
                  |L1.2028|
;;;557        }
;;;558        WM_UNLOCK();
0007ec  f7fffffe          BL       GUI_Unlock
;;;559      }
0007f0  bf00              NOP      
                  |L1.2034|
;;;560      return hObj;
0007f2  4630              MOV      r0,r6
;;;561    }
0007f4  b009              ADD      sp,sp,#0x24
0007f6  e8bd8ff0          POP      {r4-r11,pc}
;;;562    
                          ENDP

                  EDIT_SetFont PROC
;;;653    */
;;;654    void EDIT_SetFont(EDIT_Handle hObj, const GUI_FONT GUI_UNI_PTR * pfont) {
0007fa  b570              PUSH     {r4-r6,lr}
0007fc  4605              MOV      r5,r0
0007fe  460e              MOV      r6,r1
;;;655      EDIT_Obj* pObj;
;;;656      if (hObj == 0)
000800  b905              CBNZ     r5,|L1.2052|
                  |L1.2050|
;;;657        return;
;;;658      WM_LOCK();
;;;659      pObj = EDIT_H2P(hObj);
;;;660      if (pObj) {
;;;661        pObj->Props.pFont = pfont;
;;;662        EDIT_Invalidate(hObj);
;;;663      }
;;;664      WM_UNLOCK();
;;;665    }
000802  bd70              POP      {r4-r6,pc}
                  |L1.2052|
000804  f7fffffe          BL       GUI_Lock
000808  4628              MOV      r0,r5                 ;659
00080a  f7fffffe          BL       GUI_ALLOC_h2p
00080e  4604              MOV      r4,r0                 ;659
000810  b11c              CBZ      r4,|L1.2074|
000812  65e6              STR      r6,[r4,#0x5c]         ;661
000814  4628              MOV      r0,r5                 ;662
000816  f7fffffe          BL       WM_InvalidateWindow
                  |L1.2074|
00081a  f7fffffe          BL       GUI_Unlock
00081e  bf00              NOP      
000820  e7ef              B        |L1.2050|
;;;666    
                          ENDP

                  EDIT_SetBkColor PROC
;;;670    */
;;;671    void EDIT_SetBkColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
000822  e92d41f0          PUSH     {r4-r8,lr}
000826  4606              MOV      r6,r0
000828  460d              MOV      r5,r1
00082a  4617              MOV      r7,r2
;;;672      EDIT_Obj* pObj;
;;;673      if (hObj == 0)
00082c  b90e              CBNZ     r6,|L1.2098|
                  |L1.2094|
;;;674        return;
;;;675      WM_LOCK();
;;;676      pObj = EDIT_H2P(hObj);
;;;677      if (pObj) {
;;;678        if (Index < GUI_COUNTOF(pObj->Props.aBkColor)) {
;;;679          pObj->Props.aBkColor[Index] = color;
;;;680          EDIT_Invalidate(hObj);
;;;681        }
;;;682      }
;;;683      WM_UNLOCK();
;;;684    }
00082e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2098|
000832  f7fffffe          BL       GUI_Lock
000836  4630              MOV      r0,r6                 ;676
000838  f7fffffe          BL       GUI_ALLOC_h2p
00083c  4604              MOV      r4,r0                 ;676
00083e  b144              CBZ      r4,|L1.2130|
000840  2d02              CMP      r5,#2                 ;678
000842  d206              BCS      |L1.2130|
000844  f1040068          ADD      r0,r4,#0x68           ;679
000848  f8407025          STR      r7,[r0,r5,LSL #2]     ;679
00084c  4630              MOV      r0,r6                 ;680
00084e  f7fffffe          BL       WM_InvalidateWindow
                  |L1.2130|
000852  f7fffffe          BL       GUI_Unlock
000856  bf00              NOP      
000858  e7e9              B        |L1.2094|
;;;685    
                          ENDP

                  EDIT_SetTextColor PROC
;;;689    */
;;;690    void EDIT_SetTextColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
00085a  e92d41f0          PUSH     {r4-r8,lr}
00085e  4606              MOV      r6,r0
000860  460d              MOV      r5,r1
000862  4617              MOV      r7,r2
;;;691      EDIT_Obj* pObj;
;;;692      if (hObj == 0)
000864  b90e              CBNZ     r6,|L1.2154|
                  |L1.2150|
;;;693        return;
;;;694      WM_LOCK();
;;;695      pObj = EDIT_H2P(hObj);
;;;696      if (pObj) {
;;;697        if (Index < GUI_COUNTOF(pObj->Props.aTextColor)) {
;;;698          pObj->Props.aTextColor[Index] = color;
;;;699          EDIT_Invalidate(hObj);
;;;700        }
;;;701      }
;;;702      WM_UNLOCK();
;;;703    }
000866  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2154|
00086a  f7fffffe          BL       GUI_Lock
00086e  4630              MOV      r0,r6                 ;695
000870  f7fffffe          BL       GUI_ALLOC_h2p
000874  4604              MOV      r4,r0                 ;695
000876  b144              CBZ      r4,|L1.2186|
000878  2d02              CMP      r5,#2                 ;697
00087a  d206              BCS      |L1.2186|
00087c  f1040060          ADD      r0,r4,#0x60           ;698
000880  f8407025          STR      r7,[r0,r5,LSL #2]     ;698
000884  4630              MOV      r0,r6                 ;699
000886  f7fffffe          BL       WM_InvalidateWindow
                  |L1.2186|
00088a  f7fffffe          BL       GUI_Unlock
00088e  bf00              NOP      
000890  e7e9              B        |L1.2150|
;;;704    
                          ENDP

                  EDIT_SetText PROC
;;;708    */
;;;709    void EDIT_SetText(EDIT_Handle hObj, const char* s) {
000892  e92d47f0          PUSH     {r4-r10,lr}
000896  4680              MOV      r8,r0
000898  460f              MOV      r7,r1
;;;710      if (hObj) {
00089a  f1b80f00          CMP      r8,#0
00089e  d052              BEQ      |L1.2374|
;;;711        EDIT_Obj* pObj;
;;;712        WM_LOCK();
0008a0  f7fffffe          BL       GUI_Lock
;;;713        pObj = EDIT_H2P(hObj);
0008a4  4640              MOV      r0,r8
0008a6  f7fffffe          BL       GUI_ALLOC_h2p
0008aa  4604              MOV      r4,r0
;;;714        if (s) {
0008ac  b3ef              CBZ      r7,|L1.2346|
;;;715          int NumBytesNew, NumBytesOld = 0;
0008ae  f04f0900          MOV      r9,#0
;;;716          int NumCharsNew;
;;;717          if (pObj->hpText) {
0008b2  8d20              LDRH     r0,[r4,#0x28]
0008b4  b150              CBZ      r0,|L1.2252|
;;;718            char* pText;
;;;719            pText       = (char*) GUI_ALLOC_h2p(pObj->hpText);
0008b6  f9b40028          LDRSH    r0,[r4,#0x28]
0008ba  f7fffffe          BL       GUI_ALLOC_h2p
0008be  4682              MOV      r10,r0
;;;720            NumBytesOld = strlen(pText) + 1;
0008c0  4650              MOV      r0,r10
0008c2  f7fffffe          BL       strlen
0008c6  f1000901          ADD      r9,r0,#1
;;;721          }
0008ca  bf00              NOP      
                  |L1.2252|
;;;722          NumCharsNew = GUI__GetNumChars(s);
0008cc  4638              MOV      r0,r7
0008ce  f7fffffe          BL       GUI__GetNumChars
0008d2  4606              MOV      r6,r0
;;;723          if (NumCharsNew > pObj->MaxLen) {
0008d4  f9b4102a          LDRSH    r1,[r4,#0x2a]
0008d8  42b1              CMP      r1,r6
0008da  da01              BGE      |L1.2272|
;;;724            NumCharsNew = pObj->MaxLen;
0008dc  f9b4602a          LDRSH    r6,[r4,#0x2a]
                  |L1.2272|
;;;725          }
;;;726          NumBytesNew = GUI_UC__NumChars2NumBytes(s, NumCharsNew) + 1;
0008e0  4631              MOV      r1,r6
0008e2  4638              MOV      r0,r7
0008e4  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0008e8  1c45              ADDS     r5,r0,#1
;;;727          if (_IsSpaceInBuffer(pObj, NumBytesNew - NumBytesOld)) {
0008ea  eba50109          SUB      r1,r5,r9
0008ee  4620              MOV      r0,r4
0008f0  f7fffffe          BL       _IsSpaceInBuffer
0008f4  b1c0              CBZ      r0,|L1.2344|
;;;728            char* pText;
;;;729            pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
0008f6  f9b40028          LDRSH    r0,[r4,#0x28]
0008fa  f7fffffe          BL       GUI_ALLOC_h2p
0008fe  4682              MOV      r10,r0
;;;730            memcpy(pText, s, NumBytesNew);
000900  462a              MOV      r2,r5
000902  4639              MOV      r1,r7
000904  4650              MOV      r0,r10
000906  f7fffffe          BL       __aeabi_memcpy
;;;731            pObj->CursorPos = NumBytesNew - 1;
00090a  1e68              SUBS     r0,r5,#1
00090c  6420              STR      r0,[r4,#0x40]
;;;732            if (pObj->CursorPos == pObj->MaxLen) {
00090e  f9b4102a          LDRSH    r1,[r4,#0x2a]
000912  6c20              LDR      r0,[r4,#0x40]
000914  4288              CMP      r0,r1
000916  d106              BNE      |L1.2342|
;;;733              if (pObj->EditMode == GUI_EDIT_MODE_OVERWRITE) {
000918  f8940048          LDRB     r0,[r4,#0x48]
00091c  2801              CMP      r0,#1
00091e  d102              BNE      |L1.2342|
;;;734                pObj->CursorPos--;
000920  6c20              LDR      r0,[r4,#0x40]
000922  1e40              SUBS     r0,r0,#1
000924  6420              STR      r0,[r4,#0x40]
                  |L1.2342|
;;;735              }
;;;736            }
;;;737          }
000926  bf00              NOP      
                  |L1.2344|
;;;738        } else {
000928  e007              B        |L1.2362|
                  |L1.2346|
00092a  e7ff              B        |L1.2348|
                  |L1.2348|
;;;739          GUI_ALLOC_FreePtr(&pObj->hpText);
00092c  f1040028          ADD      r0,r4,#0x28
000930  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;740          pObj->BufferSize = 0;
000934  2000              MOVS     r0,#0
000936  85a0              STRH     r0,[r4,#0x2c]
;;;741          pObj->CursorPos  = 0;
000938  6420              STR      r0,[r4,#0x40]
                  |L1.2362|
;;;742        }
;;;743        EDIT_Invalidate(hObj);
00093a  4640              MOV      r0,r8
00093c  f7fffffe          BL       WM_InvalidateWindow
;;;744        WM_UNLOCK();
000940  f7fffffe          BL       GUI_Unlock
;;;745      }
000944  bf00              NOP      
                  |L1.2374|
;;;746    }
000946  e8bd87f0          POP      {r4-r10,pc}
00094a  0000              DCW      0x0000
                  |L1.2380|
                          DCD      StartPress
                  |L1.2384|
                          DCD      EDIT__Callback
                  |L1.2388|
                          DCD      EDIT__DefaultProps
                          ENDP

                  EDIT_GetText PROC
;;;751    */
;;;752    void EDIT_GetText(EDIT_Handle hObj, char* sDest, int MaxLen) {
000958  e92d47f0          PUSH     {r4-r10,lr}
00095c  4607              MOV      r7,r0
00095e  460c              MOV      r4,r1
000960  4615              MOV      r5,r2
;;;753      if (sDest) {
000962  b33c              CBZ      r4,|L1.2484|
;;;754        *sDest = 0;
000964  2000              MOVS     r0,#0
000966  7020              STRB     r0,[r4,#0]
;;;755        if (hObj) {
000968  b327              CBZ      r7,|L1.2484|
;;;756          EDIT_Obj* pObj;
;;;757          WM_LOCK();
00096a  f7fffffe          BL       GUI_Lock
;;;758          pObj = EDIT_H2P(hObj);
00096e  4638              MOV      r0,r7
000970  f7fffffe          BL       GUI_ALLOC_h2p
000974  4680              MOV      r8,r0
;;;759          if (pObj->hpText) {
000976  f8b80028          LDRH     r0,[r8,#0x28]
00097a  b1c0              CBZ      r0,|L1.2478|
;;;760            char* pText;
;;;761            int NumChars, NumBytes;
;;;762            pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
00097c  f9b80028          LDRSH    r0,[r8,#0x28]
000980  f7fffffe          BL       GUI_ALLOC_h2p
000984  4682              MOV      r10,r0
;;;763            NumChars = GUI__GetNumChars(pText);
000986  4650              MOV      r0,r10
000988  f7fffffe          BL       GUI__GetNumChars
00098c  4681              MOV      r9,r0
;;;764            if (NumChars > MaxLen) {
00098e  45a9              CMP      r9,r5
000990  dd00              BLE      |L1.2452|
;;;765              NumChars = MaxLen;
000992  46a9              MOV      r9,r5
                  |L1.2452|
;;;766            }
;;;767            NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
000994  4649              MOV      r1,r9
000996  4650              MOV      r0,r10
000998  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00099c  4606              MOV      r6,r0
;;;768            memcpy(sDest, pText, NumBytes);
00099e  4632              MOV      r2,r6
0009a0  4651              MOV      r1,r10
0009a2  4620              MOV      r0,r4
0009a4  f7fffffe          BL       __aeabi_memcpy
;;;769            *(sDest + NumBytes) = 0;
0009a8  2000              MOVS     r0,#0
0009aa  55a0              STRB     r0,[r4,r6]
;;;770          }
0009ac  bf00              NOP      
                  |L1.2478|
;;;771          WM_UNLOCK();
0009ae  f7fffffe          BL       GUI_Unlock
;;;772        }
0009b2  bf00              NOP      
                  |L1.2484|
;;;773      }
;;;774    }
0009b4  e8bd87f0          POP      {r4-r10,pc}
;;;775    
                          ENDP

                  EDIT_GetValue PROC
;;;779    */
;;;780    I32  EDIT_GetValue(EDIT_Handle hObj) {
0009b8  b570              PUSH     {r4-r6,lr}
0009ba  4604              MOV      r4,r0
;;;781      EDIT_Obj* pObj;
;;;782      I32 r = 0;
0009bc  2600              MOVS     r6,#0
;;;783      if (hObj) {
0009be  b144              CBZ      r4,|L1.2514|
;;;784        WM_LOCK();
0009c0  f7fffffe          BL       GUI_Lock
;;;785        pObj = EDIT_H2P(hObj);
0009c4  4620              MOV      r0,r4
0009c6  f7fffffe          BL       GUI_ALLOC_h2p
0009ca  4605              MOV      r5,r0
;;;786        r = pObj->CurrentValue;
0009cc  6bee              LDR      r6,[r5,#0x3c]
;;;787        WM_UNLOCK();
0009ce  f7fffffe          BL       GUI_Unlock
                  |L1.2514|
;;;788      }
;;;789      return r;
0009d2  4630              MOV      r0,r6
;;;790    }
0009d4  bd70              POP      {r4-r6,pc}
;;;791    
                          ENDP

                  EDIT_SetValue PROC
;;;795    */
;;;796    void EDIT_SetValue(EDIT_Handle hObj, I32 Value) {
0009d6  b570              PUSH     {r4-r6,lr}
0009d8  4606              MOV      r6,r0
0009da  460d              MOV      r5,r1
;;;797      EDIT_Obj* pObj;
;;;798      if (hObj) {
0009dc  b1fe              CBZ      r6,|L1.2590|
;;;799        WM_LOCK();
0009de  f7fffffe          BL       GUI_Lock
;;;800        pObj = EDIT_H2P(hObj);
0009e2  4630              MOV      r0,r6
0009e4  f7fffffe          BL       GUI_ALLOC_h2p
0009e8  4604              MOV      r4,r0
;;;801        /* Put in min/max range */
;;;802        if (Value < pObj->Min) {
0009ea  6b20              LDR      r0,[r4,#0x30]
0009ec  42a8              CMP      r0,r5
0009ee  dd00              BLE      |L1.2546|
;;;803          Value = pObj->Min;
0009f0  6b25              LDR      r5,[r4,#0x30]
                  |L1.2546|
;;;804        }
;;;805        if (Value > pObj->Max) {
0009f2  6b60              LDR      r0,[r4,#0x34]
0009f4  42a8              CMP      r0,r5
0009f6  da00              BGE      |L1.2554|
;;;806          Value = pObj->Max;
0009f8  6b65              LDR      r5,[r4,#0x34]
                  |L1.2554|
;;;807        }
;;;808        if (pObj->CurrentValue != (U32)Value) {
0009fa  6be0              LDR      r0,[r4,#0x3c]
0009fc  42a8              CMP      r0,r5
0009fe  d00c              BEQ      |L1.2586|
;;;809          pObj->CurrentValue = Value;
000a00  63e5              STR      r5,[r4,#0x3c]
;;;810          if (pObj->pfUpdateBuffer) {
000a02  6d20              LDR      r0,[r4,#0x50]
000a04  b110              CBZ      r0,|L1.2572|
;;;811            pObj->pfUpdateBuffer(hObj);
000a06  4630              MOV      r0,r6
000a08  6d21              LDR      r1,[r4,#0x50]
000a0a  4788              BLX      r1
                  |L1.2572|
;;;812          }
;;;813          WM_InvalidateWindow(hObj);
000a0c  4630              MOV      r0,r6
000a0e  f7fffffe          BL       WM_InvalidateWindow
;;;814          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000a12  2105              MOVS     r1,#5
000a14  4630              MOV      r0,r6
000a16  f7fffffe          BL       WM_NotifyParent
                  |L1.2586|
;;;815        }
;;;816        WM_UNLOCK();
000a1a  f7fffffe          BL       GUI_Unlock
                  |L1.2590|
;;;817      }
;;;818    }
000a1e  bd70              POP      {r4-r6,pc}
;;;819    
                          ENDP

                  EDIT_SetMaxLen PROC
;;;823    */
;;;824    void EDIT_SetMaxLen(EDIT_Handle  hObj, int MaxLen) {
000a20  e92d47f0          PUSH     {r4-r10,lr}
000a24  4606              MOV      r6,r0
000a26  460d              MOV      r5,r1
;;;825      if (hObj) {
000a28  b396              CBZ      r6,|L1.2704|
;;;826        EDIT_Obj* pObj;
;;;827        WM_LOCK();
000a2a  f7fffffe          BL       GUI_Lock
;;;828        pObj = EDIT_H2P(hObj);
000a2e  4630              MOV      r0,r6
000a30  f7fffffe          BL       GUI_ALLOC_h2p
000a34  4604              MOV      r4,r0
;;;829        if (MaxLen != pObj->MaxLen) {
000a36  f9b4002a          LDRSH    r0,[r4,#0x2a]
000a3a  42a8              CMP      r0,r5
000a3c  d025              BEQ      |L1.2698|
;;;830          if (MaxLen < pObj->MaxLen) {
000a3e  f9b4002a          LDRSH    r0,[r4,#0x2a]
000a42  42a8              CMP      r0,r5
000a44  dd16              BLE      |L1.2676|
;;;831            if (pObj->hpText) {
000a46  8d20              LDRH     r0,[r4,#0x28]
000a48  b1a0              CBZ      r0,|L1.2676|
;;;832              char* pText;
;;;833              int   NumChars;
;;;834              pText    = (char*) GUI_ALLOC_h2p(pObj->hpText);
000a4a  f9b40028          LDRSH    r0,[r4,#0x28]
000a4e  f7fffffe          BL       GUI_ALLOC_h2p
000a52  4607              MOV      r7,r0
;;;835              NumChars = GUI__GetNumChars(pText);
000a54  4638              MOV      r0,r7
000a56  f7fffffe          BL       GUI__GetNumChars
000a5a  4680              MOV      r8,r0
;;;836              if (NumChars > MaxLen) {
000a5c  45a8              CMP      r8,r5
000a5e  dd08              BLE      |L1.2674|
;;;837                int NumBytes;
;;;838                NumBytes = GUI_UC__NumChars2NumBytes(pText, MaxLen);
000a60  4629              MOV      r1,r5
000a62  4638              MOV      r0,r7
000a64  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000a68  4681              MOV      r9,r0
;;;839                *(pText + NumBytes) = 0;
000a6a  2000              MOVS     r0,#0
000a6c  f8070009          STRB     r0,[r7,r9]
;;;840              }
000a70  bf00              NOP      
                  |L1.2674|
;;;841            }
000a72  bf00              NOP      
                  |L1.2676|
;;;842          }
;;;843          _IncrementBuffer(pObj, MaxLen - pObj->BufferSize + 1);
000a74  8da0              LDRH     r0,[r4,#0x2c]
000a76  1a28              SUBS     r0,r5,r0
000a78  1c41              ADDS     r1,r0,#1
000a7a  4620              MOV      r0,r4
000a7c  f7fffffe          BL       _IncrementBuffer
;;;844          pObj->MaxLen = MaxLen;
000a80  b228              SXTH     r0,r5
000a82  8560              STRH     r0,[r4,#0x2a]
;;;845          EDIT_Invalidate(hObj);
000a84  4630              MOV      r0,r6
000a86  f7fffffe          BL       WM_InvalidateWindow
                  |L1.2698|
;;;846        }
;;;847        WM_UNLOCK();
000a8a  f7fffffe          BL       GUI_Unlock
;;;848      }
000a8e  bf00              NOP      
                  |L1.2704|
;;;849    }
000a90  e8bd87f0          POP      {r4-r10,pc}
;;;850    
                          ENDP

                  EDIT_SetTextAlign PROC
;;;854    */
;;;855    void EDIT_SetTextAlign(EDIT_Handle hObj, int Align) {
000a94  b570              PUSH     {r4-r6,lr}
000a96  4605              MOV      r5,r0
000a98  460e              MOV      r6,r1
;;;856      EDIT_Obj* pObj;
;;;857      if (hObj == 0)
000a9a  b905              CBNZ     r5,|L1.2718|
                  |L1.2716|
;;;858        return;
;;;859      WM_LOCK();
;;;860      pObj = EDIT_H2P(hObj);
;;;861      if (pObj) {
;;;862        pObj->Props.Align = Align;
;;;863        EDIT_Invalidate(hObj);
;;;864      }
;;;865      WM_UNLOCK();
;;;866    }
000a9c  bd70              POP      {r4-r6,pc}
                  |L1.2718|
000a9e  f7fffffe          BL       GUI_Lock
000aa2  4628              MOV      r0,r5                 ;860
000aa4  f7fffffe          BL       GUI_ALLOC_h2p
000aa8  4604              MOV      r4,r0                 ;860
000aaa  b11c              CBZ      r4,|L1.2740|
000aac  6566              STR      r6,[r4,#0x54]         ;862
000aae  4628              MOV      r0,r5                 ;863
000ab0  f7fffffe          BL       WM_InvalidateWindow
                  |L1.2740|
000ab4  f7fffffe          BL       GUI_Unlock
000ab8  bf00              NOP      
000aba  e7ef              B        |L1.2716|
;;;867    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  EDIT__DefaultProps
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      GUI_Font13_1
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00c0c0c0
                          DCD      0x00ffffff
                  Timer1
00001c  0000              DCW      0x0000
00001e  0000              DCB      0x00,0x00
                  StartPress
                          DCD      0x00000000
