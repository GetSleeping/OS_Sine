; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\lcddummy.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\lcddummy.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcddummy.crf ..\Ucgui\GUI\LCDDriver\LCDDummy.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_L0_SetPixelIndex PROC
;;;381    */
;;;382    void LCD_L0_SetPixelIndex(int x, int y, int PixelIndex) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;383      /* Convert logical into physical coordinates (Dep. on LCDConf.h) */
;;;384      #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;385        int xPhys = LOG2PHYS_X(x, y);
;;;386        int yPhys = LOG2PHYS_Y(x, y);
;;;387      #else
;;;388        #define xPhys x
;;;389        #define yPhys y
;;;390      #endif
;;;391      /* Write into hardware ... Adapt to your system */
;;;392      {
;;;393        LCD_SetPoint(x,y,PixelIndex);/* ... */
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_SetPoint
;;;394      }
;;;395    }
000012  bd70              POP      {r4-r6,pc}
;;;396    
                          ENDP

                  LCD_L0_GetPixelIndex PROC
;;;405    */
;;;406    unsigned int LCD_L0_GetPixelIndex(int x, int y) {
000014  b570              PUSH     {r4-r6,lr}
000016  4604              MOV      r4,r0
000018  460d              MOV      r5,r1
;;;407      LCD_PIXELINDEX PixelIndex;
;;;408      /* Convert logical into physical coordinates (Dep. on LCDConf.h) */
;;;409      #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;410        int xPhys = LOG2PHYS_X(x, y);
;;;411        int yPhys = LOG2PHYS_Y(x, y);
;;;412      #else
;;;413        #define xPhys x
;;;414        #define yPhys y
;;;415      #endif
;;;416      /* Read from hardware ... Adapt to your system */
;;;417      {
;;;418        PixelIndex =  LCD_GetPoint(x,y);/* ... */
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       LCD_GetPoint
000022  b286              UXTH     r6,r0
;;;419      }
;;;420      return PixelIndex;
000024  4630              MOV      r0,r6
;;;421    }
000026  bd70              POP      {r4-r6,pc}
;;;422    
                          ENDP

                  _DrawBitLine1BPP PROC
;;;109    */
;;;110    static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000028  e92d4ff8          PUSH     {r3-r11,lr}
00002c  4606              MOV      r6,r0
00002e  4689              MOV      r9,r1
000030  4615              MOV      r5,r2
000032  461c              MOV      r4,r3
000034  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;111      LCD_PIXELINDEX Index0 = *(pTrans+0);
000038  f8b80000          LDRH     r0,[r8,#0]
00003c  9000              STR      r0,[sp,#0]
;;;112      LCD_PIXELINDEX Index1 = *(pTrans+1);
00003e  f8b8a002          LDRH     r10,[r8,#2]
;;;113      x += Diff;
000042  4426              ADD      r6,r6,r4
;;;114      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000044  48fd              LDR      r0,|L1.1084|
000046  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000048  f0100003          ANDS     r0,r0,#3
00004c  d004              BEQ      |L1.88|
00004e  2801              CMP      r0,#1
000050  d031              BEQ      |L1.182|
000052  2802              CMP      r0,#2
000054  d14e              BNE      |L1.244|
000056  e018              B        |L1.138|
                  |L1.88|
;;;115        case 0:
;;;116          do {
000058  bf00              NOP      
                  |L1.90|
;;;117            LCD_L0_SetPixelIndex(x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00005a  7829              LDRB     r1,[r5,#0]
00005c  2380              MOVS     r3,#0x80
00005e  4123              ASRS     r3,r3,r4
000060  4219              TST      r1,r3
000062  d001              BEQ      |L1.104|
000064  4651              MOV      r1,r10
000066  e000              B        |L1.106|
                  |L1.104|
000068  9900              LDR      r1,[sp,#0]
                  |L1.106|
00006a  460a              MOV      r2,r1
00006c  4630              MOV      r0,r6
00006e  1c76              ADDS     r6,r6,#1
000070  4649              MOV      r1,r9
000072  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;118    			  if (++Diff == 8) {
000076  1c60              ADDS     r0,r4,#1
000078  4604              MOV      r4,r0
00007a  2808              CMP      r0,#8
00007c  d101              BNE      |L1.130|
;;;119              Diff = 0;
00007e  2400              MOVS     r4,#0
;;;120    				  p++;
000080  1c6d              ADDS     r5,r5,#1
                  |L1.130|
;;;121    			  }
;;;122    		  } while (--xsize);
000082  1e78              SUBS     r0,r7,#1
000084  0007              MOVS     r7,r0
000086  d1e8              BNE      |L1.90|
;;;123          break;
000088  e034              B        |L1.244|
                  |L1.138|
;;;124        case LCD_DRAWMODE_TRANS:
;;;125          do {
00008a  bf00              NOP      
                  |L1.140|
;;;126      		  if (*p & (0x80 >> Diff))
00008c  7828              LDRB     r0,[r5,#0]
00008e  2180              MOVS     r1,#0x80
000090  4121              ASRS     r1,r1,r4
000092  4208              TST      r0,r1
000094  d004              BEQ      |L1.160|
;;;127              LCD_L0_SetPixelIndex(x, y, Index1);
000096  4652              MOV      r2,r10
000098  4649              MOV      r1,r9
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.160|
;;;128            x++;
0000a0  1c76              ADDS     r6,r6,#1
;;;129    			  if (++Diff == 8) {
0000a2  1c60              ADDS     r0,r4,#1
0000a4  4604              MOV      r4,r0
0000a6  2808              CMP      r0,#8
0000a8  d101              BNE      |L1.174|
;;;130              Diff = 0;
0000aa  2400              MOVS     r4,#0
;;;131    				  p++;
0000ac  1c6d              ADDS     r5,r5,#1
                  |L1.174|
;;;132    			  }
;;;133    		  } while (--xsize);
0000ae  1e78              SUBS     r0,r7,#1
0000b0  0007              MOVS     r7,r0
0000b2  d1eb              BNE      |L1.140|
;;;134          break;
0000b4  e01e              B        |L1.244|
                  |L1.182|
;;;135        case LCD_DRAWMODE_XOR:;
;;;136          do {
0000b6  bf00              NOP      
                  |L1.184|
;;;137      		  if (*p & (0x80 >> Diff)) {
0000b8  7828              LDRB     r0,[r5,#0]
0000ba  2180              MOVS     r1,#0x80
0000bc  4121              ASRS     r1,r1,r4
0000be  4208              TST      r0,r1
0000c0  d00d              BEQ      |L1.222|
;;;138              int Pixel = LCD_L0_GetPixelIndex(x, y);
0000c2  4649              MOV      r1,r9
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       LCD_L0_GetPixelIndex
0000ca  4683              MOV      r11,r0
;;;139              LCD_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000cc  f64f70ff          MOV      r0,#0xffff
0000d0  eba0020b          SUB      r2,r0,r11
0000d4  4649              MOV      r1,r9
0000d6  4630              MOV      r0,r6
0000d8  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;140            }
0000dc  bf00              NOP      
                  |L1.222|
;;;141            x++;
0000de  1c76              ADDS     r6,r6,#1
;;;142    			  if (++Diff == 8) {
0000e0  1c60              ADDS     r0,r4,#1
0000e2  4604              MOV      r4,r0
0000e4  2808              CMP      r0,#8
0000e6  d101              BNE      |L1.236|
;;;143              Diff = 0;
0000e8  2400              MOVS     r4,#0
;;;144    				  p++;
0000ea  1c6d              ADDS     r5,r5,#1
                  |L1.236|
;;;145    			  }
;;;146    		  } while (--xsize);
0000ec  1e78              SUBS     r0,r7,#1
0000ee  0007              MOVS     r7,r0
0000f0  d1e2              BNE      |L1.184|
;;;147          break;
0000f2  bf00              NOP      
                  |L1.244|
0000f4  bf00              NOP                            ;123
;;;148    	}
;;;149    }
0000f6  e8bd8ff8          POP      {r3-r11,pc}
;;;150    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;155    #if (LCD_MAX_LOG_COLORS > 2)
;;;156    static void  _DrawBitLine2BPP(int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
0000fa  e92d4fff          PUSH     {r0-r11,lr}
0000fe  b083              SUB      sp,sp,#0xc
000100  4605              MOV      r5,r0
000102  4616              MOV      r6,r2
000104  469a              MOV      r10,r3
000106  e9dd7810          LDRD     r7,r8,[sp,#0x40]
;;;157      LCD_PIXELINDEX Pixels = *p;
00010a  f8969000          LDRB     r9,[r6,#0]
;;;158      int CurrentPixel = Diff;
00010e  4654              MOV      r4,r10
;;;159      x += Diff;
000110  4455              ADD      r5,r5,r10
;;;160      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000112  48ca              LDR      r0,|L1.1084|
000114  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000116  f0100003          ANDS     r0,r0,#3
00011a  d002              BEQ      |L1.290|
00011c  2802              CMP      r0,#2
00011e  d148              BNE      |L1.434|
000120  e048              B        |L1.436|
                  |L1.290|
;;;161        case 0:
;;;162          if (pTrans) {
000122  f1b80f00          CMP      r8,#0
000126  d024              BEQ      |L1.370|
;;;163            do {
000128  bf00              NOP      
                  |L1.298|
;;;164              int Shift = (3 - CurrentPixel) << 1;
00012a  f1c40003          RSB      r0,r4,#3
00012e  ea4f0b40          LSL      r11,r0,#1
;;;165              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000132  f1cb0106          RSB      r1,r11,#6
000136  20c0              MOVS     r0,#0xc0
000138  4108              ASRS     r0,r0,r1
00013a  ea000009          AND      r0,r0,r9
00013e  fa40f00b          ASR      r0,r0,r11
000142  9002              STR      r0,[sp,#8]
;;;166              LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
000144  9802              LDR      r0,[sp,#8]
000146  f8380010          LDRH     r0,[r8,r0,LSL #1]
00014a  9001              STR      r0,[sp,#4]
;;;167              LCD_L0_SetPixelIndex(x++, y, PixelIndex);
00014c  4628              MOV      r0,r5
00014e  1c6d              ADDS     r5,r5,#1
000150  9a01              LDR      r2,[sp,#4]
000152  9904              LDR      r1,[sp,#0x10]
000154  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;168              if (++CurrentPixel == 4) {
000158  1c60              ADDS     r0,r4,#1
00015a  4604              MOV      r4,r0
00015c  2804              CMP      r0,#4
00015e  d104              BNE      |L1.362|
;;;169                CurrentPixel = 0;
000160  2400              MOVS     r4,#0
;;;170                Pixels = *(++p);
000162  1c70              ADDS     r0,r6,#1
000164  4606              MOV      r6,r0
000166  f8909000          LDRB     r9,[r0,#0]
                  |L1.362|
;;;171              }
;;;172    		    } while (--xsize);
00016a  1e78              SUBS     r0,r7,#1
00016c  0007              MOVS     r7,r0
00016e  d1dc              BNE      |L1.298|
000170  e01f              B        |L1.434|
                  |L1.370|
;;;173          } else {
;;;174            do {
000172  bf00              NOP      
                  |L1.372|
;;;175              int Shift = (3 - CurrentPixel) << 1;
000174  f1c40003          RSB      r0,r4,#3
000178  ea4f0b40          LSL      r11,r0,#1
;;;176              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
00017c  f1cb0106          RSB      r1,r11,#6
000180  20c0              MOVS     r0,#0xc0
000182  4108              ASRS     r0,r0,r1
000184  ea000009          AND      r0,r0,r9
000188  fa40f00b          ASR      r0,r0,r11
00018c  9002              STR      r0,[sp,#8]
;;;177              LCD_L0_SetPixelIndex(x++, y, Index);
00018e  4628              MOV      r0,r5
000190  1c6d              ADDS     r5,r5,#1
000192  9a02              LDR      r2,[sp,#8]
000194  9904              LDR      r1,[sp,#0x10]
000196  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;178              if (++CurrentPixel == 4) {
00019a  1c60              ADDS     r0,r4,#1
00019c  4604              MOV      r4,r0
00019e  2804              CMP      r0,#4
0001a0  d104              BNE      |L1.428|
;;;179                CurrentPixel = 0;
0001a2  2400              MOVS     r4,#0
;;;180                Pixels = *(++p);
0001a4  1c70              ADDS     r0,r6,#1
0001a6  4606              MOV      r6,r0
0001a8  f8909000          LDRB     r9,[r0,#0]
                  |L1.428|
;;;181              }
;;;182    		    } while (--xsize);
0001ac  1e78              SUBS     r0,r7,#1
0001ae  0007              MOVS     r7,r0
0001b0  d1e0              BNE      |L1.372|
                  |L1.434|
;;;183          }
;;;184          break;
0001b2  e04f              B        |L1.596|
                  |L1.436|
;;;185        case LCD_DRAWMODE_TRANS:
;;;186          if (pTrans) {
0001b4  f1b80f00          CMP      r8,#0
0001b8  d027              BEQ      |L1.522|
;;;187            do {
0001ba  bf00              NOP      
                  |L1.444|
;;;188              int Shift = (3 - CurrentPixel) << 1;
0001bc  f1c40003          RSB      r0,r4,#3
0001c0  ea4f0b40          LSL      r11,r0,#1
;;;189              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0001c4  f1cb0106          RSB      r1,r11,#6
0001c8  20c0              MOVS     r0,#0xc0
0001ca  4108              ASRS     r0,r0,r1
0001cc  ea000009          AND      r0,r0,r9
0001d0  fa40f00b          ASR      r0,r0,r11
0001d4  9002              STR      r0,[sp,#8]
;;;190              if (Index) {
0001d6  9802              LDR      r0,[sp,#8]
0001d8  b148              CBZ      r0,|L1.494|
;;;191                LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
0001da  9802              LDR      r0,[sp,#8]
0001dc  f8380010          LDRH     r0,[r8,r0,LSL #1]
0001e0  9001              STR      r0,[sp,#4]
;;;192                LCD_L0_SetPixelIndex(x, y, PixelIndex);
0001e2  4628              MOV      r0,r5
0001e4  9a01              LDR      r2,[sp,#4]
0001e6  9904              LDR      r1,[sp,#0x10]
0001e8  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;193              }
0001ec  bf00              NOP      
                  |L1.494|
;;;194              x++;
0001ee  1c6d              ADDS     r5,r5,#1
;;;195              if (++CurrentPixel == 4) {
0001f0  1c60              ADDS     r0,r4,#1
0001f2  4604              MOV      r4,r0
0001f4  2804              CMP      r0,#4
0001f6  d104              BNE      |L1.514|
;;;196                CurrentPixel = 0;
0001f8  2400              MOVS     r4,#0
;;;197                Pixels = *(++p);
0001fa  1c70              ADDS     r0,r6,#1
0001fc  4606              MOV      r6,r0
0001fe  f8909000          LDRB     r9,[r0,#0]
                  |L1.514|
;;;198              }
;;;199    		    } while (--xsize);
000202  1e78              SUBS     r0,r7,#1
000204  0007              MOVS     r7,r0
000206  d1d9              BNE      |L1.444|
000208  e023              B        |L1.594|
                  |L1.522|
;;;200          } else {
;;;201            do {
00020a  bf00              NOP      
                  |L1.524|
;;;202              int Shift = (3 - CurrentPixel) << 1;
00020c  f1c40003          RSB      r0,r4,#3
000210  0040              LSLS     r0,r0,#1
000212  9002              STR      r0,[sp,#8]
;;;203              int Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000214  9802              LDR      r0,[sp,#8]
000216  f1c00106          RSB      r1,r0,#6
00021a  20c0              MOVS     r0,#0xc0
00021c  4108              ASRS     r0,r0,r1
00021e  ea000009          AND      r0,r0,r9
000222  9902              LDR      r1,[sp,#8]
000224  fa40fb01          ASR      r11,r0,r1
;;;204              if (Index) {
000228  f1bb0f00          CMP      r11,#0
00022c  d004              BEQ      |L1.568|
;;;205                LCD_L0_SetPixelIndex(x, y, Index);
00022e  465a              MOV      r2,r11
000230  4628              MOV      r0,r5
000232  9904              LDR      r1,[sp,#0x10]
000234  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.568|
;;;206              }
;;;207              x++;
000238  1c6d              ADDS     r5,r5,#1
;;;208              if (++CurrentPixel == 4) {
00023a  1c60              ADDS     r0,r4,#1
00023c  4604              MOV      r4,r0
00023e  2804              CMP      r0,#4
000240  d104              BNE      |L1.588|
;;;209                CurrentPixel = 0;
000242  2400              MOVS     r4,#0
;;;210                Pixels = *(++p);
000244  1c70              ADDS     r0,r6,#1
000246  4606              MOV      r6,r0
000248  f8909000          LDRB     r9,[r0,#0]
                  |L1.588|
;;;211              }
;;;212    		    } while (--xsize);
00024c  1e78              SUBS     r0,r7,#1
00024e  0007              MOVS     r7,r0
000250  d1dc              BNE      |L1.524|
                  |L1.594|
;;;213          }
;;;214          break;
000252  bf00              NOP      
                  |L1.596|
000254  bf00              NOP                            ;184
;;;215      }
;;;216    }
000256  b007              ADD      sp,sp,#0x1c
000258  e8bd8ff0          POP      {r4-r11,pc}
;;;217    #endif
                          ENDP

                  _DrawBitLine4BPP PROC
;;;223    #if (LCD_MAX_LOG_COLORS > 4)
;;;224    static void  _DrawBitLine4BPP(int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
00025c  e92d4fff          PUSH     {r0-r11,lr}
000260  b083              SUB      sp,sp,#0xc
000262  4605              MOV      r5,r0
000264  4616              MOV      r6,r2
000266  469a              MOV      r10,r3
000268  e9dd7810          LDRD     r7,r8,[sp,#0x40]
;;;225      LCD_PIXELINDEX Pixels = *p;
00026c  f8969000          LDRB     r9,[r6,#0]
;;;226      int CurrentPixel = Diff;
000270  4654              MOV      r4,r10
;;;227      x += Diff;
000272  4455              ADD      r5,r5,r10
;;;228      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000274  4871              LDR      r0,|L1.1084|
000276  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000278  f0100003          ANDS     r0,r0,#3
00027c  d002              BEQ      |L1.644|
00027e  2802              CMP      r0,#2
000280  d148              BNE      |L1.788|
000282  e048              B        |L1.790|
                  |L1.644|
;;;229        case 0:
;;;230          if (pTrans) {
000284  f1b80f00          CMP      r8,#0
000288  d024              BEQ      |L1.724|
;;;231            do {
00028a  bf00              NOP      
                  |L1.652|
;;;232              int Shift = (1 - CurrentPixel) << 2;
00028c  f1c40001          RSB      r0,r4,#1
000290  ea4f0b80          LSL      r11,r0,#2
;;;233              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000294  f1cb0104          RSB      r1,r11,#4
000298  20f0              MOVS     r0,#0xf0
00029a  4108              ASRS     r0,r0,r1
00029c  ea000009          AND      r0,r0,r9
0002a0  fa40f00b          ASR      r0,r0,r11
0002a4  9002              STR      r0,[sp,#8]
;;;234              LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
0002a6  9802              LDR      r0,[sp,#8]
0002a8  f8380010          LDRH     r0,[r8,r0,LSL #1]
0002ac  9001              STR      r0,[sp,#4]
;;;235              LCD_L0_SetPixelIndex(x++, y, PixelIndex);
0002ae  4628              MOV      r0,r5
0002b0  1c6d              ADDS     r5,r5,#1
0002b2  9a01              LDR      r2,[sp,#4]
0002b4  9904              LDR      r1,[sp,#0x10]
0002b6  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;236              if (++CurrentPixel == 2) {
0002ba  1c60              ADDS     r0,r4,#1
0002bc  4604              MOV      r4,r0
0002be  2802              CMP      r0,#2
0002c0  d104              BNE      |L1.716|
;;;237                CurrentPixel = 0;
0002c2  2400              MOVS     r4,#0
;;;238                Pixels = *(++p);
0002c4  1c70              ADDS     r0,r6,#1
0002c6  4606              MOV      r6,r0
0002c8  f8909000          LDRB     r9,[r0,#0]
                  |L1.716|
;;;239              }
;;;240    		    } while (--xsize);
0002cc  1e78              SUBS     r0,r7,#1
0002ce  0007              MOVS     r7,r0
0002d0  d1dc              BNE      |L1.652|
0002d2  e01f              B        |L1.788|
                  |L1.724|
;;;241          } else {
;;;242            do {
0002d4  bf00              NOP      
                  |L1.726|
;;;243              int Shift = (1 - CurrentPixel) << 2;
0002d6  f1c40001          RSB      r0,r4,#1
0002da  ea4f0b80          LSL      r11,r0,#2
;;;244              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
0002de  f1cb0104          RSB      r1,r11,#4
0002e2  20f0              MOVS     r0,#0xf0
0002e4  4108              ASRS     r0,r0,r1
0002e6  ea000009          AND      r0,r0,r9
0002ea  fa40f00b          ASR      r0,r0,r11
0002ee  9002              STR      r0,[sp,#8]
;;;245              LCD_L0_SetPixelIndex(x++, y, Index);
0002f0  4628              MOV      r0,r5
0002f2  1c6d              ADDS     r5,r5,#1
0002f4  9a02              LDR      r2,[sp,#8]
0002f6  9904              LDR      r1,[sp,#0x10]
0002f8  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;246              if (++CurrentPixel == 2) {
0002fc  1c60              ADDS     r0,r4,#1
0002fe  4604              MOV      r4,r0
000300  2802              CMP      r0,#2
000302  d104              BNE      |L1.782|
;;;247                CurrentPixel = 0;
000304  2400              MOVS     r4,#0
;;;248                Pixels = *(++p);
000306  1c70              ADDS     r0,r6,#1
000308  4606              MOV      r6,r0
00030a  f8909000          LDRB     r9,[r0,#0]
                  |L1.782|
;;;249              }
;;;250    		    } while (--xsize);
00030e  1e78              SUBS     r0,r7,#1
000310  0007              MOVS     r7,r0
000312  d1e0              BNE      |L1.726|
                  |L1.788|
;;;251          }
;;;252          break;
000314  e04f              B        |L1.950|
                  |L1.790|
;;;253        case LCD_DRAWMODE_TRANS:
;;;254          if (pTrans) {
000316  f1b80f00          CMP      r8,#0
00031a  d027              BEQ      |L1.876|
;;;255            do {
00031c  bf00              NOP      
                  |L1.798|
;;;256              int Shift = (1 - CurrentPixel) << 2;
00031e  f1c40001          RSB      r0,r4,#1
000322  ea4f0b80          LSL      r11,r0,#2
;;;257              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000326  f1cb0104          RSB      r1,r11,#4
00032a  20f0              MOVS     r0,#0xf0
00032c  4108              ASRS     r0,r0,r1
00032e  ea000009          AND      r0,r0,r9
000332  fa40f00b          ASR      r0,r0,r11
000336  9002              STR      r0,[sp,#8]
;;;258              if (Index) {
000338  9802              LDR      r0,[sp,#8]
00033a  b148              CBZ      r0,|L1.848|
;;;259                LCD_PIXELINDEX PixelIndex = *(pTrans + Index);
00033c  9802              LDR      r0,[sp,#8]
00033e  f8380010          LDRH     r0,[r8,r0,LSL #1]
000342  9001              STR      r0,[sp,#4]
;;;260                LCD_L0_SetPixelIndex(x, y, PixelIndex);
000344  4628              MOV      r0,r5
000346  9a01              LDR      r2,[sp,#4]
000348  9904              LDR      r1,[sp,#0x10]
00034a  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;261              }
00034e  bf00              NOP      
                  |L1.848|
;;;262              x++;
000350  1c6d              ADDS     r5,r5,#1
;;;263              if (++CurrentPixel == 2) {
000352  1c60              ADDS     r0,r4,#1
000354  4604              MOV      r4,r0
000356  2802              CMP      r0,#2
000358  d104              BNE      |L1.868|
;;;264                CurrentPixel = 0;
00035a  2400              MOVS     r4,#0
;;;265                Pixels = *(++p);
00035c  1c70              ADDS     r0,r6,#1
00035e  4606              MOV      r6,r0
000360  f8909000          LDRB     r9,[r0,#0]
                  |L1.868|
;;;266              }
;;;267    		    } while (--xsize);
000364  1e78              SUBS     r0,r7,#1
000366  0007              MOVS     r7,r0
000368  d1d9              BNE      |L1.798|
00036a  e023              B        |L1.948|
                  |L1.876|
;;;268          } else {
;;;269            do {
00036c  bf00              NOP      
                  |L1.878|
;;;270              int Shift = (1 - CurrentPixel) << 2;
00036e  f1c40001          RSB      r0,r4,#1
000372  0080              LSLS     r0,r0,#2
000374  9002              STR      r0,[sp,#8]
;;;271              int Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000376  9802              LDR      r0,[sp,#8]
000378  f1c00104          RSB      r1,r0,#4
00037c  20f0              MOVS     r0,#0xf0
00037e  4108              ASRS     r0,r0,r1
000380  ea000009          AND      r0,r0,r9
000384  9902              LDR      r1,[sp,#8]
000386  fa40fb01          ASR      r11,r0,r1
;;;272              if (Index) {
00038a  f1bb0f00          CMP      r11,#0
00038e  d004              BEQ      |L1.922|
;;;273                LCD_L0_SetPixelIndex(x, y, Index);
000390  465a              MOV      r2,r11
000392  4628              MOV      r0,r5
000394  9904              LDR      r1,[sp,#0x10]
000396  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.922|
;;;274              }
;;;275              x++;
00039a  1c6d              ADDS     r5,r5,#1
;;;276              if (++CurrentPixel == 2) {
00039c  1c60              ADDS     r0,r4,#1
00039e  4604              MOV      r4,r0
0003a0  2802              CMP      r0,#2
0003a2  d104              BNE      |L1.942|
;;;277                CurrentPixel = 0;
0003a4  2400              MOVS     r4,#0
;;;278                Pixels = *(++p);
0003a6  1c70              ADDS     r0,r6,#1
0003a8  4606              MOV      r6,r0
0003aa  f8909000          LDRB     r9,[r0,#0]
                  |L1.942|
;;;279              }
;;;280    		    } while (--xsize);
0003ae  1e78              SUBS     r0,r7,#1
0003b0  0007              MOVS     r7,r0
0003b2  d1dc              BNE      |L1.878|
                  |L1.948|
;;;281          }
;;;282          break;
0003b4  bf00              NOP      
                  |L1.950|
0003b6  bf00              NOP                            ;252
;;;283      }
;;;284    }
0003b8  b007              ADD      sp,sp,#0x1c
0003ba  e8bd8ff0          POP      {r4-r11,pc}
;;;285    #endif
                          ENDP

                  _DrawBitLine8BPP PROC
;;;291    #if (LCD_MAX_LOG_COLORS > 16)
;;;292    static void  _DrawBitLine8BPP(int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
0003be  e92d47f0          PUSH     {r4-r10,lr}
0003c2  4607              MOV      r7,r0
0003c4  4689              MOV      r9,r1
0003c6  4614              MOV      r4,r2
0003c8  461d              MOV      r5,r3
0003ca  f8dd8020          LDR      r8,[sp,#0x20]
;;;293      LCD_PIXELINDEX Pixel;
;;;294      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0003ce  481b              LDR      r0,|L1.1084|
0003d0  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0003d2  f0100003          ANDS     r0,r0,#3
0003d6  d002              BEQ      |L1.990|
0003d8  2802              CMP      r0,#2
0003da  d13f              BNE      |L1.1116|
0003dc  e01c              B        |L1.1048|
                  |L1.990|
;;;295        case 0:
;;;296          if (pTrans) {
0003de  f1b80f00          CMP      r8,#0
0003e2  d00d              BEQ      |L1.1024|
;;;297            for (; xsize > 0; xsize--, x++, p++) {
0003e4  e009              B        |L1.1018|
                  |L1.998|
;;;298              Pixel = *p;
0003e6  7826              LDRB     r6,[r4,#0]
;;;299              LCD_L0_SetPixelIndex(x, y, *(pTrans + Pixel));
0003e8  f8382016          LDRH     r2,[r8,r6,LSL #1]
0003ec  4649              MOV      r1,r9
0003ee  4638              MOV      r0,r7
0003f0  f7fffffe          BL       LCD_L0_SetPixelIndex
0003f4  1e6d              SUBS     r5,r5,#1              ;297
0003f6  1c7f              ADDS     r7,r7,#1              ;297
0003f8  1c64              ADDS     r4,r4,#1              ;297
                  |L1.1018|
0003fa  2d00              CMP      r5,#0                 ;297
0003fc  dcf3              BGT      |L1.998|
0003fe  e00a              B        |L1.1046|
                  |L1.1024|
;;;300            }
;;;301          } else {
;;;302            for (; xsize > 0; xsize--, x++, p++) {
000400  e007              B        |L1.1042|
                  |L1.1026|
;;;303              LCD_L0_SetPixelIndex(x, y, *p);
000402  7822              LDRB     r2,[r4,#0]
000404  4649              MOV      r1,r9
000406  4638              MOV      r0,r7
000408  f7fffffe          BL       LCD_L0_SetPixelIndex
00040c  1e6d              SUBS     r5,r5,#1              ;302
00040e  1c7f              ADDS     r7,r7,#1              ;302
000410  1c64              ADDS     r4,r4,#1              ;302
                  |L1.1042|
000412  2d00              CMP      r5,#0                 ;302
000414  dcf5              BGT      |L1.1026|
                  |L1.1046|
;;;304            }
;;;305          }
;;;306          break;
000416  e021              B        |L1.1116|
                  |L1.1048|
;;;307        case LCD_DRAWMODE_TRANS:
;;;308          if (pTrans) {
000418  f1b80f00          CMP      r8,#0
00041c  d010              BEQ      |L1.1088|
;;;309            for (; xsize > 0; xsize--, x++, p++) {
00041e  e00a              B        |L1.1078|
                  |L1.1056|
;;;310              Pixel = *p;
000420  7826              LDRB     r6,[r4,#0]
;;;311              if (Pixel) {
000422  b12e              CBZ      r6,|L1.1072|
;;;312                LCD_L0_SetPixelIndex(x, y, *(pTrans + Pixel));
000424  f8382016          LDRH     r2,[r8,r6,LSL #1]
000428  4649              MOV      r1,r9
00042a  4638              MOV      r0,r7
00042c  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.1072|
000430  1e6d              SUBS     r5,r5,#1              ;309
000432  1c7f              ADDS     r7,r7,#1              ;309
000434  1c64              ADDS     r4,r4,#1              ;309
                  |L1.1078|
000436  2d00              CMP      r5,#0                 ;309
000438  dcf2              BGT      |L1.1056|
00043a  e00e              B        |L1.1114|
                  |L1.1084|
                          DCD      GUI_Context
                  |L1.1088|
;;;313              }
;;;314            }
;;;315          } else {
;;;316            for (; xsize > 0; xsize--, x++, p++) {
000440  e009              B        |L1.1110|
                  |L1.1090|
;;;317              Pixel = *p;
000442  7826              LDRB     r6,[r4,#0]
;;;318              if (Pixel) {
000444  b126              CBZ      r6,|L1.1104|
;;;319                LCD_L0_SetPixelIndex(x, y, Pixel);
000446  4632              MOV      r2,r6
000448  4649              MOV      r1,r9
00044a  4638              MOV      r0,r7
00044c  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.1104|
000450  1e6d              SUBS     r5,r5,#1              ;316
000452  1c7f              ADDS     r7,r7,#1              ;316
000454  1c64              ADDS     r4,r4,#1              ;316
                  |L1.1110|
000456  2d00              CMP      r5,#0                 ;316
000458  dcf3              BGT      |L1.1090|
                  |L1.1114|
;;;320              }
;;;321            }
;;;322          }
;;;323          break;
00045a  bf00              NOP      
                  |L1.1116|
00045c  bf00              NOP                            ;306
;;;324      }
;;;325    }
00045e  e8bd87f0          POP      {r4-r10,pc}
;;;326    #endif
                          ENDP

                  DrawBitLine16BPP PROC
;;;332    #if (LCD_BITSPERPIXEL > 8)
;;;333    static void  DrawBitLine16BPP(int x, int y, U16 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
000462  e92d47f0          PUSH     {r4-r10,lr}
000466  4607              MOV      r7,r0
000468  4689              MOV      r9,r1
00046a  4614              MOV      r4,r2
00046c  461d              MOV      r5,r3
00046e  f8dd8020          LDR      r8,[sp,#0x20]
;;;334      LCD_PIXELINDEX pixel;
;;;335      if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000472  487f              LDR      r0,|L1.1648|
000474  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000476  f0100f02          TST      r0,#2
00047a  d11c              BNE      |L1.1206|
;;;336        if (pTrans) {
00047c  f1b80f00          CMP      r8,#0
000480  d00d              BEQ      |L1.1182|
;;;337          for (; xsize > 0; xsize--, x++, p++) {
000482  e009              B        |L1.1176|
                  |L1.1156|
;;;338            pixel = *p;
000484  8826              LDRH     r6,[r4,#0]
;;;339            LCD_L0_SetPixelIndex(x, y, *(pTrans + pixel));
000486  f8382016          LDRH     r2,[r8,r6,LSL #1]
00048a  4649              MOV      r1,r9
00048c  4638              MOV      r0,r7
00048e  f7fffffe          BL       LCD_L0_SetPixelIndex
000492  1e6d              SUBS     r5,r5,#1              ;337
000494  1c7f              ADDS     r7,r7,#1              ;337
000496  1ca4              ADDS     r4,r4,#2              ;337
                  |L1.1176|
000498  2d00              CMP      r5,#0                 ;337
00049a  dcf3              BGT      |L1.1156|
00049c  e02a              B        |L1.1268|
                  |L1.1182|
;;;340          }
;;;341        } else {
;;;342          for (;xsize > 0; xsize--, x++, p++) {
00049e  e007              B        |L1.1200|
                  |L1.1184|
;;;343            LCD_L0_SetPixelIndex(x, y, *p);
0004a0  8822              LDRH     r2,[r4,#0]
0004a2  4649              MOV      r1,r9
0004a4  4638              MOV      r0,r7
0004a6  f7fffffe          BL       LCD_L0_SetPixelIndex
0004aa  1e6d              SUBS     r5,r5,#1              ;342
0004ac  1c7f              ADDS     r7,r7,#1              ;342
0004ae  1ca4              ADDS     r4,r4,#2              ;342
                  |L1.1200|
0004b0  2d00              CMP      r5,#0                 ;342
0004b2  dcf5              BGT      |L1.1184|
0004b4  e01e              B        |L1.1268|
                  |L1.1206|
;;;344          }
;;;345        }
;;;346      } else {
;;;347        if (pTrans) {
0004b6  f1b80f00          CMP      r8,#0
0004ba  d00e              BEQ      |L1.1242|
;;;348          for (; xsize > 0; xsize--, x++, p++) {
0004bc  e00a              B        |L1.1236|
                  |L1.1214|
;;;349            pixel = *p;
0004be  8826              LDRH     r6,[r4,#0]
;;;350            if (pixel) {
0004c0  b12e              CBZ      r6,|L1.1230|
;;;351              LCD_L0_SetPixelIndex(x, y, *(pTrans + pixel));
0004c2  f8382016          LDRH     r2,[r8,r6,LSL #1]
0004c6  4649              MOV      r1,r9
0004c8  4638              MOV      r0,r7
0004ca  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.1230|
0004ce  1e6d              SUBS     r5,r5,#1              ;348
0004d0  1c7f              ADDS     r7,r7,#1              ;348
0004d2  1ca4              ADDS     r4,r4,#2              ;348
                  |L1.1236|
0004d4  2d00              CMP      r5,#0                 ;348
0004d6  dcf2              BGT      |L1.1214|
0004d8  e00c              B        |L1.1268|
                  |L1.1242|
;;;352            }
;;;353          }
;;;354        } else {
;;;355          for (; xsize > 0; xsize--, x++, p++) {
0004da  e009              B        |L1.1264|
                  |L1.1244|
;;;356            pixel = *p;
0004dc  8826              LDRH     r6,[r4,#0]
;;;357            if (pixel) {
0004de  b126              CBZ      r6,|L1.1258|
;;;358              LCD_L0_SetPixelIndex(x, y, pixel);
0004e0  4632              MOV      r2,r6
0004e2  4649              MOV      r1,r9
0004e4  4638              MOV      r0,r7
0004e6  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.1258|
0004ea  1e6d              SUBS     r5,r5,#1              ;355
0004ec  1c7f              ADDS     r7,r7,#1              ;355
0004ee  1ca4              ADDS     r4,r4,#2              ;355
                  |L1.1264|
0004f0  2d00              CMP      r5,#0                 ;355
0004f2  dcf3              BGT      |L1.1244|
                  |L1.1268|
;;;359            }
;;;360          }
;;;361        }
;;;362      }
;;;363    }
0004f4  e8bd87f0          POP      {r4-r10,pc}
;;;364    #endif
                          ENDP

                  LCD_L0_XorPixel PROC
;;;426    */
;;;427    void LCD_L0_XorPixel(int x, int y) {
0004f8  b570              PUSH     {r4-r6,lr}
0004fa  4604              MOV      r4,r0
0004fc  460d              MOV      r5,r1
;;;428      LCD_PIXELINDEX PixelIndex = LCD_L0_GetPixelIndex(x, y);
0004fe  4629              MOV      r1,r5
000500  4620              MOV      r0,r4
000502  f7fffffe          BL       LCD_L0_GetPixelIndex
000506  b286              UXTH     r6,r0
;;;429      LCD_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - PixelIndex - 1);
000508  f5c63080          RSB      r0,r6,#0x10000
00050c  1e42              SUBS     r2,r0,#1
00050e  4629              MOV      r1,r5
000510  4620              MOV      r0,r4
000512  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;430    }
000516  bd70              POP      {r4-r6,pc}
;;;431    
                          ENDP

                  LCD_L0_DrawHLine PROC
;;;435    */
;;;436    void LCD_L0_DrawHLine  (int x0, int y,  int x1) {
000518  b570              PUSH     {r4-r6,lr}
00051a  4604              MOV      r4,r0
00051c  460e              MOV      r6,r1
00051e  4615              MOV      r5,r2
;;;437      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000520  4853              LDR      r0,|L1.1648|
000522  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000524  f0100f01          TST      r0,#1
000528  d008              BEQ      |L1.1340|
;;;438        for (; x0 <= x1; x0++) {
00052a  e004              B        |L1.1334|
                  |L1.1324|
;;;439          LCD_L0_XorPixel(x0, y);
00052c  4631              MOV      r1,r6
00052e  4620              MOV      r0,r4
000530  f7fffffe          BL       LCD_L0_XorPixel
000534  1c64              ADDS     r4,r4,#1              ;438
                  |L1.1334|
000536  42ac              CMP      r4,r5                 ;438
000538  ddf8              BLE      |L1.1324|
00053a  e009              B        |L1.1360|
                  |L1.1340|
;;;440        }
;;;441      } else {
;;;442        for (; x0 <= x1; x0++) {
00053c  e006              B        |L1.1356|
                  |L1.1342|
;;;443          LCD_L0_SetPixelIndex(x0, y, LCD_COLORINDEX);
00053e  484c              LDR      r0,|L1.1648|
000540  8842              LDRH     r2,[r0,#2]  ; GUI_Context
000542  4631              MOV      r1,r6
000544  4620              MOV      r0,r4
000546  f7fffffe          BL       LCD_L0_SetPixelIndex
00054a  1c64              ADDS     r4,r4,#1              ;442
                  |L1.1356|
00054c  42ac              CMP      r4,r5                 ;442
00054e  ddf6              BLE      |L1.1342|
                  |L1.1360|
;;;444        }
;;;445      }
;;;446    }
000550  bd70              POP      {r4-r6,pc}
;;;447    
                          ENDP

                  LCD_L0_DrawVLine PROC
;;;451    */
;;;452    void LCD_L0_DrawVLine  (int x, int y0,  int y1) {
000552  b570              PUSH     {r4-r6,lr}
000554  4606              MOV      r6,r0
000556  460c              MOV      r4,r1
000558  4615              MOV      r5,r2
;;;453      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00055a  4845              LDR      r0,|L1.1648|
00055c  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00055e  f0100f01          TST      r0,#1
000562  d008              BEQ      |L1.1398|
;;;454        for (; y0 <= y1; y0++) {
000564  e004              B        |L1.1392|
                  |L1.1382|
;;;455          LCD_L0_XorPixel(x, y0);
000566  4621              MOV      r1,r4
000568  4630              MOV      r0,r6
00056a  f7fffffe          BL       LCD_L0_XorPixel
00056e  1c64              ADDS     r4,r4,#1              ;454
                  |L1.1392|
000570  42ac              CMP      r4,r5                 ;454
000572  ddf8              BLE      |L1.1382|
000574  e009              B        |L1.1418|
                  |L1.1398|
;;;456        }
;;;457      } else {
;;;458        for (; y0 <= y1; y0++) {
000576  e006              B        |L1.1414|
                  |L1.1400|
;;;459          LCD_L0_SetPixelIndex(x, y0, LCD_COLORINDEX);
000578  483d              LDR      r0,|L1.1648|
00057a  8842              LDRH     r2,[r0,#2]  ; GUI_Context
00057c  4621              MOV      r1,r4
00057e  4630              MOV      r0,r6
000580  f7fffffe          BL       LCD_L0_SetPixelIndex
000584  1c64              ADDS     r4,r4,#1              ;458
                  |L1.1414|
000586  42ac              CMP      r4,r5                 ;458
000588  ddf6              BLE      |L1.1400|
                  |L1.1418|
;;;460        }
;;;461      }
;;;462    }
00058a  bd70              POP      {r4-r6,pc}
;;;463    
                          ENDP

                  LCD_L0_FillRect PROC
;;;467    */
;;;468    void LCD_L0_FillRect(int x0, int y0, int x1, int y1) {
00058c  e92d41f0          PUSH     {r4-r8,lr}
000590  4606              MOV      r6,r0
000592  460c              MOV      r4,r1
000594  4617              MOV      r7,r2
000596  461d              MOV      r5,r3
;;;469      for (; y0 <= y1; y0++) {
000598  e005              B        |L1.1446|
                  |L1.1434|
;;;470        LCD_L0_DrawHLine(x0, y0, x1);
00059a  463a              MOV      r2,r7
00059c  4621              MOV      r1,r4
00059e  4630              MOV      r0,r6
0005a0  f7fffffe          BL       LCD_L0_DrawHLine
0005a4  1c64              ADDS     r4,r4,#1              ;469
                  |L1.1446|
0005a6  42ac              CMP      r4,r5                 ;469
0005a8  ddf7              BLE      |L1.1434|
;;;471      }
;;;472    }
0005aa  e8bd81f0          POP      {r4-r8,pc}
;;;473    
                          ENDP

                  LCD_L0_DrawBitmap PROC
;;;477    */
;;;478    void LCD_L0_DrawBitmap(int x0, int y0,
0005ae  e92d5ffc          PUSH     {r2-r12,lr}
;;;479                           int xsize, int ysize,
;;;480                           int BitsPerPixel, 
;;;481                           int BytesPerLine,
;;;482                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;483                           const LCD_PIXELINDEX* pTrans)
;;;484    {
0005b2  4682              MOV      r10,r0
0005b4  460d              MOV      r5,r1
0005b6  4616              MOV      r6,r2
0005b8  4698              MOV      r8,r3
0005ba  f8ddb030          LDR      r11,[sp,#0x30]
0005be  f8dd9038          LDR      r9,[sp,#0x38]
0005c2  9f10              LDR      r7,[sp,#0x40]
;;;485      int i;
;;;486      /* Use _DrawBitLineXBPP */
;;;487      for (i=0; i<ysize; i++) {
0005c4  2400              MOVS     r4,#0
0005c6  e040              B        |L1.1610|
                  |L1.1480|
;;;488        switch (BitsPerPixel) {
0005c8  f1bb0f04          CMP      r11,#4
0005cc  d020              BEQ      |L1.1552|
0005ce  dc06              BGT      |L1.1502|
0005d0  f1bb0f01          CMP      r11,#1
0005d4  d00a              BEQ      |L1.1516|
0005d6  f1bb0f02          CMP      r11,#2
0005da  d132              BNE      |L1.1602|
0005dc  e00f              B        |L1.1534|
                  |L1.1502|
0005de  f1bb0f08          CMP      r11,#8
0005e2  d01e              BEQ      |L1.1570|
0005e4  f1bb0f10          CMP      r11,#0x10
0005e8  d12b              BNE      |L1.1602|
0005ea  e022              B        |L1.1586|
                  |L1.1516|
;;;489        case 1:
;;;490          _DrawBitLine1BPP(x0, i + y0, pData, Diff, xsize, pTrans);
0005ec  1961              ADDS     r1,r4,r5
0005ee  e9cd6700          STRD     r6,r7,[sp,#0]
0005f2  464a              MOV      r2,r9
0005f4  4650              MOV      r0,r10
0005f6  9b0f              LDR      r3,[sp,#0x3c]
0005f8  f7fffffe          BL       _DrawBitLine1BPP
;;;491          break;
0005fc  e021              B        |L1.1602|
                  |L1.1534|
;;;492        #if (LCD_MAX_LOG_COLORS > 2)
;;;493          case 2:
;;;494            _DrawBitLine2BPP(x0, i + y0, pData, Diff, xsize, pTrans);
0005fe  1961              ADDS     r1,r4,r5
000600  e9cd6700          STRD     r6,r7,[sp,#0]
000604  464a              MOV      r2,r9
000606  4650              MOV      r0,r10
000608  9b0f              LDR      r3,[sp,#0x3c]
00060a  f7fffffe          BL       _DrawBitLine2BPP
;;;495            break;
00060e  e018              B        |L1.1602|
                  |L1.1552|
;;;496        #endif
;;;497        #if (LCD_MAX_LOG_COLORS > 4)
;;;498          case 4:
;;;499            _DrawBitLine4BPP(x0, i + y0, pData, Diff, xsize, pTrans);
000610  1961              ADDS     r1,r4,r5
000612  e9cd6700          STRD     r6,r7,[sp,#0]
000616  464a              MOV      r2,r9
000618  4650              MOV      r0,r10
00061a  9b0f              LDR      r3,[sp,#0x3c]
00061c  f7fffffe          BL       _DrawBitLine4BPP
;;;500            break;
000620  e00f              B        |L1.1602|
                  |L1.1570|
;;;501        #endif
;;;502        #if (LCD_MAX_LOG_COLORS > 16)
;;;503          case 8:
;;;504            _DrawBitLine8BPP(x0, i + y0, pData, xsize, pTrans);
000622  1961              ADDS     r1,r4,r5
000624  4633              MOV      r3,r6
000626  464a              MOV      r2,r9
000628  4650              MOV      r0,r10
00062a  9700              STR      r7,[sp,#0]
00062c  f7fffffe          BL       _DrawBitLine8BPP
;;;505            break;
000630  e007              B        |L1.1602|
                  |L1.1586|
;;;506        #endif
;;;507        #if (LCD_BITSPERPIXEL > 8)
;;;508          case 16:
;;;509            DrawBitLine16BPP(x0, i + y0, (const U16 *)pData, xsize, pTrans);
000632  1961              ADDS     r1,r4,r5
000634  4633              MOV      r3,r6
000636  464a              MOV      r2,r9
000638  4650              MOV      r0,r10
00063a  9700              STR      r7,[sp,#0]
00063c  f7fffffe          BL       DrawBitLine16BPP
;;;510            break;
000640  bf00              NOP      
                  |L1.1602|
000642  bf00              NOP                            ;491
;;;511        #endif
;;;512        }
;;;513        pData += BytesPerLine;
000644  980d              LDR      r0,[sp,#0x34]
000646  4481              ADD      r9,r9,r0
000648  1c64              ADDS     r4,r4,#1              ;487
                  |L1.1610|
00064a  4544              CMP      r4,r8                 ;487
00064c  dbbc              BLT      |L1.1480|
;;;514      }
;;;515    }
00064e  e8bd9ffc          POP      {r2-r12,pc}
;;;516    
                          ENDP

                  LCD_L0_SetOrg PROC
;;;520    */
;;;521    void LCD_L0_SetOrg(int x, int y) {
000652  bf00              NOP      
;;;522      GUI_USE_PARA(x);
;;;523      GUI_USE_PARA(y);
000654  bf00              NOP      
;;;524    }
000656  4770              BX       lr
;;;525    
                          ENDP

                  LCD_L0_On PROC
;;;529    */
;;;530    void LCD_On (void) {
000658  4770              BX       lr
;;;531    #ifdef LCD_ON
;;;532      LCD_ON();
;;;533    #endif
;;;534    }
;;;535    
                          ENDP

                  LCD_L0_Off PROC
;;;536    void LCD_Off (void) {
00065a  4770              BX       lr
;;;537    #ifdef LCD_OFF
;;;538      LCD_OFF();
;;;539    #endif
;;;540    }
;;;541    
                          ENDP

                  LCD_L0_Init PROC
;;;548    */
;;;549    int  LCD_L0_Init(void) {
00065c  b510              PUSH     {r4,lr}
;;;550      LCD_INIT_CONTROLLER();
00065e  f7fffffe          BL       STM3210E_LCD_Init
000662  f7fffffe          BL       Touch_Init
;;;551      return 0;
000666  2000              MOVS     r0,#0
;;;552    }
000668  bd10              POP      {r4,pc}
;;;553    
                          ENDP

                  LCD_L0_SetLUTEntry PROC
;;;557    */
;;;558    void LCD_L0_SetLUTEntry(U8 Pos, LCD_COLOR Color) {
00066a  bf00              NOP      
;;;559      GUI_USE_PARA(Pos);
;;;560      GUI_USE_PARA(Color);
00066c  bf00              NOP      
;;;561    }
00066e  4770              BX       lr
;;;562    
                          ENDP

                  |L1.1648|
                          DCD      GUI_Context
