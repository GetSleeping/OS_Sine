; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\framewin_setresizeable.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\framewin_setresizeable.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\framewin_setresizeable.crf ..\Ucgui\GUI\Widget\FRAMEWIN_SetResizeable.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetResizeCursor PROC
;;;247    #if GUI_SUPPORT_CURSOR
;;;248    static void _SetResizeCursor(int Mode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;249      const GUI_CURSOR GUI_UNI_PTR * pNewCursor = NULL;
000004  2500              MOVS     r5,#0
;;;250      if (Mode) {
000006  b194              CBZ      r4,|L1.46|
;;;251        int Direction;
;;;252        Direction = Mode & (FRAMEWIN_RESIZE_X | FRAMEWIN_RESIZE_Y);
000008  f0040003          AND      r0,r4,#3
;;;253        if (Direction == FRAMEWIN_RESIZE_X) {
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L1.20|
;;;254          pNewCursor = &_ResizeCursorH;
000010  4dcb              LDR      r5,|L1.832|
000012  e00b              B        |L1.44|
                  |L1.20|
;;;255        } else if (Direction == FRAMEWIN_RESIZE_Y) {
000014  2802              CMP      r0,#2
000016  d101              BNE      |L1.28|
;;;256          pNewCursor = &_ResizeCursorV;
000018  4dca              LDR      r5,|L1.836|
00001a  e007              B        |L1.44|
                  |L1.28|
;;;257        } else {
;;;258          Direction = Mode & (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y);
00001c  f004000c          AND      r0,r4,#0xc
;;;259          if ((Direction == (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y)) || !Direction) {
000020  280c              CMP      r0,#0xc
000022  d000              BEQ      |L1.38|
000024  b908              CBNZ     r0,|L1.42|
                  |L1.38|
;;;260            pNewCursor = &_ResizeCursorDD;
000026  4dc8              LDR      r5,|L1.840|
000028  e000              B        |L1.44|
                  |L1.42|
;;;261          } else {
;;;262            pNewCursor = &_ResizeCursorDU;
00002a  4dc8              LDR      r5,|L1.844|
                  |L1.44|
;;;263          }
;;;264        }
;;;265      }
00002c  bf00              NOP      
                  |L1.46|
;;;266      if (pNewCursor) {
00002e  b14d              CBZ      r5,|L1.68|
;;;267        const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;268        pOldCursor = GUI_CURSOR_Select(pNewCursor);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GUI_CURSOR_Select
000036  4606              MOV      r6,r0
;;;269        if (_pOldCursor == NULL) {
000038  48c5              LDR      r0,|L1.848|
00003a  6800              LDR      r0,[r0,#0]  ; _pOldCursor
00003c  b908              CBNZ     r0,|L1.66|
;;;270          _pOldCursor = pOldCursor;
00003e  48c4              LDR      r0,|L1.848|
000040  6006              STR      r6,[r0,#0]  ; _pOldCursor
                  |L1.66|
;;;271        }
;;;272      } else if (_pOldCursor) {
000042  e009              B        |L1.88|
                  |L1.68|
000044  48c2              LDR      r0,|L1.848|
000046  6800              LDR      r0,[r0,#0]  ; _pOldCursor
000048  b130              CBZ      r0,|L1.88|
;;;273        GUI_CURSOR_Select(_pOldCursor);
00004a  48c1              LDR      r0,|L1.848|
00004c  6800              LDR      r0,[r0,#0]  ; _pOldCursor
00004e  f7fffffe          BL       GUI_CURSOR_Select
;;;274        _pOldCursor = NULL;
000052  2000              MOVS     r0,#0
000054  49be              LDR      r1,|L1.848|
000056  6008              STR      r0,[r1,#0]  ; _pOldCursor
                  |L1.88|
;;;275      }
;;;276    }
000058  bd70              POP      {r4-r6,pc}
;;;277    #endif
                          ENDP

                  _SetCapture PROC
;;;282    */
;;;283    static void _SetCapture(FRAMEWIN_Handle hWin, int x, int y, int Mode) {
00005a  e92d41f0          PUSH     {r4-r8,lr}
00005e  4607              MOV      r7,r0
000060  460d              MOV      r5,r1
000062  4616              MOV      r6,r2
000064  461c              MOV      r4,r3
;;;284      if ((_CaptureFlags & FRAMEWIN_REPOS_X) == 0) {
000066  48bb              LDR      r0,|L1.852|
000068  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
00006a  f0100f04          TST      r0,#4
00006e  d101              BNE      |L1.116|
;;;285        _CaptureX = x;
000070  48b9              LDR      r0,|L1.856|
000072  6005              STR      r5,[r0,#0]  ; _CaptureX
                  |L1.116|
;;;286      }
;;;287      if ((_CaptureFlags & FRAMEWIN_REPOS_Y) == 0) {
000074  48b7              LDR      r0,|L1.852|
000076  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
000078  f0100f08          TST      r0,#8
00007c  d101              BNE      |L1.130|
;;;288        _CaptureY = y;
00007e  48b7              LDR      r0,|L1.860|
000080  6006              STR      r6,[r0,#0]  ; _CaptureY
                  |L1.130|
;;;289      }
;;;290      if (Mode) {
000082  b194              CBZ      r4,|L1.170|
;;;291        if (WM_HasCaptured(hWin) == 0) {
000084  4638              MOV      r0,r7
000086  f7fffffe          BL       WM_HasCaptured
00008a  b918              CBNZ     r0,|L1.148|
;;;292          WM_SetCapture(hWin, 0);
00008c  2100              MOVS     r1,#0
00008e  4638              MOV      r0,r7
000090  f7fffffe          BL       WM_SetCapture
                  |L1.148|
;;;293        }
;;;294      #if GUI_SUPPORT_CURSOR
;;;295        _SetResizeCursor(Mode);
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       _SetResizeCursor
;;;296      #endif
;;;297        if (Mode & FRAMEWIN_MOUSEOVER) {
00009a  f0140f10          TST      r4,#0x10
00009e  d000              BEQ      |L1.162|
;;;298          Mode = 0;
0000a0  2400              MOVS     r4,#0
                  |L1.162|
;;;299        }
;;;300        _CaptureFlags = (Mode | FRAMEWIN_MOUSEOVER);
0000a2  f0440010          ORR      r0,r4,#0x10
0000a6  49ab              LDR      r1,|L1.852|
0000a8  6008              STR      r0,[r1,#0]  ; _CaptureFlags
                  |L1.170|
;;;301      }
;;;302    }
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;303    
                          ENDP

                  _ChangeWindowPosSize PROC
;;;307    */
;;;308    static void _ChangeWindowPosSize(FRAMEWIN_Handle hWin, int* px, int* py) {
0000ae  e92d41fc          PUSH     {r2-r8,lr}
0000b2  4680              MOV      r8,r0
0000b4  460c              MOV      r4,r1
0000b6  4615              MOV      r5,r2
;;;309      int dx = 0, dy = 0;
0000b8  2600              MOVS     r6,#0
0000ba  2700              MOVS     r7,#0
;;;310      GUI_RECT Rect;
;;;311      WM_GetClientRectEx(hWin, &Rect);
0000bc  4669              MOV      r1,sp
0000be  4640              MOV      r0,r8
0000c0  f7fffffe          BL       WM_GetClientRectEx
;;;312      /* Calculate new size of window */
;;;313      if (_CaptureFlags & FRAMEWIN_RESIZE_X) {
0000c4  48a3              LDR      r0,|L1.852|
0000c6  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
0000c8  f0100f01          TST      r0,#1
0000cc  d00e              BEQ      |L1.236|
;;;314        dx = (_CaptureFlags & FRAMEWIN_REPOS_X) ? (_CaptureX - *px) : (*px - _CaptureX);
0000ce  48a1              LDR      r0,|L1.852|
0000d0  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
0000d2  f0100f04          TST      r0,#4
0000d6  d004              BEQ      |L1.226|
0000d8  499f              LDR      r1,|L1.856|
0000da  6820              LDR      r0,[r4,#0]
0000dc  6809              LDR      r1,[r1,#0]  ; _CaptureX
0000de  1a08              SUBS     r0,r1,r0
0000e0  e003              B        |L1.234|
                  |L1.226|
0000e2  499d              LDR      r1,|L1.856|
0000e4  6820              LDR      r0,[r4,#0]
0000e6  6809              LDR      r1,[r1,#0]  ; _CaptureX
0000e8  1a40              SUBS     r0,r0,r1
                  |L1.234|
0000ea  4606              MOV      r6,r0
                  |L1.236|
;;;315      }
;;;316      if (_CaptureFlags & FRAMEWIN_RESIZE_Y) {
0000ec  4899              LDR      r0,|L1.852|
0000ee  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
0000f0  f0100f02          TST      r0,#2
0000f4  d00e              BEQ      |L1.276|
;;;317        dy = (_CaptureFlags & FRAMEWIN_REPOS_Y) ? (_CaptureY - *py) : (*py - _CaptureY);
0000f6  4897              LDR      r0,|L1.852|
0000f8  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
0000fa  f0100f08          TST      r0,#8
0000fe  d004              BEQ      |L1.266|
000100  4996              LDR      r1,|L1.860|
000102  6828              LDR      r0,[r5,#0]
000104  6809              LDR      r1,[r1,#0]  ; _CaptureY
000106  1a08              SUBS     r0,r1,r0
000108  e003              B        |L1.274|
                  |L1.266|
00010a  4994              LDR      r1,|L1.860|
00010c  6828              LDR      r0,[r5,#0]
00010e  6809              LDR      r1,[r1,#0]  ; _CaptureY
000110  1a40              SUBS     r0,r0,r1
                  |L1.274|
000112  4607              MOV      r7,r0
                  |L1.276|
;;;318      }
;;;319      /* Check the minimal size of window */
;;;320      if ((Rect.x1 + dx + 1) < FRAMEWIN_MINSIZE_X) {
000114  f9bd0004          LDRSH    r0,[sp,#4]
000118  4430              ADD      r0,r0,r6
00011a  1c40              ADDS     r0,r0,#1
00011c  2814              CMP      r0,#0x14
00011e  da07              BGE      |L1.304|
;;;321        dx = FRAMEWIN_MINSIZE_X - Rect.x1 - 1;
000120  f9bd0004          LDRSH    r0,[sp,#4]
000124  f1c00613          RSB      r6,r0,#0x13
;;;322        *px = _CaptureX + dx;
000128  488b              LDR      r0,|L1.856|
00012a  6800              LDR      r0,[r0,#0]  ; _CaptureX
00012c  4430              ADD      r0,r0,r6
00012e  6020              STR      r0,[r4,#0]
                  |L1.304|
;;;323      }
;;;324      if ((Rect.y1 + dy + 1) < FRAMEWIN_MINSIZE_Y) {
000130  f9bd0006          LDRSH    r0,[sp,#6]
000134  4438              ADD      r0,r0,r7
000136  1c40              ADDS     r0,r0,#1
000138  2814              CMP      r0,#0x14
00013a  da07              BGE      |L1.332|
;;;325        dy = FRAMEWIN_MINSIZE_Y - Rect.y1 - 1;
00013c  f9bd0006          LDRSH    r0,[sp,#6]
000140  f1c00713          RSB      r7,r0,#0x13
;;;326        *py = _CaptureY + dy;
000144  4885              LDR      r0,|L1.860|
000146  6800              LDR      r0,[r0,#0]  ; _CaptureY
000148  4438              ADD      r0,r0,r7
00014a  6028              STR      r0,[r5,#0]
                  |L1.332|
;;;327      }
;;;328      /* Set new window position */
;;;329      if (_CaptureFlags & FRAMEWIN_REPOS_X) {
00014c  4881              LDR      r0,|L1.852|
00014e  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
000150  f0100f04          TST      r0,#4
000154  d004              BEQ      |L1.352|
;;;330        WM_MoveWindow(hWin, -dx, 0);
000156  2200              MOVS     r2,#0
000158  4271              RSBS     r1,r6,#0
00015a  4640              MOV      r0,r8
00015c  f7fffffe          BL       WM_MoveWindow
                  |L1.352|
;;;331      }
;;;332      if (_CaptureFlags & FRAMEWIN_REPOS_Y) {
000160  487c              LDR      r0,|L1.852|
000162  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
000164  f0100f08          TST      r0,#8
000168  d004              BEQ      |L1.372|
;;;333        WM_MoveWindow(hWin, 0, -dy);
00016a  427a              RSBS     r2,r7,#0
00016c  2100              MOVS     r1,#0
00016e  4640              MOV      r0,r8
000170  f7fffffe          BL       WM_MoveWindow
                  |L1.372|
;;;334      }
;;;335      /* Set new window size */
;;;336      WM_ResizeWindow(hWin, dx, dy);
000174  463a              MOV      r2,r7
000176  4631              MOV      r1,r6
000178  4640              MOV      r0,r8
00017a  f7fffffe          BL       WM_ResizeWindow
;;;337    }
00017e  e8bd81fc          POP      {r2-r8,pc}
;;;338    
                          ENDP

                  _CheckBorderX PROC
;;;342    */
;;;343    static int _CheckBorderX(int x, int x1, int Border) {
000182  b510              PUSH     {r4,lr}
000184  4603              MOV      r3,r0
;;;344      int Mode = 0;
000186  2000              MOVS     r0,#0
;;;345      if (x > (x1 - Border)) {
000188  1a8c              SUBS     r4,r1,r2
00018a  429c              CMP      r4,r3
00018c  da01              BGE      |L1.402|
;;;346        Mode = FRAMEWIN_RESIZE_X;
00018e  2001              MOVS     r0,#1
000190  e002              B        |L1.408|
                  |L1.402|
;;;347      } else if (x < (Border)) {
000192  4293              CMP      r3,r2
000194  da00              BGE      |L1.408|
;;;348        Mode = FRAMEWIN_RESIZE_X | FRAMEWIN_REPOS_X;
000196  2005              MOVS     r0,#5
                  |L1.408|
;;;349      }
;;;350      return Mode;
;;;351    }
000198  bd10              POP      {r4,pc}
;;;352    
                          ENDP

                  _CheckBorderY PROC
;;;356    */
;;;357    static int _CheckBorderY(int y, int y1, int Border) {
00019a  b510              PUSH     {r4,lr}
00019c  4603              MOV      r3,r0
;;;358      int Mode = 0;
00019e  2000              MOVS     r0,#0
;;;359      if (y > (y1 - Border)) {
0001a0  1a8c              SUBS     r4,r1,r2
0001a2  429c              CMP      r4,r3
0001a4  da01              BGE      |L1.426|
;;;360        Mode = FRAMEWIN_RESIZE_Y;
0001a6  2002              MOVS     r0,#2
0001a8  e002              B        |L1.432|
                  |L1.426|
;;;361      } else if (y < (Border)) {
0001aa  4293              CMP      r3,r2
0001ac  da00              BGE      |L1.432|
;;;362        Mode = FRAMEWIN_RESIZE_Y | FRAMEWIN_REPOS_Y;
0001ae  200a              MOVS     r0,#0xa
                  |L1.432|
;;;363      }
;;;364      return Mode;
;;;365    }
0001b0  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  _CheckReactBorder PROC
;;;370    */
;;;371    static int _CheckReactBorder(FRAMEWIN_Handle hWin, int x, int y) {
0001b2  e92d41fc          PUSH     {r2-r8,lr}
0001b6  4607              MOV      r7,r0
0001b8  460d              MOV      r5,r1
0001ba  4616              MOV      r6,r2
;;;372      int Mode = 0;
0001bc  2400              MOVS     r4,#0
;;;373      GUI_RECT r;
;;;374      WM_GetClientRectEx(hWin, &r);
0001be  4669              MOV      r1,sp
0001c0  4638              MOV      r0,r7
0001c2  f7fffffe          BL       WM_GetClientRectEx
;;;375      if ((x >= 0) && (y >= 0) && (x <= r.x1) && (y <= r.y1)) {
0001c6  2d00              CMP      r5,#0
0001c8  db28              BLT      |L1.540|
0001ca  2e00              CMP      r6,#0
0001cc  db26              BLT      |L1.540|
0001ce  f9bd0004          LDRSH    r0,[sp,#4]
0001d2  42a8              CMP      r0,r5
0001d4  db22              BLT      |L1.540|
0001d6  f9bd0006          LDRSH    r0,[sp,#6]
0001da  42b0              CMP      r0,r6
0001dc  db1e              BLT      |L1.540|
;;;376        Mode |= _CheckBorderX(x, r.x1, FRAMEWIN_REACT_BORDER);
0001de  f9bd1004          LDRSH    r1,[sp,#4]
0001e2  2203              MOVS     r2,#3
0001e4  4628              MOV      r0,r5
0001e6  f7fffffe          BL       _CheckBorderX
0001ea  4304              ORRS     r4,r4,r0
;;;377        if (Mode) {
0001ec  b13c              CBZ      r4,|L1.510|
;;;378          Mode |= _CheckBorderY(y, r.y1, 4 * FRAMEWIN_REACT_BORDER);
0001ee  f9bd1006          LDRSH    r1,[sp,#6]
0001f2  220c              MOVS     r2,#0xc
0001f4  4630              MOV      r0,r6
0001f6  f7fffffe          BL       _CheckBorderY
0001fa  4304              ORRS     r4,r4,r0
0001fc  e00e              B        |L1.540|
                  |L1.510|
;;;379        } else {
;;;380          Mode |= _CheckBorderY(y, r.y1, FRAMEWIN_REACT_BORDER);
0001fe  f9bd1006          LDRSH    r1,[sp,#6]
000202  2203              MOVS     r2,#3
000204  4630              MOV      r0,r6
000206  f7fffffe          BL       _CheckBorderY
00020a  4304              ORRS     r4,r4,r0
;;;381          if (Mode) {
00020c  b134              CBZ      r4,|L1.540|
;;;382            Mode |= _CheckBorderX(x, r.x1, 4 * FRAMEWIN_REACT_BORDER);
00020e  f9bd1004          LDRSH    r1,[sp,#4]
000212  220c              MOVS     r2,#0xc
000214  4628              MOV      r0,r5
000216  f7fffffe          BL       _CheckBorderX
00021a  4304              ORRS     r4,r4,r0
                  |L1.540|
;;;383          }
;;;384        }
;;;385      }
;;;386      return Mode;
00021c  4620              MOV      r0,r4
;;;387    }
00021e  e8bd81fc          POP      {r2-r8,pc}
;;;388    
                          ENDP

                  _OnTouch PROC
;;;392    */
;;;393    static int _OnTouch(FRAMEWIN_Handle hWin, WM_MESSAGE* pMsg) {
000222  e92d41fc          PUSH     {r2-r8,lr}
000226  4607              MOV      r7,r0
000228  460d              MOV      r5,r1
;;;394      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
00022a  68ac              LDR      r4,[r5,#8]
;;;395      if (pState) {  /* Something happened in our area (pressed or released) */
00022c  2c00              CMP      r4,#0
00022e  d03d              BEQ      |L1.684|
;;;396        int x, y, Mode;
;;;397        x    = pState->x;
000230  6820              LDR      r0,[r4,#0]
000232  9001              STR      r0,[sp,#4]
;;;398        y    = pState->y;
000234  6860              LDR      r0,[r4,#4]
000236  9000              STR      r0,[sp,#0]
;;;399        Mode = _CheckReactBorder(hWin, x, y);
000238  4638              MOV      r0,r7
00023a  e9dd2100          LDRD     r2,r1,[sp,#0]
00023e  f7fffffe          BL       _CheckReactBorder
000242  4606              MOV      r6,r0
;;;400        if (pState->Pressed == 1) {
000244  7a20              LDRB     r0,[r4,#8]
000246  2801              CMP      r0,#1
000248  d121              BNE      |L1.654|
;;;401          if (_CaptureFlags & FRAMEWIN_RESIZE) {
00024a  4842              LDR      r0,|L1.852|
00024c  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
00024e  f0100f0f          TST      r0,#0xf
000252  d00d              BEQ      |L1.624|
;;;402            _ChangeWindowPosSize(hWin, &x, &y);
000254  466a              MOV      r2,sp
000256  a901              ADD      r1,sp,#4
000258  4638              MOV      r0,r7
00025a  f7fffffe          BL       _ChangeWindowPosSize
;;;403            _SetCapture(hWin, x, y, 0);
00025e  2300              MOVS     r3,#0
000260  4638              MOV      r0,r7
000262  e9dd2100          LDRD     r2,r1,[sp,#0]
000266  f7fffffe          BL       _SetCapture
;;;404            return 1;
00026a  2001              MOVS     r0,#1
                  |L1.620|
;;;405          } else if (Mode) {
;;;406            WM_SetFocus(hWin);
;;;407            WM_BringToTop(hWin);
;;;408            _SetCapture(hWin, x, y, Mode);
;;;409            return 1;
;;;410          }
;;;411          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;412          else if (_CaptureFlags) {
;;;413            WM_ReleaseCapture();
;;;414            return 1;
;;;415          }
;;;416          #endif
;;;417        } else if (WM_HasCaptured(hWin)) {
;;;418          _CaptureFlags &= ~(FRAMEWIN_RESIZE);
;;;419          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;420            if (!Mode)
;;;421          #endif
;;;422          {
;;;423            WM_ReleaseCapture();
;;;424          }
;;;425          return 1;
;;;426        }
;;;427      }
;;;428      return 0;
;;;429    }
00026c  e8bd81fc          POP      {r2-r8,pc}
                  |L1.624|
000270  b1de              CBZ      r6,|L1.682|
000272  4638              MOV      r0,r7                 ;406
000274  f7fffffe          BL       WM_SetFocus
000278  4638              MOV      r0,r7                 ;407
00027a  f7fffffe          BL       WM_BringToTop
00027e  4633              MOV      r3,r6                 ;408
000280  4638              MOV      r0,r7                 ;408
000282  e9dd2100          LDRD     r2,r1,[sp,#0]         ;408
000286  f7fffffe          BL       _SetCapture
00028a  2001              MOVS     r0,#1                 ;409
00028c  e7ee              B        |L1.620|
                  |L1.654|
00028e  4638              MOV      r0,r7                 ;417
000290  f7fffffe          BL       WM_HasCaptured
000294  b148              CBZ      r0,|L1.682|
000296  482f              LDR      r0,|L1.852|
000298  6800              LDR      r0,[r0,#0]            ;418  ; _CaptureFlags
00029a  f020000f          BIC      r0,r0,#0xf            ;418
00029e  492d              LDR      r1,|L1.852|
0002a0  6008              STR      r0,[r1,#0]            ;418  ; _CaptureFlags
0002a2  f7fffffe          BL       WM_ReleaseCapture
0002a6  2001              MOVS     r0,#1                 ;425
0002a8  e7e0              B        |L1.620|
                  |L1.682|
0002aa  bf00              NOP                            ;427
                  |L1.684|
0002ac  2000              MOVS     r0,#0                 ;428
0002ae  e7dd              B        |L1.620|
;;;430    
                          ENDP

                  _HOOKFUNC_Resizeable PROC
;;;490    */
;;;491    static int _HOOKFUNC_Resizeable(WM_MESSAGE* pMsg) {
0002b0  b570              PUSH     {r4-r6,lr}
0002b2  4604              MOV      r4,r0
;;;492      WM_HWIN hWin = pMsg->hWin;
0002b4  f9b45004          LDRSH    r5,[r4,#4]
;;;493      if (WM_HasCaptured(hWin) && (_CaptureFlags == 0)) {
0002b8  4628              MOV      r0,r5
0002ba  f7fffffe          BL       WM_HasCaptured
0002be  b120              CBZ      r0,|L1.714|
0002c0  4824              LDR      r0,|L1.852|
0002c2  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
0002c4  b908              CBNZ     r0,|L1.714|
;;;494        return 0;
0002c6  2000              MOVS     r0,#0
                  |L1.712|
;;;495      }
;;;496      if (FRAMEWIN_IsMinimized(hWin) || FRAMEWIN_IsMaximized(hWin)) {
;;;497        return 0;
;;;498      }
;;;499      switch(pMsg->MsgId) {
;;;500      case WM_TOUCH:
;;;501        return _OnTouch(hWin, pMsg);
;;;502    #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;503      case WM_MOUSEOVER:
;;;504        return _OnMouseOver(hWin, pMsg);
;;;505    #endif
;;;506      case WM_CAPTURE_RELEASED:
;;;507      #if GUI_SUPPORT_CURSOR
;;;508        _SetResizeCursor(0);
;;;509      #endif
;;;510        _CaptureFlags = 0;
;;;511        return 1;
;;;512      }
;;;513      return 0;
;;;514    }
0002c8  bd70              POP      {r4-r6,pc}
                  |L1.714|
0002ca  4628              MOV      r0,r5                 ;496
0002cc  f7fffffe          BL       FRAMEWIN_IsMinimized
0002d0  b918              CBNZ     r0,|L1.730|
0002d2  4628              MOV      r0,r5                 ;496
0002d4  f7fffffe          BL       FRAMEWIN_IsMaximized
0002d8  b108              CBZ      r0,|L1.734|
                  |L1.730|
0002da  2000              MOVS     r0,#0                 ;497
0002dc  e7f4              B        |L1.712|
                  |L1.734|
0002de  6820              LDR      r0,[r4,#0]            ;499
0002e0  280c              CMP      r0,#0xc               ;499
0002e2  d002              BEQ      |L1.746|
0002e4  2818              CMP      r0,#0x18              ;499
0002e6  d10d              BNE      |L1.772|
0002e8  e004              B        |L1.756|
                  |L1.746|
0002ea  4621              MOV      r1,r4                 ;501
0002ec  4628              MOV      r0,r5                 ;501
0002ee  f7fffffe          BL       _OnTouch
0002f2  e7e9              B        |L1.712|
                  |L1.756|
0002f4  2000              MOVS     r0,#0                 ;508
0002f6  f7fffffe          BL       _SetResizeCursor
0002fa  2000              MOVS     r0,#0                 ;510
0002fc  4915              LDR      r1,|L1.852|
0002fe  6008              STR      r0,[r1,#0]            ;510  ; _CaptureFlags
000300  2001              MOVS     r0,#1                 ;511
000302  e7e1              B        |L1.712|
                  |L1.772|
000304  2000              MOVS     r0,#0                 ;513
000306  e7df              B        |L1.712|
;;;515    
                          ENDP

                  FRAMEWIN_SetResizeable PROC
;;;525    */
;;;526    void FRAMEWIN_SetResizeable(FRAMEWIN_Handle hObj, int State) {
000308  b570              PUSH     {r4-r6,lr}
00030a  4605              MOV      r5,r0
00030c  460e              MOV      r6,r1
;;;527      if (hObj) {
00030e  b1b5              CBZ      r5,|L1.830|
;;;528        FRAMEWIN_Obj* pObj;
;;;529        WM_LOCK();
000310  f7fffffe          BL       GUI_Lock
;;;530        pObj = FRAMEWIN_H2P(hObj);
000314  4628              MOV      r0,r5
000316  f7fffffe          BL       GUI_ALLOC_h2p
00031a  4604              MOV      r4,r0
;;;531        if (pObj) {
00031c  b164              CBZ      r4,|L1.824|
;;;532          if (State) {
00031e  b136              CBZ      r6,|L1.814|
;;;533            GUI_HOOK_Add(&pObj->pFirstHook, &_HOOK_Resizeable, &_HOOKFUNC_Resizeable);
000320  4a0f              LDR      r2,|L1.864|
000322  4910              LDR      r1,|L1.868|
000324  f1040064          ADD      r0,r4,#0x64
000328  f7fffffe          BL       GUI_HOOK_Add
00032c  e004              B        |L1.824|
                  |L1.814|
;;;534          } else {
;;;535            GUI_HOOK_Remove(&pObj->pFirstHook, &_HOOK_Resizeable);
00032e  490d              LDR      r1,|L1.868|
000330  f1040064          ADD      r0,r4,#0x64
000334  f7fffffe          BL       GUI_HOOK_Remove
                  |L1.824|
;;;536          }
;;;537        }
;;;538        WM_UNLOCK();
000338  f7fffffe          BL       GUI_Unlock
;;;539      }
00033c  bf00              NOP      
                  |L1.830|
;;;540    }
00033e  bd70              POP      {r4-r6,pc}
;;;541    
                          ENDP

                  |L1.832|
                          DCD      _ResizeCursorH
                  |L1.836|
                          DCD      _ResizeCursorV
                  |L1.840|
                          DCD      _ResizeCursorDD
                  |L1.844|
                          DCD      _ResizeCursorDU
                  |L1.848|
                          DCD      _pOldCursor
                  |L1.852|
                          DCD      _CaptureFlags
                  |L1.856|
                          DCD      _CaptureX
                  |L1.860|
                          DCD      _CaptureY
                  |L1.864|
                          DCD      _HOOKFUNC_Resizeable
                  |L1.868|
                          DCD      _HOOK_Resizeable

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ColorsCursor
                          DCD      0x000000ff
                          DCD      0x00000000
                          DCD      0x00ffffff
                  _PalCursor
                          DCD      0x00000003
000010  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ColorsCursor
                  _acResizeCursorH
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00400040          DCB      0x00,0x40,0x00,0x40
000030  00014000          DCB      0x00,0x01,0x40,0x00
000034  50000640          DCB      0x50,0x00,0x06,0x40
000038  0064001a          DCB      0x00,0x64,0x00,0x1a
00003c  55556900          DCB      0x55,0x55,0x69,0x00
000040  6aaaaaaa          DCB      0x6a,0xaa,0xaa,0xaa
000044  401a5555          DCB      0x40,0x1a,0x55,0x55
000048  69000640          DCB      0x69,0x00,0x06,0x40
00004c  00640001          DCB      0x00,0x64,0x00,0x01
000050  40005000          DCB      0x40,0x00,0x50,0x00
000054  00400040          DCB      0x00,0x40,0x00,0x40
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00000000          DCB      0x00,0x00,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorH
000070  00110011          DCW      0x0011,0x0011
000074  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorH
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorH
                          DCD      _bmResizeCursorH
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorV
000090  00004000          DCB      0x00,0x00,0x40,0x00
000094  00000190          DCB      0x00,0x00,0x01,0x90
000098  00000006          DCB      0x00,0x00,0x00,0x06
00009c  a4000000          DCB      0xa4,0x00,0x00,0x00
0000a0  1aa90000          DCB      0x1a,0xa9,0x00,0x00
0000a4  00559540          DCB      0x00,0x55,0x95,0x40
0000a8  00000190          DCB      0x00,0x00,0x01,0x90
0000ac  00000001          DCB      0x00,0x00,0x00,0x01
0000b0  90000000          DCB      0x90,0x00,0x00,0x00
0000b4  01900000          DCB      0x01,0x90,0x00,0x00
0000b8  00019000          DCB      0x00,0x01,0x90,0x00
0000bc  00000190          DCB      0x00,0x00,0x01,0x90
0000c0  00000001          DCB      0x00,0x00,0x00,0x01
0000c4  90000000          DCB      0x90,0x00,0x00,0x00
0000c8  01900000          DCB      0x01,0x90,0x00,0x00
0000cc  00559540          DCB      0x00,0x55,0x95,0x40
0000d0  00001aa9          DCB      0x00,0x00,0x1a,0xa9
0000d4  00000006          DCB      0x00,0x00,0x00,0x06
0000d8  a4000000          DCB      0xa4,0x00,0x00,0x00
0000dc  01900000          DCB      0x01,0x90,0x00,0x00
0000e0  00004000          DCB      0x00,0x00,0x40,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorV
0000e8  00110011          DCW      0x0011,0x0011
0000ec  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorV
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorV
                          DCD      _bmResizeCursorV
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorDD
000108  00000000          DCB      0x00,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
000110  00000555          DCB      0x00,0x00,0x05,0x55
000114  00000006          DCB      0x00,0x00,0x00,0x06
000118  a4000000          DCB      0xa4,0x00,0x00,0x00
00011c  06900000          DCB      0x06,0x90,0x00,0x00
000120  00066400          DCB      0x00,0x06,0x64,0x00
000124  00000519          DCB      0x00,0x00,0x05,0x19
000128  00000004          DCB      0x00,0x00,0x00,0x04
00012c  06400000          DCB      0x06,0x40,0x00,0x00
000130  00019000          DCB      0x00,0x01,0x90,0x00
000134  00000064          DCB      0x00,0x00,0x00,0x64
000138  04000000          DCB      0x04,0x00,0x00,0x00
00013c  19140000          DCB      0x19,0x14,0x00,0x00
000140  00066400          DCB      0x00,0x06,0x64,0x00
000144  000001a4          DCB      0x00,0x00,0x01,0xa4
000148  00000006          DCB      0x00,0x00,0x00,0x06
00014c  a4000000          DCB      0xa4,0x00,0x00,0x00
000150  15540000          DCB      0x15,0x54,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorDD
000160  00110011          DCW      0x0011,0x0011
000164  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDD
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorDD
                          DCD      _bmResizeCursorDD
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorDU
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  15540000          DCB      0x15,0x54,0x00,0x00
000190  0006a400          DCB      0x00,0x06,0xa4,0x00
000194  000001a4          DCB      0x00,0x00,0x01,0xa4
000198  00000006          DCB      0x00,0x00,0x00,0x06
00019c  64000000          DCB      0x64,0x00,0x00,0x00
0001a0  19140000          DCB      0x19,0x14,0x00,0x00
0001a4  00640400          DCB      0x00,0x64,0x04,0x00
0001a8  00019000          DCB      0x00,0x01,0x90,0x00
0001ac  00040640          DCB      0x00,0x04,0x06,0x40
0001b0  00000519          DCB      0x00,0x00,0x05,0x19
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  64000000          DCB      0x64,0x00,0x00,0x00
0001bc  06900000          DCB      0x06,0x90,0x00,0x00
0001c0  0006a400          DCB      0x00,0x06,0xa4,0x00
0001c4  00000555          DCB      0x00,0x00,0x05,0x55
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorDU
0001d8  00110011          DCW      0x0011,0x0011
0001dc  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDU
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorDU
                          DCD      _bmResizeCursorDU
                          DCD      0x00000008
                          DCD      0x00000008

                          AREA ||.data||, DATA, ALIGN=2

                  _HOOK_Resizeable
                          %        8
                  _CaptureX
                          DCD      0x00000000
                  _CaptureY
                          DCD      0x00000000
                  _CaptureFlags
                          DCD      0x00000000
                  _pOldCursor
                          DCD      0x00000000
