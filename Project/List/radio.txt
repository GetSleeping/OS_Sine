; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\radio.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\radio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\radio.crf ..\Ucgui\GUI\Widget\RADIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ResizeRect PROC
;;;107    */
;;;108    static void _ResizeRect(GUI_RECT* pDest, const GUI_RECT* pSrc, int Diff) {
000000  884b              LDRH     r3,[r1,#2]
;;;109      pDest->y0 = pSrc->y0 - Diff;
000002  1a9b              SUBS     r3,r3,r2
000004  b21b              SXTH     r3,r3
000006  8043              STRH     r3,[r0,#2]
;;;110      pDest->y1 = pSrc->y1 + Diff;
000008  88cb              LDRH     r3,[r1,#6]
00000a  4413              ADD      r3,r3,r2
00000c  b21b              SXTH     r3,r3
00000e  80c3              STRH     r3,[r0,#6]
;;;111      pDest->x0 = pSrc->x0 - Diff;
000010  880b              LDRH     r3,[r1,#0]
000012  1a9b              SUBS     r3,r3,r2
000014  b21b              SXTH     r3,r3
000016  8003              STRH     r3,[r0,#0]
;;;112      pDest->x1 = pSrc->x1 + Diff;
000018  888b              LDRH     r3,[r1,#4]
00001a  4413              ADD      r3,r3,r2
00001c  b21b              SXTH     r3,r3
00001e  8083              STRH     r3,[r0,#4]
;;;113    }
000020  4770              BX       lr
;;;114    
                          ENDP

                  _OnPaint PROC
;;;124    */
;;;125    static void _OnPaint(RADIO_Handle hObj, RADIO_Obj* pObj) {
000022  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000026  b08d              SUB      sp,sp,#0x34
000028  460c              MOV      r4,r1
;;;126      const GUI_BITMAP* pBmRadio;
;;;127      const GUI_BITMAP* pBmCheck;
;;;128      const char* pText;
;;;129      GUI_FONTINFO FontInfo;
;;;130      GUI_RECT Rect, r, rFocus = {0};
00002a  2000              MOVS     r0,#0
00002c  9005              STR      r0,[sp,#0x14]
00002e  9006              STR      r0,[sp,#0x18]
;;;131      int i, y, HasFocus, FontDistY;
;;;132      U8 SpaceAbove, CHeight, FocusBorder;
;;;133    
;;;134      /* Init some data */
;;;135      WIDGET__GetClientRect(&pObj->Widget, &rFocus);
000030  a905              ADD      r1,sp,#0x14
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       WIDGET__GetClientRect
;;;136      HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
000038  8ce0              LDRH     r0,[r4,#0x26]
00003a  f0000b01          AND      r11,r0,#1
;;;137      pBmRadio  = pObj->apBmRadio[WM__IsEnabled(hObj)];
00003e  980d              LDR      r0,[sp,#0x34]
000040  f7fffffe          BL       WM__IsEnabled
000044  f1040128          ADD      r1,r4,#0x28
000048  f8516020          LDR      r6,[r1,r0,LSL #2]
;;;138      pBmCheck  = pObj->pBmCheck;
00004c  f8d4a030          LDR      r10,[r4,#0x30]
;;;139      rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
000050  8830              LDRH     r0,[r6,#0]
000052  1cc0              ADDS     r0,r0,#3
000054  b200              SXTH     r0,r0
000056  f8ad0018          STRH     r0,[sp,#0x18]
;;;140      rFocus.y1 = pObj->Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
00005a  8fa1              LDRH     r1,[r4,#0x3c]
00005c  8fe0              LDRH     r0,[r4,#0x3e]
00005e  1e40              SUBS     r0,r0,#1
000060  8f62              LDRH     r2,[r4,#0x3a]
000062  fb001002          MLA      r0,r0,r2,r1
000066  1e40              SUBS     r0,r0,#1
000068  b200              SXTH     r0,r0
00006a  f8ad001a          STRH     r0,[sp,#0x1a]
;;;141    
;;;142      /* Select font and text color */
;;;143      LCD_SetColor(pObj->TextColor);
00006e  6ca0              LDR      r0,[r4,#0x48]
000070  f7fffffe          BL       LCD_SetColor
;;;144      GUI_SetFont(pObj->pFont);
000074  6ce0              LDR      r0,[r4,#0x4c]
000076  f7fffffe          BL       GUI_SetFont
;;;145      GUI_SetTextMode(GUI_TM_TRANS);
00007a  2002              MOVS     r0,#2
00007c  f7fffffe          BL       GUI_SetTextMode
;;;146    
;;;147      /* Get font infos */
;;;148      GUI_GetFontInfo(pObj->pFont, &FontInfo);
000080  a90b              ADD      r1,sp,#0x2c
000082  6ce0              LDR      r0,[r4,#0x4c]
000084  f7fffffe          BL       GUI_GetFontInfo
;;;149      FontDistY   = GUI_GetFontDistY();
000088  f7fffffe          BL       GUI_GetFontDistY
00008c  9004              STR      r0,[sp,#0x10]
;;;150      CHeight     = FontInfo.CHeight;
00008e  f89d9030          LDRB     r9,[sp,#0x30]
;;;151      SpaceAbove  = FontInfo.Baseline - CHeight;
000092  f89d002e          LDRB     r0,[sp,#0x2e]
000096  eba00009          SUB      r0,r0,r9
00009a  b2c0              UXTB     r0,r0
00009c  9003              STR      r0,[sp,#0xc]
;;;152      Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
00009e  8830              LDRH     r0,[r6,#0]
0000a0  1d80              ADDS     r0,r0,#6
0000a2  b200              SXTH     r0,r0
0000a4  f8ad0024          STRH     r0,[sp,#0x24]
;;;153      Rect.y0     = (CHeight <= pObj->Height) ? ((pObj->Height - CHeight) / 2) : 0;
0000a8  8fa1              LDRH     r1,[r4,#0x3c]
0000aa  4549              CMP      r1,r9
0000ac  db06              BLT      |L1.188|
0000ae  8fa1              LDRH     r1,[r4,#0x3c]
0000b0  eba10009          SUB      r0,r1,r9
0000b4  eb0071d0          ADD      r1,r0,r0,LSR #31
0000b8  1049              ASRS     r1,r1,#1
0000ba  e000              B        |L1.190|
                  |L1.188|
0000bc  2100              MOVS     r1,#0
                  |L1.190|
0000be  b209              SXTH     r1,r1
0000c0  f8ad1026          STRH     r1,[sp,#0x26]
;;;154      Rect.y1     = Rect.y0 + CHeight - 1;
0000c4  f8bd0026          LDRH     r0,[sp,#0x26]
0000c8  4448              ADD      r0,r0,r9
0000ca  1e40              SUBS     r0,r0,#1
0000cc  b200              SXTH     r0,r0
0000ce  f8ad002a          STRH     r0,[sp,#0x2a]
;;;155      FocusBorder = (FontDistY <= 12) ? 2 : 3;
0000d2  9804              LDR      r0,[sp,#0x10]
0000d4  280c              CMP      r0,#0xc
0000d6  dc01              BGT      |L1.220|
0000d8  2002              MOVS     r0,#2
0000da  e000              B        |L1.222|
                  |L1.220|
0000dc  2003              MOVS     r0,#3
                  |L1.222|
0000de  9002              STR      r0,[sp,#8]
;;;156      if (Rect.y0 < FocusBorder) {
0000e0  f9bd1026          LDRSH    r1,[sp,#0x26]
0000e4  9802              LDR      r0,[sp,#8]
0000e6  4281              CMP      r1,r0
0000e8  da03              BGE      |L1.242|
;;;157        FocusBorder = Rect.y0;
0000ea  f8bd0026          LDRH     r0,[sp,#0x26]
0000ee  b2c0              UXTB     r0,r0
0000f0  9002              STR      r0,[sp,#8]
                  |L1.242|
;;;158      }
;;;159    
;;;160      /* Clear inside ... Just in case      */
;;;161      /* Fill with parents background color */
;;;162    #if WM_SUPPORT_TRANSPARENCY
;;;163      if (!WM_GetHasTrans(hObj))
0000f2  980d              LDR      r0,[sp,#0x34]
0000f4  f7fffffe          BL       WM_GetHasTrans
0000f8  b968              CBNZ     r0,|L1.278|
;;;164    #endif
;;;165      {
;;;166        if (pObj->BkColor != GUI_INVALID_COLOR) {
0000fa  f06f4170          MVN      r1,#0xf0000000
0000fe  6c60              LDR      r0,[r4,#0x44]
000100  4288              CMP      r0,r1
000102  d003              BEQ      |L1.268|
;;;167          LCD_SetBkColor(pObj->BkColor);
000104  6c60              LDR      r0,[r4,#0x44]
000106  f7fffffe          BL       LCD_SetBkColor
00010a  e002              B        |L1.274|
                  |L1.268|
;;;168        } else {
;;;169          LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
00010c  48f2              LDR      r0,|L1.1240|
00010e  f7fffffe          BL       LCD_SetBkColor
                  |L1.274|
;;;170        }
;;;171        GUI_Clear();
000112  f7fffffe          BL       GUI_Clear
                  |L1.278|
;;;172      }
;;;173    
;;;174      /* Iterate over all items */
;;;175      for (i = 0; i < pObj->NumItems; i++) {
000116  2500              MOVS     r5,#0
000118  e055              B        |L1.454|
                  |L1.282|
;;;176        y = i * pObj->Spacing;
00011a  8f60              LDRH     r0,[r4,#0x3a]
00011c  fb00f805          MUL      r8,r0,r5
;;;177        /* Draw the radio button bitmap */
;;;178        GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
000120  f1080202          ADD      r2,r8,#2
000124  2102              MOVS     r1,#2
000126  4630              MOV      r0,r6
000128  f7fffffe          BL       GUI_DrawBitmap
;;;179        /* Draw the check bitmap */
;;;180        if (pObj->Sel == i) {
00012c  f9b40038          LDRSH    r0,[r4,#0x38]
000130  42a8              CMP      r0,r5
000132  d116              BNE      |L1.354|
;;;181          GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
000134  8870              LDRH     r0,[r6,#2]
000136  f8ba3002          LDRH     r3,[r10,#2]
00013a  1ac0              SUBS     r0,r0,r3
00013c  9001              STR      r0,[sp,#4]
00013e  eb0070d0          ADD      r0,r0,r0,LSR #31
000142  1040              ASRS     r0,r0,#1
000144  1c80              ADDS     r0,r0,#2
000146  eb000208          ADD      r2,r0,r8
00014a  8830              LDRH     r0,[r6,#0]
00014c  f8ba3000          LDRH     r3,[r10,#0]
000150  1ac0              SUBS     r0,r0,r3
000152  9000              STR      r0,[sp,#0]
000154  eb0070d0          ADD      r0,r0,r0,LSR #31
000158  1040              ASRS     r0,r0,#1
00015a  1c81              ADDS     r1,r0,#2
00015c  4650              MOV      r0,r10
00015e  f7fffffe          BL       GUI_DrawBitmap
                  |L1.354|
;;;182                                   RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
;;;183        }
;;;184        /* Draw text if available */
;;;185        pText = (const char*)GUI_ARRAY_GetpItem(&pObj->TextArray, i);
000162  4629              MOV      r1,r5
000164  f1040034          ADD      r0,r4,#0x34
000168  f7fffffe          BL       GUI_ARRAY_GetpItem
00016c  4607              MOV      r7,r0
;;;186        if (pText) {
00016e  b34f              CBZ      r7,|L1.452|
;;;187          if (*pText) {
000170  7838              LDRB     r0,[r7,#0]
000172  b338              CBZ      r0,|L1.452|
;;;188            r = Rect;
000174  e9dd0109          LDRD     r0,r1,[sp,#0x24]
000178  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;189            r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
00017c  4638              MOV      r0,r7
00017e  f7fffffe          BL       GUI_GetStringDistX
000182  f8bd101c          LDRH     r1,[sp,#0x1c]
000186  4408              ADD      r0,r0,r1
000188  1e80              SUBS     r0,r0,#2
00018a  b200              SXTH     r0,r0
00018c  f8ad0020          STRH     r0,[sp,#0x20]
;;;190            GUI_MoveRect(&r, 0, y);
000190  4642              MOV      r2,r8
000192  2100              MOVS     r1,#0
000194  a807              ADD      r0,sp,#0x1c
000196  f7fffffe          BL       GUI_MoveRect
;;;191            GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
00019a  f9bd301e          LDRSH    r3,[sp,#0x1e]
00019e  9803              LDR      r0,[sp,#0xc]
0001a0  1a1a              SUBS     r2,r3,r0
0001a2  f9bd101c          LDRSH    r1,[sp,#0x1c]
0001a6  4638              MOV      r0,r7
0001a8  f7fffffe          BL       GUI_DispStringAt
;;;192            /* Calculate focus rect */
;;;193            if (HasFocus && (pObj->Sel == i)) {
0001ac  f1bb0f00          CMP      r11,#0
0001b0  d008              BEQ      |L1.452|
0001b2  f9b40038          LDRSH    r0,[r4,#0x38]
0001b6  42a8              CMP      r0,r5
0001b8  d104              BNE      |L1.452|
;;;194              _ResizeRect(&rFocus, &r, FocusBorder);
0001ba  a907              ADD      r1,sp,#0x1c
0001bc  a805              ADD      r0,sp,#0x14
0001be  9a02              LDR      r2,[sp,#8]
0001c0  f7fffffe          BL       _ResizeRect
                  |L1.452|
0001c4  1c6d              ADDS     r5,r5,#1              ;175
                  |L1.454|
0001c6  8fe0              LDRH     r0,[r4,#0x3e]         ;175
0001c8  42a8              CMP      r0,r5                 ;175
0001ca  dca6              BGT      |L1.282|
;;;195            }
;;;196          }
;;;197        }
;;;198      }
;;;199    
;;;200      /* Draw the focus rect */
;;;201      if (HasFocus) {
0001cc  f1bb0f00          CMP      r11,#0
0001d0  d007              BEQ      |L1.482|
;;;202        LCD_SetColor(GUI_BLACK);
0001d2  2000              MOVS     r0,#0
0001d4  f7fffffe          BL       LCD_SetColor
;;;203        WIDGET__DrawFocusRect(&pObj->Widget, &rFocus, 0);
0001d8  2200              MOVS     r2,#0
0001da  a905              ADD      r1,sp,#0x14
0001dc  4620              MOV      r0,r4
0001de  f7fffffe          BL       WIDGET__DrawFocusRect
                  |L1.482|
;;;204      }
;;;205    }
0001e2  b00f              ADD      sp,sp,#0x3c
0001e4  e8bd8ff0          POP      {r4-r11,pc}
;;;206    
                          ENDP

                  RADIO__SetValue PROC
;;;308    */
;;;309    void RADIO__SetValue(RADIO_Handle hObj, RADIO_Obj* pObj, int v) {
0001e8  b570              PUSH     {r4-r6,lr}
0001ea  4606              MOV      r6,r0
0001ec  460c              MOV      r4,r1
0001ee  4615              MOV      r5,r2
;;;310      if (v >= pObj->NumItems) {
0001f0  8fe0              LDRH     r0,[r4,#0x3e]
0001f2  42a8              CMP      r0,r5
0001f4  dc01              BGT      |L1.506|
;;;311        v = (int)pObj->NumItems - 1;
0001f6  8fe0              LDRH     r0,[r4,#0x3e]
0001f8  1e45              SUBS     r5,r0,#1
                  |L1.506|
;;;312      }
;;;313      if (v != pObj->Sel) {
0001fa  f9b40038          LDRSH    r0,[r4,#0x38]
0001fe  42a8              CMP      r0,r5
000200  d008              BEQ      |L1.532|
;;;314        pObj->Sel = v;
000202  b228              SXTH     r0,r5
000204  8720              STRH     r0,[r4,#0x38]
;;;315        WM_InvalidateWindow(hObj);
000206  4630              MOV      r0,r6
000208  f7fffffe          BL       WM_InvalidateWindow
;;;316        WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00020c  2105              MOVS     r1,#5
00020e  4630              MOV      r0,r6
000210  f7fffffe          BL       WM_NotifyParent
                  |L1.532|
;;;317      }
;;;318    }
000214  bd70              POP      {r4-r6,pc}
;;;319    
                          ENDP

                  RADIO_SetValue PROC
;;;423    */
;;;424    void RADIO_SetValue(RADIO_Handle hObj, int v) {
000216  b570              PUSH     {r4-r6,lr}
000218  4605              MOV      r5,r0
00021a  460c              MOV      r4,r1
;;;425      if (hObj) {
00021c  b1ed              CBZ      r5,|L1.602|
;;;426        RADIO_Obj* pObj;
;;;427        WM_LOCK();
00021e  f7fffffe          BL       GUI_Lock
;;;428        pObj = RADIO_H2P(hObj);
000222  4628              MOV      r0,r5
000224  f7fffffe          BL       GUI_ALLOC_h2p
000228  4606              MOV      r6,r0
;;;429        if (pObj->GroupId && RADIO__pfHandleSetValue) {
00022a  f8960040          LDRB     r0,[r6,#0x40]
00022e  b148              CBZ      r0,|L1.580|
000230  48aa              LDR      r0,|L1.1244|
000232  6800              LDR      r0,[r0,#0]  ; RADIO__pfHandleSetValue
000234  b130              CBZ      r0,|L1.580|
;;;430          (*RADIO__pfHandleSetValue)(hObj, pObj, v);
000236  4622              MOV      r2,r4
000238  4631              MOV      r1,r6
00023a  4628              MOV      r0,r5
00023c  4ba7              LDR      r3,|L1.1244|
00023e  681b              LDR      r3,[r3,#0]  ; RADIO__pfHandleSetValue
000240  4798              BLX      r3
000242  e007              B        |L1.596|
                  |L1.580|
;;;431        } else {
;;;432          if (v < 0) {
000244  2c00              CMP      r4,#0
000246  da00              BGE      |L1.586|
;;;433            v = 0;
000248  2400              MOVS     r4,#0
                  |L1.586|
;;;434          }
;;;435          RADIO__SetValue(hObj, pObj, v);
00024a  4622              MOV      r2,r4
00024c  4631              MOV      r1,r6
00024e  4628              MOV      r0,r5
000250  f7fffffe          BL       RADIO__SetValue
                  |L1.596|
;;;436        }
;;;437        WM_UNLOCK();
000254  f7fffffe          BL       GUI_Unlock
;;;438      }
000258  bf00              NOP      
                  |L1.602|
;;;439    }
00025a  bd70              POP      {r4-r6,pc}
;;;440    
                          ENDP

                  _OnTouch PROC
;;;210    */
;;;211    static void _OnTouch(RADIO_Handle hObj, RADIO_Obj* pObj, WM_MESSAGE*pMsg) {
00025c  e92d5ff0          PUSH     {r4-r12,lr}
000260  4682              MOV      r10,r0
000262  460c              MOV      r4,r1
000264  4616              MOV      r6,r2
;;;212      int Notification;
;;;213      int Hit = 0;
000266  f04f0b00          MOV      r11,#0
;;;214      GUI_PID_STATE* pState = (GUI_PID_STATE*)pMsg->Data.p;
00026a  f8d68008          LDR      r8,[r6,#8]
;;;215      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00026e  68b0              LDR      r0,[r6,#8]
000270  b1f0              CBZ      r0,|L1.688|
;;;216        if (pState->Pressed) {
000272  f8980008          LDRB     r0,[r8,#8]
000276  b1b8              CBZ      r0,|L1.680|
;;;217          int y, Sel;
;;;218          y   = pState->y;
000278  f8d87004          LDR      r7,[r8,#4]
;;;219          Sel = y   / pObj->Spacing;
00027c  8f60              LDRH     r0,[r4,#0x3a]
00027e  fb97f9f0          SDIV     r9,r7,r0
;;;220          y  -= Sel * pObj->Spacing;
000282  8f60              LDRH     r0,[r4,#0x3a]
000284  fb097710          MLS      r7,r9,r0,r7
;;;221          if (y <= pObj->Height) {
000288  8fa0              LDRH     r0,[r4,#0x3c]
00028a  42b8              CMP      r0,r7
00028c  db03              BLT      |L1.662|
;;;222            RADIO_SetValue(hObj, Sel);
00028e  4649              MOV      r1,r9
000290  4650              MOV      r0,r10
000292  f7fffffe          BL       RADIO_SetValue
                  |L1.662|
;;;223          }
;;;224          if (WM_IsFocussable(hObj)) {
000296  4650              MOV      r0,r10
000298  f7fffffe          BL       WM_IsFocussable
00029c  b110              CBZ      r0,|L1.676|
;;;225            WM_SetFocus(hObj);
00029e  4650              MOV      r0,r10
0002a0  f7fffffe          BL       WM_SetFocus
                  |L1.676|
;;;226          }
;;;227          Notification = WM_NOTIFICATION_CLICKED;
0002a4  2501              MOVS     r5,#1
;;;228        } else {
0002a6  e004              B        |L1.690|
                  |L1.680|
;;;229          Hit = 1;
0002a8  f04f0b01          MOV      r11,#1
;;;230          Notification = WM_NOTIFICATION_RELEASED;
0002ac  2502              MOVS     r5,#2
0002ae  e000              B        |L1.690|
                  |L1.688|
;;;231        }
;;;232      } else {
;;;233        Notification = WM_NOTIFICATION_MOVED_OUT;
0002b0  2503              MOVS     r5,#3
                  |L1.690|
;;;234      }
;;;235      WM_NotifyParent(hObj, Notification);
0002b2  4629              MOV      r1,r5
0002b4  4650              MOV      r0,r10
0002b6  f7fffffe          BL       WM_NotifyParent
;;;236      if (Hit == 1) {
0002ba  f1bb0f01          CMP      r11,#1
0002be  d103              BNE      |L1.712|
;;;237        GUI_DEBUG_LOG("RADIO: Hit\n");
;;;238        GUI_StoreKey(pObj->Widget.Id);
0002c0  f9b40024          LDRSH    r0,[r4,#0x24]
0002c4  f7fffffe          BL       GUI_StoreKey
                  |L1.712|
;;;239      }
;;;240    }
0002c8  e8bd9ff0          POP      {r4-r12,pc}
;;;241    
                          ENDP

                  RADIO_AddValue PROC
;;;393    */
;;;394    void RADIO_AddValue(RADIO_Handle hObj, int Add) {
0002cc  b570              PUSH     {r4-r6,lr}
0002ce  4604              MOV      r4,r0
0002d0  460d              MOV      r5,r1
;;;395      if (hObj) {
0002d2  b174              CBZ      r4,|L1.754|
;;;396        RADIO_Obj* pObj;
;;;397        WM_LOCK();
0002d4  f7fffffe          BL       GUI_Lock
;;;398        pObj = RADIO_H2P(hObj);
0002d8  4620              MOV      r0,r4
0002da  f7fffffe          BL       GUI_ALLOC_h2p
0002de  4606              MOV      r6,r0
;;;399        RADIO_SetValue(hObj, pObj->Sel + Add);
0002e0  f9b60038          LDRSH    r0,[r6,#0x38]
0002e4  1941              ADDS     r1,r0,r5
0002e6  4620              MOV      r0,r4
0002e8  f7fffffe          BL       RADIO_SetValue
;;;400        WM_UNLOCK();
0002ec  f7fffffe          BL       GUI_Unlock
;;;401      }
0002f0  bf00              NOP      
                  |L1.754|
;;;402    }
0002f2  bd70              POP      {r4-r6,pc}
;;;403    
                          ENDP

                  RADIO_Dec PROC
;;;407    */
;;;408    void RADIO_Dec(RADIO_Handle hObj) {
0002f4  b510              PUSH     {r4,lr}
0002f6  4604              MOV      r4,r0
;;;409      RADIO_AddValue(hObj, -1);
0002f8  f04f31ff          MOV      r1,#0xffffffff
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       RADIO_AddValue
;;;410    }
000302  bd10              POP      {r4,pc}
;;;411    
                          ENDP

                  RADIO_Inc PROC
;;;415    */
;;;416    void RADIO_Inc(RADIO_Handle hObj) {
000304  b510              PUSH     {r4,lr}
000306  4604              MOV      r4,r0
;;;417      RADIO_AddValue(hObj,  1);
000308  2101              MOVS     r1,#1
00030a  4620              MOV      r0,r4
00030c  f7fffffe          BL       RADIO_AddValue
;;;418    }
000310  bd10              POP      {r4,pc}
;;;419    
                          ENDP

                  _OnKey PROC
;;;245    */
;;;246    static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE* pMsg) {
000312  b570              PUSH     {r4-r6,lr}
000314  4606              MOV      r6,r0
000316  460c              MOV      r4,r1
;;;247      WM_KEY_INFO* pKeyInfo;
;;;248      pKeyInfo = (WM_KEY_INFO*)(pMsg->Data.p);
000318  68a5              LDR      r5,[r4,#8]
;;;249      if (pKeyInfo->PressedCnt > 0) {
00031a  6868              LDR      r0,[r5,#4]
00031c  2800              CMP      r0,#0
00031e  dd15              BLE      |L1.844|
;;;250        switch (pKeyInfo->Key) {
000320  6828              LDR      r0,[r5,#0]
000322  2810              CMP      r0,#0x10
000324  d00b              BEQ      |L1.830|
000326  2811              CMP      r0,#0x11
000328  d00a              BEQ      |L1.832|
00032a  2812              CMP      r0,#0x12
00032c  d002              BEQ      |L1.820|
00032e  2813              CMP      r0,#0x13
000330  d10a              BNE      |L1.840|
000332  e000              B        |L1.822|
                  |L1.820|
;;;251        case GUI_KEY_RIGHT:
;;;252        case GUI_KEY_DOWN:
000334  bf00              NOP      
                  |L1.822|
;;;253          RADIO_Inc(hObj);
000336  4630              MOV      r0,r6
000338  f7fffffe          BL       RADIO_Inc
;;;254          break;                    /* Send to parent by not doing anything */
00033c  e005              B        |L1.842|
                  |L1.830|
;;;255        case GUI_KEY_LEFT:
;;;256        case GUI_KEY_UP:
00033e  bf00              NOP      
                  |L1.832|
;;;257          RADIO_Dec(hObj);
000340  4630              MOV      r0,r6
000342  f7fffffe          BL       RADIO_Dec
;;;258          break;                    /* Send to parent by not doing anything */
000346  e000              B        |L1.842|
                  |L1.840|
;;;259        default:
;;;260          return;
;;;261        }
;;;262      }
;;;263    }
000348  bd70              POP      {r4-r6,pc}
                  |L1.842|
00034a  bf00              NOP                            ;254
                  |L1.844|
00034c  bf00              NOP      
00034e  e7fb              B        |L1.840|
;;;264    
                          ENDP

                  _RADIO_Callback PROC
;;;268    */
;;;269    static void _RADIO_Callback (WM_MESSAGE* pMsg) {
000350  b570              PUSH     {r4-r6,lr}
000352  4604              MOV      r4,r0
;;;270      RADIO_Handle hObj;
;;;271      RADIO_Obj*   pObj;
;;;272      hObj = pMsg->hWin;
000354  f9b46004          LDRSH    r6,[r4,#4]
;;;273      pObj = RADIO_H2P(hObj);
000358  4630              MOV      r0,r6
00035a  f7fffffe          BL       GUI_ALLOC_h2p
00035e  4605              MOV      r5,r0
;;;274      /* Let widget handle the standard messages */
;;;275      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000360  4621              MOV      r1,r4
000362  4630              MOV      r0,r6
000364  f7fffffe          BL       WIDGET_HandleActive
000368  b900              CBNZ     r0,|L1.876|
                  |L1.874|
;;;276        return;
;;;277      }
;;;278      switch (pMsg->MsgId) {
;;;279      case WM_PAINT:
;;;280        GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
;;;281        _OnPaint(hObj, pObj);
;;;282        return;
;;;283      case WM_GET_RADIOGROUP:
;;;284        pMsg->Data.v = pObj->GroupId;
;;;285        return;
;;;286      case WM_TOUCH:
;;;287        _OnTouch(hObj, pObj, pMsg);
;;;288        break;
;;;289      case WM_KEY:
;;;290        _OnKey(hObj, pMsg);
;;;291        break;
;;;292      case WM_DELETE:
;;;293        GUI_ARRAY_Delete(&pObj->TextArray);
;;;294        break;
;;;295      }
;;;296      WM_DefaultProc(pMsg);
;;;297    }
00036a  bd70              POP      {r4-r6,pc}
                  |L1.876|
00036c  6820              LDR      r0,[r4,#0]            ;278
00036e  280e              CMP      r0,#0xe               ;278
000370  d019              BEQ      |L1.934|
000372  dc04              BGT      |L1.894|
000374  280b              CMP      r0,#0xb               ;278
000376  d01b              BEQ      |L1.944|
000378  280c              CMP      r0,#0xc               ;278
00037a  d11e              BNE      |L1.954|
00037c  e00d              B        |L1.922|
                  |L1.894|
00037e  280f              CMP      r0,#0xf               ;278
000380  d002              BEQ      |L1.904|
000382  282b              CMP      r0,#0x2b              ;278
000384  d119              BNE      |L1.954|
000386  e004              B        |L1.914|
                  |L1.904|
000388  4629              MOV      r1,r5                 ;281
00038a  4630              MOV      r0,r6                 ;281
00038c  f7fffffe          BL       _OnPaint
000390  e7eb              B        |L1.874|
                  |L1.914|
000392  f8950040          LDRB     r0,[r5,#0x40]         ;284
000396  60a0              STR      r0,[r4,#8]            ;284
000398  e7e7              B        |L1.874|
                  |L1.922|
00039a  4622              MOV      r2,r4                 ;287
00039c  4629              MOV      r1,r5                 ;287
00039e  4630              MOV      r0,r6                 ;287
0003a0  f7fffffe          BL       _OnTouch
0003a4  e009              B        |L1.954|
                  |L1.934|
0003a6  4621              MOV      r1,r4                 ;290
0003a8  4630              MOV      r0,r6                 ;290
0003aa  f7fffffe          BL       _OnKey
0003ae  e004              B        |L1.954|
                  |L1.944|
0003b0  f1050034          ADD      r0,r5,#0x34           ;293
0003b4  f7fffffe          BL       GUI_ARRAY_Delete
0003b8  bf00              NOP                            ;294
                  |L1.954|
0003ba  bf00              NOP                            ;288
0003bc  4620              MOV      r0,r4                 ;296
0003be  f7fffffe          BL       WM_DefaultProc
0003c2  bf00              NOP      
0003c4  e7d1              B        |L1.874|
;;;298    
                          ENDP

                  RADIO_CreateEx PROC
;;;333    */
;;;334    RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
0003c6  e92d4fff          PUSH     {r0-r11,lr}
;;;335                                int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
;;;336    {
0003ca  b085              SUB      sp,sp,#0x14
0003cc  4691              MOV      r9,r2
0003ce  f8ddb050          LDR      r11,[sp,#0x50]
0003d2  f8dda048          LDR      r10,[sp,#0x48]
0003d6  e9dd5616          LDRD     r5,r6,[sp,#0x58]
;;;337      RADIO_Handle hObj;
;;;338      int Height, i;
;;;339      /* Calculate helper variables */
;;;340      Height   = RADIO__apDefaultImage[0]->YSize + RADIO_BORDER * 2;
0003da  4841              LDR      r0,|L1.1248|
0003dc  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
0003de  8840              LDRH     r0,[r0,#2]
0003e0  1d00              ADDS     r0,r0,#4
0003e2  9004              STR      r0,[sp,#0x10]
;;;341      Spacing  = (Spacing  <= 0) ? 20 : Spacing;
0003e4  2e00              CMP      r6,#0
0003e6  dc01              BGT      |L1.1004|
0003e8  2014              MOVS     r0,#0x14
0003ea  e000              B        |L1.1006|
                  |L1.1004|
0003ec  4630              MOV      r0,r6
                  |L1.1006|
0003ee  4606              MOV      r6,r0
;;;342      NumItems = (NumItems <= 0) ?  2 : NumItems;
0003f0  2d00              CMP      r5,#0
0003f2  dc01              BGT      |L1.1016|
0003f4  2002              MOVS     r0,#2
0003f6  e000              B        |L1.1018|
                  |L1.1016|
0003f8  4628              MOV      r0,r5
                  |L1.1018|
0003fa  4605              MOV      r5,r0
;;;343      if (ySize == 0) {
0003fc  9808              LDR      r0,[sp,#0x20]
0003fe  b920              CBNZ     r0,|L1.1034|
;;;344        ySize  = Height + ((NumItems - 1) * Spacing);
000400  1e69              SUBS     r1,r5,#1
000402  9804              LDR      r0,[sp,#0x10]
000404  fb010006          MLA      r0,r1,r6,r0
000408  9008              STR      r0,[sp,#0x20]
                  |L1.1034|
;;;345      }
;;;346      if (xSize == 0) {
00040a  f1b90f00          CMP      r9,#0
00040e  d104              BNE      |L1.1050|
;;;347        xSize  = RADIO__apDefaultImage[0]->XSize + RADIO_BORDER * 2;
000410  4833              LDR      r0,|L1.1248|
000412  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
000414  8800              LDRH     r0,[r0,#0]
000416  f1000904          ADD      r9,r0,#4
                  |L1.1050|
;;;348      }
;;;349    #if WM_SUPPORT_TRANSPARENCY
;;;350      WinFlags |= WM_CF_HASTRANS;
00041a  9813              LDR      r0,[sp,#0x4c]
00041c  f0400001          ORR      r0,r0,#1
000420  9013              STR      r0,[sp,#0x4c]
;;;351    #endif
;;;352      /* Create the window */
;;;353      hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, _RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
000422  2130              MOVS     r1,#0x30
000424  4a2f              LDR      r2,|L1.1252|
000426  9813              LDR      r0,[sp,#0x4c]
000428  b280              UXTH     r0,r0
00042a  e9cda000          STRD     r10,r0,[sp,#0]
00042e  e9cd2102          STRD     r2,r1,[sp,#8]
000432  464a              MOV      r2,r9
000434  9b08              LDR      r3,[sp,#0x20]
000436  e9dd0105          LDRD     r0,r1,[sp,#0x14]
00043a  f7fffffe          BL       WM_CreateWindowAsChild
00043e  4607              MOV      r7,r0
;;;354      if (hObj) {
000440  2f00              CMP      r7,#0
000442  d034              BEQ      |L1.1198|
;;;355        RADIO_Obj* pObj;
;;;356        WM_LOCK();
000444  f7fffffe          BL       GUI_Lock
;;;357        pObj = RADIO_H2P(hObj);
000448  4638              MOV      r0,r7
00044a  f7fffffe          BL       GUI_ALLOC_h2p
00044e  4604              MOV      r4,r0
;;;358        /* Init sub-classes */
;;;359        GUI_ARRAY_CREATE(&pObj->TextArray);
;;;360        for (i = 0; i < NumItems; i++) {
000450  f04f0800          MOV      r8,#0
000454  e007              B        |L1.1126|
                  |L1.1110|
;;;361          GUI_ARRAY_AddItem(&pObj->TextArray, NULL, 0);
000456  2200              MOVS     r2,#0
000458  4611              MOV      r1,r2
00045a  f1040034          ADD      r0,r4,#0x34
00045e  f7fffffe          BL       GUI_ARRAY_AddItem
000462  f1080801          ADD      r8,r8,#1              ;360
                  |L1.1126|
000466  45a8              CMP      r8,r5                 ;360
000468  dbf5              BLT      |L1.1110|
;;;362        }
;;;363        /* Init widget specific variables */
;;;364        ExFlags &= RADIO_TEXTPOS_LEFT;
00046a  f40b7b80          AND      r11,r11,#0x100
;;;365        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
00046e  f04b0210          ORR      r2,r11,#0x10
000472  4620              MOV      r0,r4
000474  9915              LDR      r1,[sp,#0x54]
000476  f7fffffe          BL       WIDGET__Init
;;;366        /* Init member variables */
;;;367        RADIO_INIT_ID(pObj);
;;;368        pObj->apBmRadio[0] = RADIO__apDefaultImage[0];
00047a  4819              LDR      r0,|L1.1248|
00047c  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
00047e  62a0              STR      r0,[r4,#0x28]
;;;369        pObj->apBmRadio[1] = RADIO__apDefaultImage[1];
000480  4817              LDR      r0,|L1.1248|
000482  6841              LDR      r1,[r0,#4]  ; RADIO__apDefaultImage
000484  62e1              STR      r1,[r4,#0x2c]
;;;370        pObj->pBmCheck     = RADIO__pDefaultImageCheck;
000486  4818              LDR      r0,|L1.1256|
000488  6800              LDR      r0,[r0,#0]  ; RADIO__pDefaultImageCheck
00048a  6320              STR      r0,[r4,#0x30]
;;;371        pObj->pFont        = RADIO__pDefaultFont;
00048c  4817              LDR      r0,|L1.1260|
00048e  6800              LDR      r0,[r0,#0]  ; RADIO__pDefaultFont
000490  64e0              STR      r0,[r4,#0x4c]
;;;372        pObj->TextColor    = RADIO__DefaultTextColor;
000492  4817              LDR      r0,|L1.1264|
000494  6800              LDR      r0,[r0,#0]  ; RADIO__DefaultTextColor
000496  64a0              STR      r0,[r4,#0x48]
;;;373        pObj->BkColor      = WM_GetBkColor(hParent);
000498  4650              MOV      r0,r10
00049a  f7fffffe          BL       WM_GetBkColor
00049e  6460              STR      r0,[r4,#0x44]
;;;374        pObj->NumItems     = NumItems;
0004a0  87e5              STRH     r5,[r4,#0x3e]
;;;375        pObj->Spacing      = Spacing;
0004a2  8766              STRH     r6,[r4,#0x3a]
;;;376        pObj->Height       = Height;
0004a4  9804              LDR      r0,[sp,#0x10]
0004a6  87a0              STRH     r0,[r4,#0x3c]
;;;377        WM_UNLOCK();
0004a8  f7fffffe          BL       GUI_Unlock
;;;378      } else {
0004ac  bf00              NOP      
                  |L1.1198|
;;;379        GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
;;;380      }
;;;381      return hObj;
0004ae  4638              MOV      r0,r7
;;;382    }
0004b0  b009              ADD      sp,sp,#0x24
0004b2  e8bd8ff0          POP      {r4-r11,pc}
;;;383    
                          ENDP

                  RADIO_GetValue PROC
;;;450    */
;;;451    int RADIO_GetValue(RADIO_Handle hObj) {
0004b6  b570              PUSH     {r4-r6,lr}
0004b8  4604              MOV      r4,r0
;;;452      int r = 0;
0004ba  2500              MOVS     r5,#0
;;;453      if (hObj) {
0004bc  b154              CBZ      r4,|L1.1236|
;;;454        RADIO_Obj* pObj;
;;;455        WM_LOCK();
0004be  f7fffffe          BL       GUI_Lock
;;;456        pObj = RADIO_H2P(hObj);
0004c2  4620              MOV      r0,r4
0004c4  f7fffffe          BL       GUI_ALLOC_h2p
0004c8  4606              MOV      r6,r0
;;;457        r = pObj->Sel;
0004ca  f9b65038          LDRSH    r5,[r6,#0x38]
;;;458        WM_UNLOCK();
0004ce  f7fffffe          BL       GUI_Unlock
;;;459      }
0004d2  bf00              NOP      
                  |L1.1236|
;;;460      return r;
0004d4  4628              MOV      r0,r5
;;;461    }
0004d6  bd70              POP      {r4-r6,pc}
;;;462    
                          ENDP

                  |L1.1240|
                          DCD      0x00c0c0c0
                  |L1.1244|
                          DCD      RADIO__pfHandleSetValue
                  |L1.1248|
                          DCD      RADIO__apDefaultImage
                  |L1.1252|
                          DCD      _RADIO_Callback
                  |L1.1256|
                          DCD      RADIO__pDefaultImageCheck
                  |L1.1260|
                          DCD      RADIO__pDefaultFont
                  |L1.1264|
                          DCD      RADIO__DefaultTextColor

                          AREA ||.data||, DATA, ALIGN=2

                  RADIO__DefaultTextColor
                          DCD      0x00000000
                  RADIO__pDefaultFont
                          DCD      GUI_Font13_1
                  RADIO__apDefaultImage
                          DCD      RADIO__abmRadio
                          DCD      RADIO__abmRadio+0x14
                  RADIO__pDefaultImageCheck
                          DCD      RADIO__bmCheck
                  RADIO__pfHandleSetValue
                          DCD      0x00000000
