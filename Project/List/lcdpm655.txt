; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\lcdpm655.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\lcdpm655.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcdpm655.crf ..\Ucgui\GUI\ConvertColor\LCDPM655.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_M655 PROC
;;;48     */
;;;49     unsigned LCD_Color2Index_M655(LCD_COLOR Color) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;50       int r,g,b;
;;;51       r = (Color>> (8  - R_BITS)) & R_MASK;
000004  f3c102c4          UBFX     r2,r1,#3,#5
;;;52       g = (Color>> (16 - G_BITS)) & G_MASK;
000008  f3c123c4          UBFX     r3,r1,#11,#5
;;;53       b = (Color>> (24 - B_BITS)) & B_MASK;
00000c  f3c14485          UBFX     r4,r1,#18,#6
;;;54       return b + (g << B_BITS) + (r << (G_BITS + B_BITS));
000010  eb041083          ADD      r0,r4,r3,LSL #6
000014  eb0020c2          ADD      r0,r0,r2,LSL #11
;;;55     }
000018  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  LCD_Index2Color_M655 PROC
;;;60     */
;;;61     LCD_COLOR LCD_Index2Color_M655(int Index) {
00001a  b530              PUSH     {r4,r5,lr}
00001c  4601              MOV      r1,r0
;;;62       unsigned int r,g,b;
;;;63       /* Seperate the color masks */
;;;64       b = Index                                  & B_MASK;
00001e  f001033f          AND      r3,r1,#0x3f
;;;65       g = (Index >> B_BITS)                      & G_MASK;
000022  f3c11284          UBFX     r2,r1,#6,#5
;;;66       r = ((unsigned)Index >> (B_BITS + G_BITS)) & R_MASK;
000026  f3c124c4          UBFX     r4,r1,#11,#5
;;;67       /* Convert the color masks */
;;;68       r = r * 255 / R_MASK;
00002a  ebc42004          RSB      r0,r4,r4,LSL #8
00002e  251f              MOVS     r5,#0x1f
000030  fbb0f4f5          UDIV     r4,r0,r5
;;;69       g = g * 255 / G_MASK;
000034  ebc22002          RSB      r0,r2,r2,LSL #8
000038  fbb0f2f5          UDIV     r2,r0,r5
;;;70       b = b * 255 / B_MASK;
00003c  ebc32003          RSB      r0,r3,r3,LSL #8
000040  253f              MOVS     r5,#0x3f
000042  fbb0f3f5          UDIV     r3,r0,r5
;;;71       return r + (g<<8) + (((U32)b)<<16);
000046  eb042002          ADD      r0,r4,r2,LSL #8
00004a  eb004003          ADD      r0,r0,r3,LSL #16
;;;72     }
00004e  bd30              POP      {r4,r5,pc}
;;;73     
                          ENDP

                  LCD_GetIndexMask_M655 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_M655(void) {
000050  f64f70ff          MOV      r0,#0xffff
;;;79       return 0xffff;
;;;80     }
000054  4770              BX       lr
;;;81     
                          ENDP

