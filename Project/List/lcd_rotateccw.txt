; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\lcd_rotateccw.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\lcd_rotateccw.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcd_rotateccw.crf ..\Ucgui\GUI\Core\LCD_RotateCCW.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       y -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  48e1              LDR      r0,|L1.932|
00001e  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000020  f0100003          ANDS     r0,r0,#3
000024  d004              BEQ      |L1.48|
000026  2801              CMP      r0,#1
000028  d031              BEQ      |L1.142|
00002a  2802              CMP      r0,#2
00002c  d14e              BNE      |L1.204|
00002e  e018              B        |L1.98|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7828              LDRB     r0,[r5,#0]
000034  2180              MOVS     r1,#0x80
000036  4121              ASRS     r1,r1,r4
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L1.64|
00003c  4650              MOV      r0,r10
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9800              LDR      r0,[sp,#0]
                  |L1.66|
000042  4602              MOV      r2,r0
000044  4631              MOV      r1,r6
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;46           y--;
00004c  1e76              SUBS     r6,r6,#1
;;;47     			if (++Diff == 8) {
00004e  1c60              ADDS     r0,r4,#1
000050  4604              MOV      r4,r0
000052  2808              CMP      r0,#8
000054  d101              BNE      |L1.90|
;;;48             Diff = 0;
000056  2400              MOVS     r4,#0
;;;49     				p++;
000058  1c6d              ADDS     r5,r5,#1
                  |L1.90|
;;;50     			}
;;;51     		} while (--xsize);
00005a  1e78              SUBS     r0,r7,#1
00005c  0007              MOVS     r7,r0
00005e  d1e8              BNE      |L1.50|
;;;52         break;
000060  e034              B        |L1.204|
                  |L1.98|
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
000062  bf00              NOP      
                  |L1.100|
;;;55       		if (*p & (0x80 >> Diff))
000064  7828              LDRB     r0,[r5,#0]
000066  2180              MOVS     r1,#0x80
000068  4121              ASRS     r1,r1,r4
00006a  4208              TST      r0,r1
00006c  d004              BEQ      |L1.120|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
00006e  4652              MOV      r2,r10
000070  4631              MOV      r1,r6
000072  4648              MOV      r0,r9
000074  f7fffffe          BL       LCD_L0_SetPixelIndex
                  |L1.120|
;;;57           y--;
000078  1e76              SUBS     r6,r6,#1
;;;58     			if (++Diff == 8) {
00007a  1c60              ADDS     r0,r4,#1
00007c  4604              MOV      r4,r0
00007e  2808              CMP      r0,#8
000080  d101              BNE      |L1.134|
;;;59             Diff = 0;
000082  2400              MOVS     r4,#0
;;;60     				p++;
000084  1c6d              ADDS     r5,r5,#1
                  |L1.134|
;;;61     			}
;;;62     		} while (--xsize);
000086  1e78              SUBS     r0,r7,#1
000088  0007              MOVS     r7,r0
00008a  d1eb              BNE      |L1.100|
;;;63         break;
00008c  e01e              B        |L1.204|
                  |L1.142|
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
00008e  bf00              NOP      
                  |L1.144|
;;;66       		if (*p & (0x80 >> Diff)) {
000090  7828              LDRB     r0,[r5,#0]
000092  2180              MOVS     r1,#0x80
000094  4121              ASRS     r1,r1,r4
000096  4208              TST      r0,r1
000098  d00d              BEQ      |L1.182|
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
00009a  4631              MOV      r1,r6
00009c  4648              MOV      r0,r9
00009e  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a2  4683              MOV      r11,r0
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000a4  f64f70ff          MOV      r0,#0xffff
0000a8  eba0020b          SUB      r2,r0,r11
0000ac  4631              MOV      r1,r6
0000ae  4648              MOV      r0,r9
0000b0  f7fffffe          BL       LCD_L0_SetPixelIndex
;;;69           }
0000b4  bf00              NOP      
                  |L1.182|
;;;70           y--;
0000b6  1e76              SUBS     r6,r6,#1
;;;71     			if (++Diff == 8) {
0000b8  1c60              ADDS     r0,r4,#1
0000ba  4604              MOV      r4,r0
0000bc  2808              CMP      r0,#8
0000be  d101              BNE      |L1.196|
;;;72             Diff = 0;
0000c0  2400              MOVS     r4,#0
;;;73     				p++;
0000c2  1c6d              ADDS     r5,r5,#1
                  |L1.196|
;;;74     			}
;;;75     		} while (--xsize);
0000c4  1e78              SUBS     r0,r7,#1
0000c6  0007              MOVS     r7,r0
0000c8  d1e2              BNE      |L1.144|
;;;76         break;
0000ca  bf00              NOP      
                  |L1.204|
0000cc  bf00              NOP                            ;52
;;;77     	}
;;;78     }
0000ce  e8bd8ff8          POP      {r3-r11,pc}
;;;79     
                          ENDP

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
0000d2  e92d5ffc          PUSH     {r2-r12,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
0000d6  4605              MOV      r5,r0
0000d8  4689              MOV      r9,r1
0000da  4616              MOV      r6,r2
0000dc  461f              MOV      r7,r3
0000de  f8ddb040          LDR      r11,[sp,#0x40]
0000e2  f8dda030          LDR      r10,[sp,#0x30]
0000e6  f8dd8038          LDR      r8,[sp,#0x38]
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i=0; i<ysize; i++) {
0000ea  2400              MOVS     r4,#0
0000ec  e00f              B        |L1.270|
                  |L1.238|
;;;97         switch (BitsPerPixel) {
0000ee  f1ba0f01          CMP      r10,#1
0000f2  d108              BNE      |L1.262|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
0000f4  1928              ADDS     r0,r5,r4
0000f6  e9cd6b00          STRD     r6,r11,[sp,#0]
0000fa  4642              MOV      r2,r8
0000fc  4649              MOV      r1,r9
0000fe  9b0f              LDR      r3,[sp,#0x3c]
000100  f7fffffe          BL       _DrawBitLine1BPP
;;;100          break;
000104  bf00              NOP      
                  |L1.262|
000106  bf00              NOP      
;;;101        }
;;;102        pData += BytesPerLine;
000108  980d              LDR      r0,[sp,#0x34]
00010a  4480              ADD      r8,r8,r0
00010c  1c64              ADDS     r4,r4,#1              ;96
                  |L1.270|
00010e  42bc              CMP      r4,r7                 ;96
000110  dbed              BLT      |L1.238|
;;;103      }
;;;104    }
000112  e8bd9ffc          POP      {r2-r12,pc}
;;;105    
                          ENDP

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000116  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
000118  f9b01004          LDRSH    r1,[r0,#4]
;;;117      y1 = pRect->y1;
00011c  f9b02006          LDRSH    r2,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
000120  8803              LDRH     r3,[r0,#0]
000122  8844              LDRH     r4,[r0,#2]
000124  1b14              SUBS     r4,r2,r4
000126  4423              ADD      r3,r3,r4
000128  b21b              SXTH     r3,r3
00012a  8083              STRH     r3,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
00012c  8843              LDRH     r3,[r0,#2]
00012e  8804              LDRH     r4,[r0,#0]
000130  1b0c              SUBS     r4,r1,r4
000132  4423              ADD      r3,r3,r4
000134  b21b              SXTH     r3,r3
000136  80c3              STRH     r3,[r0,#6]
;;;120    }
000138  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  _TransformPointCCW PROC
;;;130    */
;;;131    static void _TransformPointCCW(int * pXPos, int * pYPos) {
00013a  e92d47fc          PUSH     {r2-r10,lr}
00013e  4604              MOV      r4,r0
000140  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
000142  2000              MOVS     r0,#0
000144  9000              STR      r0,[sp,#0]
000146  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
00014e  f7fffffe          BL       LCD_GetXSize
000152  f1a00801          SUB      r8,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
000156  f7fffffe          BL       LCD_GetYSize
00015a  f1a00901          SUB      r9,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
00015e  f9bd0004          LDRSH    r0,[sp,#4]
000162  4540              CMP      r0,r8
000164  dd03              BLE      |L1.366|
;;;143        ClientRect.x1 = xNumPixel;
000166  fa0ff088          SXTH     r0,r8
00016a  f8ad0004          STRH     r0,[sp,#4]
                  |L1.366|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
00016e  f9bd0006          LDRSH    r0,[sp,#6]
000172  4548              CMP      r0,r9
000174  dd03              BLE      |L1.382|
;;;146        ClientRect.y1 = yNumPixel;
000176  fa0ff089          SXTH     r0,r9
00017a  f8ad0006          STRH     r0,[sp,#6]
                  |L1.382|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
00017e  6826              LDR      r6,[r4,#0]
;;;150      yPos = *pYPos;
000180  682f              LDR      r7,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 + yPos;
000182  f9bd0000          LDRSH    r0,[sp,#0]
000186  4438              ADD      r0,r0,r7
000188  6020              STR      r0,[r4,#0]
;;;153      *pYPos = ClientRect.y1 - xPos;
00018a  f9bd0006          LDRSH    r0,[sp,#6]
00018e  1b80              SUBS     r0,r0,r6
000190  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
000192  4985              LDR      r1,|L1.936|
000194  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
000198  6820              LDR      r0,[r4,#0]
00019a  4408              ADD      r0,r0,r1
00019c  4982              LDR      r1,|L1.936|
00019e  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001a2  1a40              SUBS     r0,r0,r1
0001a4  6020              STR      r0,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
0001a6  4980              LDR      r1,|L1.936|
0001a8  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
0001ac  6828              LDR      r0,[r5,#0]
0001ae  4408              ADD      r0,r0,r1
0001b0  f9bd1006          LDRSH    r1,[sp,#6]
0001b4  f9bd2002          LDRSH    r2,[sp,#2]
0001b8  1a89              SUBS     r1,r1,r2
0001ba  1a40              SUBS     r0,r0,r1
0001bc  497a              LDR      r1,|L1.936|
0001be  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001c2  4408              ADD      r0,r0,r1
0001c4  6028              STR      r0,[r5,#0]
;;;157    }
0001c6  e8bd87fc          POP      {r2-r10,pc}
;;;158    
                          ENDP

                  _DrawBitmapCCW PROC
;;;162    */
;;;163    static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001ca  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
0001ce  b08b              SUB      sp,sp,#0x2c
0001d0  4614              MOV      r4,r2
0001d2  461d              MOV      r5,r3
0001d4  f8dda060          LDR      r10,[sp,#0x60]
0001d8  9f1c              LDR      r7,[sp,#0x70]
0001da  9e1a              LDR      r6,[sp,#0x68]
;;;167      U8  Data = 0;
0001dc  2000              MOVS     r0,#0
0001de  900a              STR      r0,[sp,#0x28]
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
0001e0  980c              LDR      r0,[sp,#0x30]
0001e2  4428              ADD      r0,r0,r5
0001e4  1e40              SUBS     r0,r0,#1
0001e6  9008              STR      r0,[sp,#0x20]
;;;171      x1 = x0 + xsize - 1;
0001e8  980b              LDR      r0,[sp,#0x2c]
0001ea  4420              ADD      r0,r0,r4
0001ec  1e40              SUBS     r0,r0,#1
0001ee  9009              STR      r0,[sp,#0x24]
;;;172      /* Rotate positions */
;;;173      _TransformPointCCW(&x0, &y0);
0001f0  a90c              ADD      r1,sp,#0x30
0001f2  a80b              ADD      r0,sp,#0x2c
0001f4  f7fffffe          BL       _TransformPointCCW
;;;174      _TransformPointCCW(&x1, &y1);
0001f8  a908              ADD      r1,sp,#0x20
0001fa  a809              ADD      r0,sp,#0x24
0001fc  f7fffffe          BL       _TransformPointCCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
000200  f1ba0f01          CMP      r10,#1
000204  d163              BNE      |L1.718|
000206  9819              LDR      r0,[sp,#0x64]
000208  2801              CMP      r0,#1
00020a  d160              BNE      |L1.718|
;;;177        int Diff = 0;
00020c  f04f0800          MOV      r8,#0
;;;178        /* Clip top */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
000210  4864              LDR      r0,|L1.932|
000212  f9b00006          LDRSH    r0,[r0,#6]
000216  9908              LDR      r1,[sp,#0x20]
000218  4288              CMP      r0,r1
00021a  dd06              BLE      |L1.554|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
00021c  4961              LDR      r1,|L1.932|
00021e  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_Context
000222  9a08              LDR      r2,[sp,#0x20]
000224  1a88              SUBS     r0,r1,r2
;;;181          xsize -= Diff;
000226  1a24              SUBS     r4,r4,r0
;;;182        }
000228  bf00              NOP      
                  |L1.554|
;;;183        /* Clip bottom */
;;;184        if (y0 > GUI_Context.ClipRect.y1) {
00022a  485e              LDR      r0,|L1.932|
00022c  f9b0000a          LDRSH    r0,[r0,#0xa]
000230  990c              LDR      r1,[sp,#0x30]
000232  4288              CMP      r0,r1
000234  da15              BGE      |L1.610|
;;;185          Diff = y0 - GUI_Context.ClipRect.y1;
000236  485b              LDR      r0,|L1.932|
000238  f9b0000a          LDRSH    r0,[r0,#0xa]
00023c  990c              LDR      r1,[sp,#0x30]
00023e  eba10800          SUB      r8,r1,r0
;;;186    			xsize -= Diff;
000242  eba40408          SUB      r4,r4,r8
;;;187    			switch (BitsPerPixel) {
000246  2e01              CMP      r6,#1
000248  d10a              BNE      |L1.608|
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
00024a  eb0707e8          ADD      r7,r7,r8,ASR #3
00024e  ea4f00e8          ASR      r0,r8,#3
000252  990c              LDR      r1,[sp,#0x30]
000254  eba100c0          SUB      r0,r1,r0,LSL #3
000258  900c              STR      r0,[sp,#0x30]
00025a  f0080807          AND      r8,r8,#7
;;;190    				break;
00025e  bf00              NOP      
                  |L1.608|
000260  bf00              NOP      
                  |L1.610|
;;;191    			}
;;;192        }
;;;193        if (ysize <= 0) {
000262  2d00              CMP      r5,#0
000264  dc02              BGT      |L1.620|
                  |L1.614|
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x1 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x1 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200        }
;;;201        /* Clip left side */
;;;202        if (x0 < GUI_Context.ClipRect.x0) {
;;;203          int Diff = GUI_Context.ClipRect.x0 - x0;
;;;204          pPixel += Diff * BytesPerLine;
;;;205          x0 += Diff;
;;;206          ysize -= Diff;
;;;207        }
;;;208        if (xsize <= 0) {
;;;209    		  return;
;;;210        }
;;;211        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;212      } else {
;;;213        /* Handle BITMAP with magnification */
;;;214        int x, y, xi, yi;
;;;215        int Shift = 8 - BitsPerPixel;
;;;216        for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
;;;217          int xMax = x + yMul - 1;
;;;218          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;219            int BitsLeft = 0;
;;;220            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;221            for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
;;;222              U8  Index;
;;;223              if (!BitsLeft) {
;;;224                Data = *pDataLine++;
;;;225                BitsLeft =8;
;;;226              }
;;;227              Index = Data >> Shift;
;;;228              Data    <<= BitsPerPixel;
;;;229              BitsLeft -= BitsPerPixel;
;;;230              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;231                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;232                if (pTrans) {
;;;233                  LCD_COLORINDEX = *(pTrans + Index);
;;;234                } else {
;;;235                  LCD_COLORINDEX = Index;
;;;236                }
;;;237                LCD_FillRect(x, y - xMul + 1, xMax, y);
;;;238                LCD_COLORINDEX = OldColor;
;;;239              }
;;;240            }
;;;241          }
;;;242        }
;;;243      }
;;;244    }
000266  b00f              ADD      sp,sp,#0x3c
000268  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.620|
00026c  484d              LDR      r0,|L1.932|
00026e  f9b00008          LDRSH    r0,[r0,#8]            ;197
000272  9909              LDR      r1,[sp,#0x24]         ;197
000274  4288              CMP      r0,r1                 ;197
000276  da06              BGE      |L1.646|
000278  494a              LDR      r1,|L1.932|
00027a  f9b11008          LDRSH    r1,[r1,#8]            ;198  ; GUI_Context
00027e  9a09              LDR      r2,[sp,#0x24]         ;198
000280  1a50              SUBS     r0,r2,r1              ;198
000282  1a2d              SUBS     r5,r5,r0              ;199
000284  bf00              NOP                            ;200
                  |L1.646|
000286  4847              LDR      r0,|L1.932|
000288  f9b00004          LDRSH    r0,[r0,#4]            ;202  ; GUI_Context
00028c  990b              LDR      r1,[sp,#0x2c]         ;202
00028e  4288              CMP      r0,r1                 ;202
000290  dd0c              BLE      |L1.684|
000292  4944              LDR      r1,|L1.932|
000294  f9b11004          LDRSH    r1,[r1,#4]            ;203  ; GUI_Context
000298  9a0b              LDR      r2,[sp,#0x2c]         ;203
00029a  1a88              SUBS     r0,r1,r2              ;203
00029c  991b              LDR      r1,[sp,#0x6c]         ;204
00029e  fb007701          MLA      r7,r0,r1,r7           ;204
0002a2  990b              LDR      r1,[sp,#0x2c]         ;205
0002a4  4401              ADD      r1,r1,r0              ;205
0002a6  910b              STR      r1,[sp,#0x2c]         ;205
0002a8  1a2d              SUBS     r5,r5,r0              ;206
0002aa  bf00              NOP                            ;207
                  |L1.684|
0002ac  2c00              CMP      r4,#0                 ;208
0002ae  dc00              BGT      |L1.690|
0002b0  e7d9              B        |L1.614|
                  |L1.690|
0002b2  991b              LDR      r1,[sp,#0x6c]         ;211
0002b4  981d              LDR      r0,[sp,#0x74]         ;211
0002b6  462b              MOV      r3,r5                 ;211
0002b8  4622              MOV      r2,r4                 ;211
0002ba  e9cd7802          STRD     r7,r8,[sp,#8]         ;211
0002be  e9cd6100          STRD     r6,r1,[sp,#0]         ;211
0002c2  9004              STR      r0,[sp,#0x10]         ;211
0002c4  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;211
0002c8  f7fffffe          BL       _DrawBitmap
0002cc  e068              B        |L1.928|
                  |L1.718|
0002ce  f1c60008          RSB      r0,r6,#8              ;215
0002d2  9005              STR      r0,[sp,#0x14]         ;215
0002d4  f8dd802c          LDR      r8,[sp,#0x2c]         ;216
0002d8  2000              MOVS     r0,#0                 ;216
0002da  9007              STR      r0,[sp,#0x1c]         ;216
0002dc  e05c              B        |L1.920|
                  |L1.734|
0002de  9819              LDR      r0,[sp,#0x64]         ;217
0002e0  4440              ADD      r0,r0,r8              ;217
0002e2  1e40              SUBS     r0,r0,#1              ;217
0002e4  9004              STR      r0,[sp,#0x10]         ;217
0002e6  482f              LDR      r0,|L1.932|
0002e8  f9b01004          LDRSH    r1,[r0,#4]            ;218  ; GUI_Context
0002ec  9804              LDR      r0,[sp,#0x10]         ;218
0002ee  4281              CMP      r1,r0                 ;218
0002f0  dc4b              BGT      |L1.906|
0002f2  482c              LDR      r0,|L1.932|
0002f4  f9b00008          LDRSH    r0,[r0,#8]            ;218
0002f8  4540              CMP      r0,r8                 ;218
0002fa  db46              BLT      |L1.906|
0002fc  2000              MOVS     r0,#0                 ;219
0002fe  9003              STR      r0,[sp,#0xc]          ;219
000300  9702              STR      r7,[sp,#8]            ;220
000302  f8ddb030          LDR      r11,[sp,#0x30]        ;221
000306  9006              STR      r0,[sp,#0x18]         ;221
000308  e03b              B        |L1.898|
                  |L1.778|
00030a  9803              LDR      r0,[sp,#0xc]          ;223
00030c  b938              CBNZ     r0,|L1.798|
00030e  9802              LDR      r0,[sp,#8]            ;224
000310  7800              LDRB     r0,[r0,#0]            ;224
000312  900a              STR      r0,[sp,#0x28]         ;224
000314  9802              LDR      r0,[sp,#8]            ;224
000316  1c40              ADDS     r0,r0,#1              ;224
000318  9002              STR      r0,[sp,#8]            ;224
00031a  2008              MOVS     r0,#8                 ;225
00031c  9003              STR      r0,[sp,#0xc]          ;225
                  |L1.798|
00031e  9905              LDR      r1,[sp,#0x14]         ;227
000320  980a              LDR      r0,[sp,#0x28]         ;227
000322  fa40f901          ASR      r9,r0,r1              ;227
000326  980a              LDR      r0,[sp,#0x28]         ;228
000328  40b0              LSLS     r0,r0,r6              ;228
00032a  b2c0              UXTB     r0,r0                 ;228
00032c  900a              STR      r0,[sp,#0x28]         ;228
00032e  9803              LDR      r0,[sp,#0xc]          ;229
000330  1b80              SUBS     r0,r0,r6              ;229
000332  9003              STR      r0,[sp,#0xc]          ;229
000334  f1b90f00          CMP      r9,#0                 ;230
000338  d104              BNE      |L1.836|
00033a  481a              LDR      r0,|L1.932|
00033c  7b00              LDRB     r0,[r0,#0xc]          ;230  ; GUI_Context
00033e  f0100f02          TST      r0,#2                 ;230
000342  d119              BNE      |L1.888|
                  |L1.836|
000344  4817              LDR      r0,|L1.932|
000346  8840              LDRH     r0,[r0,#2]            ;231  ; GUI_Context
000348  9001              STR      r0,[sp,#4]            ;231
00034a  981d              LDR      r0,[sp,#0x74]         ;232
00034c  b128              CBZ      r0,|L1.858|
00034e  981d              LDR      r0,[sp,#0x74]         ;233
000350  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;233
000354  4913              LDR      r1,|L1.932|
000356  8048              STRH     r0,[r1,#2]            ;233
000358  e002              B        |L1.864|
                  |L1.858|
00035a  4812              LDR      r0,|L1.932|
00035c  f8a09002          STRH     r9,[r0,#2]            ;235
                  |L1.864|
000360  ebab000a          SUB      r0,r11,r10            ;237
000364  1c41              ADDS     r1,r0,#1              ;237
000366  465b              MOV      r3,r11                ;237
000368  4640              MOV      r0,r8                 ;237
00036a  9a04              LDR      r2,[sp,#0x10]         ;237
00036c  f7fffffe          BL       LCD_FillRect
000370  490c              LDR      r1,|L1.932|
000372  9801              LDR      r0,[sp,#4]            ;238
000374  8048              STRH     r0,[r1,#2]            ;238
000376  bf00              NOP                            ;239
                  |L1.888|
000378  9806              LDR      r0,[sp,#0x18]         ;221
00037a  1c40              ADDS     r0,r0,#1              ;221
00037c  9006              STR      r0,[sp,#0x18]         ;221
00037e  ebab0b0a          SUB      r11,r11,r10           ;221
                  |L1.898|
000382  9806              LDR      r0,[sp,#0x18]         ;221
000384  42a0              CMP      r0,r4                 ;221
000386  dbc0              BLT      |L1.778|
000388  bf00              NOP                            ;241
                  |L1.906|
00038a  9807              LDR      r0,[sp,#0x1c]         ;216
00038c  1c40              ADDS     r0,r0,#1              ;216
00038e  9007              STR      r0,[sp,#0x1c]         ;216
000390  9819              LDR      r0,[sp,#0x64]         ;216
000392  4480              ADD      r8,r8,r0              ;216
000394  981b              LDR      r0,[sp,#0x6c]         ;216
000396  4407              ADD      r7,r7,r0              ;216
                  |L1.920|
000398  9807              LDR      r0,[sp,#0x1c]         ;216
00039a  42a8              CMP      r0,r5                 ;216
00039c  db9f              BLT      |L1.734|
00039e  bf00              NOP                            ;243
                  |L1.928|
0003a0  bf00              NOP      
0003a2  e760              B        |L1.614|
;;;245    
                          ENDP

                  |L1.932|
                          DCD      GUI_Context
                  |L1.936|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCCW
                          DCD      _DrawBitmapCCW
                          DCD      _Rect2TextRect
