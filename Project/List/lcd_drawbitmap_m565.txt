; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\lcd_drawbitmap_m565.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\lcd_drawbitmap_m565.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcd_drawbitmap_m565.crf ..\Ucgui\GUI\Core\LCD_DrawBitmap_M565.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_M565 PROC
;;;33     */
;;;34     static void _DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
;;;35       const U16 * pData;
;;;36       int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  2000              MOVS     r0,#0
000010  9007              STR      r0,[sp,#0x1c]
;;;37       GUI_USE_PARA(pLogPal);
000012  9817              LDR      r0,[sp,#0x5c]
000014  9017              STR      r0,[sp,#0x5c]
;;;38       OldIndex = LCD_GetColorIndex();
000016  f7fffffe          BL       LCD_GetColorIndex
00001a  900c              STR      r0,[sp,#0x30]
;;;39       PrevIndex = OldIndex;
00001c  980c              LDR      r0,[sp,#0x30]
00001e  900b              STR      r0,[sp,#0x2c]
;;;40       pData = (const U16 *)pPixel;
000020  f8dda058          LDR      r10,[sp,#0x58]
;;;41       Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
000024  497d              LDR      r1,|L1.540|
000026  7b48              LDRB     r0,[r1,#0xd]  ; GUI_Context
000028  f7fffffe          BL       LCD_GetFixedPaletteEx
00002c  900a              STR      r0,[sp,#0x28]
;;;42       SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
00002e  497b              LDR      r1,|L1.540|
000030  7b48              LDRB     r0,[r1,#0xd]  ; GUI_Context
000032  f7fffffe          BL       LCD_GetSwapRBEx
000036  9009              STR      r0,[sp,#0x24]
;;;43       Mag = (xMag | yMag);
000038  e9dd0118          LDRD     r0,r1,[sp,#0x60]
00003c  4308              ORRS     r0,r0,r1
00003e  9008              STR      r0,[sp,#0x20]
;;;44       BytesPerLine = xsize * 2;
000040  ea4f0845          LSL      r8,r5,#1
;;;45       #if GUI_SUPPORT_MEMDEV == 0
;;;46       if ((Mode == 565) && (SwapRB == 1) && (Mag == 1)) {
000044  980a              LDR      r0,[sp,#0x28]
000046  f5a07100          SUB      r1,r0,#0x200
00004a  3935              SUBS     r1,r1,#0x35
00004c  d106              BNE      |L1.92|
00004e  9809              LDR      r0,[sp,#0x24]
000050  2801              CMP      r0,#1
000052  d103              BNE      |L1.92|
000054  9808              LDR      r0,[sp,#0x20]
000056  2801              CMP      r0,#1
000058  d100              BNE      |L1.92|
;;;47         UseDrawBitmap = 1;
00005a  9007              STR      r0,[sp,#0x1c]
                  |L1.92|
;;;48       }
;;;49       #else
;;;50       if (GUI_Context.pDeviceAPI->pMemDevAPI) {
;;;51         if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
;;;52             ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 1)))  && (Mag == 1)) {
;;;53           UseDrawBitmap = 1;
;;;54         }
;;;55       }
;;;56       #endif
;;;57       if (UseDrawBitmap) {
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  b180              CBZ      r0,|L1.130|
;;;58         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
000060  2100              MOVS     r1,#0
000062  2210              MOVS     r2,#0x10
000064  9816              LDR      r0,[sp,#0x58]
000066  e9cd2802          STRD     r2,r8,[sp,#8]
00006a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00006e  2001              MOVS     r0,#1
000070  9000              STR      r0,[sp,#0]
000072  463b              MOV      r3,r7
000074  462a              MOV      r2,r5
000076  4649              MOV      r1,r9
000078  9001              STR      r0,[sp,#4]
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       LCD_DrawBitmap
000080  e0ca              B        |L1.536|
                  |L1.130|
;;;59       } else {
;;;60         if (Mag == 1) {
000082  9808              LDR      r0,[sp,#0x20]
000084  2801              CMP      r0,#1
000086  d173              BNE      |L1.368|
;;;61           /* Perform clipping */
;;;62           int x1, y1, Diff;
;;;63           y1 = y0 + ysize - 1;
000088  eb090007          ADD      r0,r9,r7
00008c  1e40              SUBS     r0,r0,#1
00008e  9005              STR      r0,[sp,#0x14]
;;;64           x1 = x0 + xsize - 1;
000090  1970              ADDS     r0,r6,r5
000092  1e40              SUBS     r0,r0,#1
000094  9006              STR      r0,[sp,#0x18]
;;;65           /* Clip Y */
;;;66           if (y0 < GUI_Context.ClipRect.y0) {
000096  4861              LDR      r0,|L1.540|
000098  f9b00006          LDRSH    r0,[r0,#6]
00009c  4548              CMP      r0,r9
00009e  dd0d              BLE      |L1.188|
;;;67             Diff = GUI_Context.ClipRect.y0 -y0;
0000a0  485e              LDR      r0,|L1.540|
0000a2  f9b00006          LDRSH    r0,[r0,#6]
0000a6  eba00409          SUB      r4,r0,r9
;;;68             y0   = GUI_Context.ClipRect.y0;
0000aa  485c              LDR      r0,|L1.540|
0000ac  f9b09006          LDRSH    r9,[r0,#6]
;;;69             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;70               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;71             #else
;;;72               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
0000b0  fb04f008          MUL      r0,r4,r8
0000b4  0840              LSRS     r0,r0,#1
0000b6  eb0a0a40          ADD      r10,r10,r0,LSL #1
;;;73             #endif
;;;74             ysize -= Diff;
0000ba  1b3f              SUBS     r7,r7,r4
                  |L1.188|
;;;75           }
;;;76           Diff = y1 - GUI_Context.ClipRect.y1;
0000bc  4857              LDR      r0,|L1.540|
0000be  f9b0100a          LDRSH    r1,[r0,#0xa]
0000c2  9805              LDR      r0,[sp,#0x14]
0000c4  1a44              SUBS     r4,r0,r1
;;;77           if (Diff > 0) {
0000c6  2c00              CMP      r4,#0
0000c8  dd00              BLE      |L1.204|
;;;78             ysize -= Diff;
0000ca  1b3f              SUBS     r7,r7,r4
                  |L1.204|
;;;79           }
;;;80           if (ysize <=0) {
0000cc  2f00              CMP      r7,#0
0000ce  dc02              BGT      |L1.214|
                  |L1.208|
;;;81     		    return;
;;;82           }
;;;83           /* Clip right side */
;;;84           Diff = x1 - GUI_Context.ClipRect.x1;
;;;85           if (Diff > 0) {
;;;86             xsize -= Diff;
;;;87           }
;;;88           /* Clip left side */
;;;89           Diff =0;
;;;90           if (x0 < GUI_Context.ClipRect.x0) {
;;;91             Diff = GUI_Context.ClipRect.x0-x0;
;;;92     			  xsize -= Diff;
;;;93             pData += Diff; 
;;;94             x0 += Diff; 
;;;95           }
;;;96           if (xsize <=0) {
;;;97     		    return;
;;;98           }
;;;99           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;100          for (y = 0; y < ysize; y++) {
;;;101            int x;
;;;102            const U16 * p = pData;
;;;103            for (x = 0; x < xsize; x++) {
;;;104              U16 Index;
;;;105              Index = *p++;
;;;106              if (Index != PrevIndex) {
;;;107                LCD_SetColor(LCD_Index2Color_M565(Index));
;;;108                PrevIndex = Index;
;;;109              }
;;;110              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;111            }
;;;112            pData += BytesPerLine / 2;
;;;113          }
;;;114        } else {
;;;115          /* Magnified output using LCD_FillRect() */
;;;116          int x,y;
;;;117          int yi;
;;;118          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;119            int yMax;
;;;120            yMax = y + yMag - 1;
;;;121            /* Draw if within clip area */
;;;122            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;123              int xi;
;;;124              const U16 GUI_UNI_PTR * p = pData;
;;;125              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;126                U16 Index;
;;;127                Index = *p++;
;;;128                if (Index != PrevIndex) {
;;;129                  LCD_SetColor(LCD_Index2Color_M565(Index));
;;;130                  PrevIndex = Index;
;;;131                }
;;;132                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;133              }
;;;134            }
;;;135            pData += BytesPerLine / 2;
;;;136          }
;;;137        }
;;;138        GUI_SetColorIndex(OldIndex);
;;;139      }
;;;140    }
0000d0  b00d              ADD      sp,sp,#0x34
0000d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.214|
0000d6  4851              LDR      r0,|L1.540|
0000d8  f9b01008          LDRSH    r1,[r0,#8]            ;84
0000dc  9806              LDR      r0,[sp,#0x18]         ;84
0000de  1a44              SUBS     r4,r0,r1              ;84
0000e0  2c00              CMP      r4,#0                 ;85
0000e2  dd00              BLE      |L1.230|
0000e4  1b2d              SUBS     r5,r5,r4              ;86
                  |L1.230|
0000e6  2400              MOVS     r4,#0                 ;89
0000e8  484c              LDR      r0,|L1.540|
0000ea  f9b00004          LDRSH    r0,[r0,#4]            ;90  ; GUI_Context
0000ee  42b0              CMP      r0,r6                 ;90
0000f0  dd07              BLE      |L1.258|
0000f2  484a              LDR      r0,|L1.540|
0000f4  f9b00004          LDRSH    r0,[r0,#4]            ;91  ; GUI_Context
0000f8  1b84              SUBS     r4,r0,r6              ;91
0000fa  1b2d              SUBS     r5,r5,r4              ;92
0000fc  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;93
000100  4426              ADD      r6,r6,r4              ;94
                  |L1.258|
000102  2d00              CMP      r5,#0                 ;96
000104  dc00              BGT      |L1.264|
000106  e7e3              B        |L1.208|
                  |L1.264|
000108  f04f0b00          MOV      r11,#0                ;100
00010c  e02c              B        |L1.360|
                  |L1.270|
00010e  f8cda00c          STR      r10,[sp,#0xc]         ;102
000112  2000              MOVS     r0,#0                 ;103
000114  9004              STR      r0,[sp,#0x10]         ;103
000116  e01c              B        |L1.338|
                  |L1.280|
000118  9803              LDR      r0,[sp,#0xc]          ;105
00011a  8800              LDRH     r0,[r0,#0]            ;105
00011c  9002              STR      r0,[sp,#8]            ;105
00011e  9803              LDR      r0,[sp,#0xc]          ;105
000120  1c80              ADDS     r0,r0,#2              ;105
000122  9003              STR      r0,[sp,#0xc]          ;105
000124  990b              LDR      r1,[sp,#0x2c]         ;106
000126  9802              LDR      r0,[sp,#8]            ;106
000128  4288              CMP      r0,r1                 ;106
00012a  d007              BEQ      |L1.316|
00012c  9802              LDR      r0,[sp,#8]            ;107
00012e  f7fffffe          BL       LCD_Index2Color_M565
000132  9001              STR      r0,[sp,#4]            ;107
000134  f7fffffe          BL       LCD_SetColor
000138  9802              LDR      r0,[sp,#8]            ;108
00013a  900b              STR      r0,[sp,#0x2c]         ;108
                  |L1.316|
00013c  4b37              LDR      r3,|L1.540|
00013e  885a              LDRH     r2,[r3,#2]            ;110  ; GUI_Context
000140  eb0b0109          ADD      r1,r11,r9             ;110
000144  9b04              LDR      r3,[sp,#0x10]         ;110
000146  1998              ADDS     r0,r3,r6              ;110
000148  f7fffffe          BL       LCD_L0_SetPixelIndex
00014c  9804              LDR      r0,[sp,#0x10]         ;103
00014e  1c40              ADDS     r0,r0,#1              ;103
000150  9004              STR      r0,[sp,#0x10]         ;103
                  |L1.338|
000152  9804              LDR      r0,[sp,#0x10]         ;103
000154  42a8              CMP      r0,r5                 ;103
000156  dbdf              BLT      |L1.280|
000158  4640              MOV      r0,r8                 ;112
00015a  eb0871d0          ADD      r1,r8,r0,LSR #31      ;112
00015e  1049              ASRS     r1,r1,#1              ;112
000160  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;112
000164  f10b0b01          ADD      r11,r11,#1            ;100
                  |L1.360|
000168  45bb              CMP      r11,r7                ;100
00016a  dbd0              BLT      |L1.270|
00016c  e051              B        |L1.530|
00016e  e7ff              B        |L1.368|
                  |L1.368|
000170  464c              MOV      r4,r9                 ;118
000172  2000              MOVS     r0,#0                 ;118
000174  9005              STR      r0,[sp,#0x14]         ;118
000176  e048              B        |L1.522|
                  |L1.376|
000178  9819              LDR      r0,[sp,#0x64]         ;120
00017a  4420              ADD      r0,r0,r4              ;120
00017c  1e40              SUBS     r0,r0,#1              ;120
00017e  9004              STR      r0,[sp,#0x10]         ;120
000180  4826              LDR      r0,|L1.540|
000182  f9b01006          LDRSH    r1,[r0,#6]            ;122
000186  9804              LDR      r0,[sp,#0x10]         ;122
000188  4281              CMP      r1,r0                 ;122
00018a  dc30              BGT      |L1.494|
00018c  4823              LDR      r0,|L1.540|
00018e  f9b0000a          LDRSH    r0,[r0,#0xa]          ;122
000192  42a0              CMP      r0,r4                 ;122
000194  db2b              BLT      |L1.494|
000196  f8cda008          STR      r10,[sp,#8]           ;124
00019a  9606              STR      r6,[sp,#0x18]         ;125
00019c  2000              MOVS     r0,#0                 ;125
00019e  9003              STR      r0,[sp,#0xc]          ;125
0001a0  e021              B        |L1.486|
                  |L1.418|
0001a2  9802              LDR      r0,[sp,#8]            ;127
0001a4  8800              LDRH     r0,[r0,#0]            ;127
0001a6  9001              STR      r0,[sp,#4]            ;127
0001a8  9802              LDR      r0,[sp,#8]            ;127
0001aa  1c80              ADDS     r0,r0,#2              ;127
0001ac  9002              STR      r0,[sp,#8]            ;127
0001ae  990b              LDR      r1,[sp,#0x2c]         ;128
0001b0  9801              LDR      r0,[sp,#4]            ;128
0001b2  4288              CMP      r0,r1                 ;128
0001b4  d007              BEQ      |L1.454|
0001b6  9801              LDR      r0,[sp,#4]            ;129
0001b8  f7fffffe          BL       LCD_Index2Color_M565
0001bc  9000              STR      r0,[sp,#0]            ;129
0001be  f7fffffe          BL       LCD_SetColor
0001c2  9801              LDR      r0,[sp,#4]            ;130
0001c4  900b              STR      r0,[sp,#0x2c]         ;130
                  |L1.454|
0001c6  9918              LDR      r1,[sp,#0x60]         ;132
0001c8  9806              LDR      r0,[sp,#0x18]         ;132
0001ca  4408              ADD      r0,r0,r1              ;132
0001cc  1e42              SUBS     r2,r0,#1              ;132
0001ce  4621              MOV      r1,r4                 ;132
0001d0  9b04              LDR      r3,[sp,#0x10]         ;132
0001d2  9806              LDR      r0,[sp,#0x18]         ;132
0001d4  f7fffffe          BL       LCD_FillRect
0001d8  9803              LDR      r0,[sp,#0xc]          ;125
0001da  1c40              ADDS     r0,r0,#1              ;125
0001dc  9003              STR      r0,[sp,#0xc]          ;125
0001de  9918              LDR      r1,[sp,#0x60]         ;125
0001e0  9806              LDR      r0,[sp,#0x18]         ;125
0001e2  4408              ADD      r0,r0,r1              ;125
0001e4  9006              STR      r0,[sp,#0x18]         ;125
                  |L1.486|
0001e6  9803              LDR      r0,[sp,#0xc]          ;125
0001e8  42a8              CMP      r0,r5                 ;125
0001ea  dbda              BLT      |L1.418|
0001ec  bf00              NOP                            ;134
                  |L1.494|
0001ee  4640              MOV      r0,r8                 ;135
0001f0  eb0871d0          ADD      r1,r8,r0,LSR #31      ;135
0001f4  1049              ASRS     r1,r1,#1              ;135
0001f6  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;135
0001fa  9805              LDR      r0,[sp,#0x14]         ;118
0001fc  1c40              ADDS     r0,r0,#1              ;118
0001fe  9005              STR      r0,[sp,#0x14]         ;118
000200  9819              LDR      r0,[sp,#0x64]         ;118
000202  4404              ADD      r4,r4,r0              ;118
000204  9816              LDR      r0,[sp,#0x58]         ;118
000206  4440              ADD      r0,r0,r8              ;118
000208  9016              STR      r0,[sp,#0x58]         ;118
                  |L1.522|
00020a  9805              LDR      r0,[sp,#0x14]         ;118
00020c  42b8              CMP      r0,r7                 ;118
00020e  dbb3              BLT      |L1.376|
000210  bf00              NOP                            ;137
                  |L1.530|
000212  980c              LDR      r0,[sp,#0x30]         ;138
000214  f7fffffe          BL       GUI_SetColorIndex
                  |L1.536|
000218  bf00              NOP      
00021a  e759              B        |L1.208|
;;;141    
                          ENDP

                  |L1.540|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsM565
                          DCD      _DrawBitmap_M565
                          DCD      LCD_Index2Color_M565
