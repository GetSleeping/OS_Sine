; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\gui_dispstringinrectex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\gui_dispstringinrectex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\gui_dispstringinrectex.crf ..\Ucgui\GUI\Core\GUI_DispStringInRectEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetRotation PROC
;;;42     */
;;;43     static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;44       const GUI_ROTATION * pLCD_ApiOld;
;;;45       GUI_LOCK();
000004  f7fffffe          BL       GUI_Lock
;;;46       pLCD_ApiOld = GUI_pLCD_APIList;
000008  482a              LDR      r0,|L1.180|
00000a  6805              LDR      r5,[r0,#0]  ; GUI_pLCD_APIList
;;;47       if (pLCD_Api) {
00000c  b11c              CBZ      r4,|L1.22|
;;;48         GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
00000e  2000              MOVS     r0,#0
000010  4929              LDR      r1,|L1.184|
000012  6108              STR      r0,[r1,#0x10]  ; GUI_Context
000014  e003              B        |L1.30|
                  |L1.22|
;;;49       } else {
;;;50         GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
000016  4828              LDR      r0,|L1.184|
000018  1d00              ADDS     r0,r0,#4
00001a  1f01              SUBS     r1,r0,#4
00001c  6108              STR      r0,[r1,#0x10]  ; GUI_Context
                  |L1.30|
;;;51       }
;;;52       GUI_pLCD_APIList = pLCD_Api;
00001e  4825              LDR      r0,|L1.180|
000020  6004              STR      r4,[r0,#0]  ; GUI_pLCD_APIList
;;;53       GUI_UNLOCK();
000022  f7fffffe          BL       GUI_Unlock
;;;54       return pLCD_ApiOld;
000026  4628              MOV      r0,r5
;;;55     }
000028  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP

                  GUI_DispStringInRectEx PROC
;;;66     */
;;;67     void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
00002a  e92d47ff          PUSH     {r0-r10,lr}
00002e  4607              MOV      r7,r0
000030  460c              MOV      r4,r1
000032  4690              MOV      r8,r2
000034  4699              MOV      r9,r3
000036  9d0c              LDR      r5,[sp,#0x30]
;;;68       const GUI_ROTATION * pLCD_ApiOld;
;;;69       if (pLCD_Api == GUI_ROTATE_0) {
000038  b935              CBNZ     r5,|L1.72|
;;;70         /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
;;;71         GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
00003a  464b              MOV      r3,r9
00003c  4642              MOV      r2,r8
00003e  4621              MOV      r1,r4
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       GUI_DispStringInRectMax
000046  e032              B        |L1.174|
                  |L1.72|
;;;72       } else {
;;;73         #if (!GUI_WINSUPPORT)
;;;74           GUI_RECT Rect_Old;
;;;75         #else
;;;76           const GUI_RECT * pOldClipRect = NULL;
000048  2600              MOVS     r6,#0
;;;77         #endif
;;;78         GUI_RECT rClip, rText = {0};
00004a  2000              MOVS     r0,#0
00004c  9000              STR      r0,[sp,#0]
00004e  9001              STR      r0,[sp,#4]
;;;79         GUI_LOCK();
000050  f7fffffe          BL       GUI_Lock
;;;80         /* Set the clip rectangle */
;;;81         if (pRect) {
000054  b1ac              CBZ      r4,|L1.130|
;;;82           rText = *pRect;
000056  6820              LDR      r0,[r4,#0]
000058  9000              STR      r0,[sp,#0]
00005a  6860              LDR      r0,[r4,#4]
00005c  9001              STR      r0,[sp,#4]
;;;83           GUI_RectDispString = rText;
00005e  4817              LDR      r0,|L1.188|
000060  9900              LDR      r1,[sp,#0]
000062  6001              STR      r1,[r0,#0]  ; GUI_RectDispString
000064  9901              LDR      r1,[sp,#4]
000066  6041              STR      r1,[r0,#4]  ; GUI_RectDispString
;;;84           #if (GUI_WINSUPPORT)
;;;85             pOldClipRect = WM_SetUserClipRect(pRect);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       WM_SetUserClipRect
00006e  4606              MOV      r6,r0
;;;86             if (pOldClipRect) {
000070  b13e              CBZ      r6,|L1.130|
;;;87               GUI__IntersectRects(&rClip, pRect, pOldClipRect);
000072  4632              MOV      r2,r6
000074  4621              MOV      r1,r4
000076  a802              ADD      r0,sp,#8
000078  f7fffffe          BL       GUI__IntersectRects
;;;88               WM_SetUserClipRect(&rClip);
00007c  a802              ADD      r0,sp,#8
00007e  f7fffffe          BL       WM_SetUserClipRect
                  |L1.130|
;;;89             }
;;;90           #else
;;;91             Rect_Old = GUI_Context.ClipRect;
;;;92             GUI__IntersectRects(&rClip, pRect, &Rect_Old);
;;;93             LCD_SetClipRectEx(&rClip);
;;;94           #endif
;;;95         }
;;;96         pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       _SetRotation
000088  4682              MOV      r10,r0
;;;97         pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
00008a  4668              MOV      r0,sp
00008c  6869              LDR      r1,[r5,#4]
00008e  4788              BLX      r1
;;;98         GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
000090  464b              MOV      r3,r9
000092  4642              MOV      r2,r8
000094  4669              MOV      r1,sp
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       GUI__DispStringInRect
;;;99         /* Restore old clipping rectangle */
;;;100        #if (GUI_WINSUPPORT)
;;;101          WM_SetUserClipRect(pOldClipRect);
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       WM_SetUserClipRect
;;;102        #else
;;;103          LCD_SetClipRectEx(&Rect_Old);
;;;104        #endif
;;;105        _SetRotation(pLCD_ApiOld);
0000a2  4650              MOV      r0,r10
0000a4  f7fffffe          BL       _SetRotation
;;;106        GUI_UNLOCK();
0000a8  f7fffffe          BL       GUI_Unlock
;;;107      }
0000ac  bf00              NOP      
                  |L1.174|
;;;108    }
0000ae  e8bd87ff          POP      {r0-r10,pc}
;;;109    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      GUI_pLCD_APIList
                  |L1.184|
                          DCD      GUI_Context
                  |L1.188|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=1

                  GUI_RectDispString
                          %        8
