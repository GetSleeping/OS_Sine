; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\multiedit.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\multiedit.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\multiedit.crf ..\Ucgui\GUI\Widget\MULTIEDIT.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _InvalidateNumChars PROC
;;;162    */
;;;163    static void _InvalidateNumChars(MULTIEDIT_OBJ * pObj) {
000000  f8901075          LDRB     r1,[r0,#0x75]
;;;164      pObj->InvalidFlags |= INVALID_NUMCHARS;
000004  f0410101          ORR      r1,r1,#1
000008  f8801075          STRB     r1,[r0,#0x75]
;;;165    }
00000c  4770              BX       lr
;;;166    
                          ENDP

                  _GetNumChars PROC
;;;172    */
;;;173    static int _GetNumChars(MULTIEDIT_OBJ * pObj) {
00000e  b570              PUSH     {r4-r6,lr}
000010  4604              MOV      r4,r0
;;;174      if (pObj->InvalidFlags & INVALID_NUMCHARS) {
000012  f8940075          LDRB     r0,[r4,#0x75]
000016  f0100f01          TST      r0,#1
00001a  d00f              BEQ      |L1.60|
;;;175        char * pText;
;;;176        pText = (char*) GUI_ALLOC_h2p(pObj->hText);
00001c  f9b40038          LDRSH    r0,[r4,#0x38]
000020  f7fffffe          BL       GUI_ALLOC_h2p
000024  4605              MOV      r5,r0
;;;177        pObj->NumChars = GUI__GetNumChars(pText);
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GUI__GetNumChars
00002c  87a0              STRH     r0,[r4,#0x3c]
;;;178        pObj->InvalidFlags &= ~INVALID_NUMCHARS;
00002e  f8940075          LDRB     r0,[r4,#0x75]
000032  f0200001          BIC      r0,r0,#1
000036  f8840075          STRB     r0,[r4,#0x75]
;;;179      }
00003a  bf00              NOP      
                  |L1.60|
;;;180      return pObj->NumChars;
00003c  8fa0              LDRH     r0,[r4,#0x3c]
;;;181    }
00003e  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  _GetXSize PROC
;;;188    */
;;;189    static int _GetXSize(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj) {
000040  b57c              PUSH     {r2-r6,lr}
000042  4605              MOV      r5,r0
000044  460c              MOV      r4,r1
;;;190      GUI_RECT Rect;
;;;191      WM_GetInsideRectExScrollbar(hObj, &Rect);
000046  4669              MOV      r1,sp
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;192      return Rect.x1 - Rect.x0 - (pObj->HBorder * 2) - 1;
00004e  f9bd0004          LDRSH    r0,[sp,#4]
000052  f9bd1000          LDRSH    r1,[sp,#0]
000056  1a41              SUBS     r1,r0,r1
000058  f8940077          LDRB     r0,[r4,#0x77]
00005c  eba10040          SUB      r0,r1,r0,LSL #1
000060  1e40              SUBS     r0,r0,#1
;;;193    }
000062  bd7c              POP      {r2-r6,pc}
;;;194    
                          ENDP

                  _GetNumCharsInPrompt PROC
;;;198    */
;;;199    static int _GetNumCharsInPrompt(const MULTIEDIT_OBJ* pObj, const char GUI_UNI_PTR * pText) {
000064  e92d41f0          PUSH     {r4-r8,lr}
000068  4605              MOV      r5,r0
00006a  460c              MOV      r4,r1
;;;200      char *pString, *pEndPrompt;
;;;201      int r = 0;
00006c  f04f0800          MOV      r8,#0
;;;202      pString = (char*) GUI_ALLOC_h2p(pObj->hText);
000070  f9b50038          LDRSH    r0,[r5,#0x38]
000074  f7fffffe          BL       GUI_ALLOC_h2p
000078  4606              MOV      r6,r0
;;;203      pEndPrompt = pString + GUI_UC__NumChars2NumBytes(pString, pObj->NumCharsPrompt);
00007a  8fe9              LDRH     r1,[r5,#0x3e]
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000082  1987              ADDS     r7,r0,r6
;;;204      if (pText < pEndPrompt) {
000084  42bc              CMP      r4,r7
000086  d204              BCS      |L1.146|
;;;205        r = GUI_UC__NumBytes2NumChars(pText, pEndPrompt - pText);
000088  1b39              SUBS     r1,r7,r4
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       GUI_UC__NumBytes2NumChars
000090  4680              MOV      r8,r0
                  |L1.146|
;;;206      }
;;;207      return r;
000092  4640              MOV      r0,r8
;;;208    }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;209    
                          ENDP

                  _NumChars2XSize PROC
;;;213    */
;;;214    static int _NumChars2XSize(const char GUI_UNI_PTR * pText, int NumChars) {
000098  b573              PUSH     {r0,r1,r4-r6,lr}
00009a  460c              MOV      r4,r1
;;;215      int xSize = 0;
00009c  2500              MOVS     r5,#0
;;;216      U16 Char;
;;;217      while (NumChars--) {
00009e  e007              B        |L1.176|
                  |L1.160|
;;;218        Char   = GUI_UC__GetCharCodeInc(&pText);
0000a0  4668              MOV      r0,sp
0000a2  f7fffffe          BL       GUI_UC__GetCharCodeInc
0000a6  4606              MOV      r6,r0
;;;219        xSize += GUI_GetCharDistX(Char);
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       GUI_GetCharDistX
0000ae  4405              ADD      r5,r5,r0
                  |L1.176|
0000b0  0020              MOVS     r0,r4                 ;217
0000b2  f1a40401          SUB      r4,r4,#1              ;217
0000b6  d1f3              BNE      |L1.160|
;;;220      }
;;;221      return xSize;
0000b8  4628              MOV      r0,r5
;;;222    }
0000ba  bd7c              POP      {r2-r6,pc}
;;;223    
                          ENDP

                  _WrapGetNumCharsDisp PROC
;;;227    */
;;;228    static int _WrapGetNumCharsDisp(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj, const char GUI_UNI_PTR * pText) {
0000bc  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
0000c0  4681              MOV      r9,r0
0000c2  460c              MOV      r4,r1
;;;229      int xSize, r;
;;;230      xSize = _GetXSize(hObj, pObj);
0000c4  4621              MOV      r1,r4
0000c6  4648              MOV      r0,r9
0000c8  f7fffffe          BL       _GetXSize
0000cc  4680              MOV      r8,r0
;;;231      if (pObj->Flags & MULTIEDIT_SF_PASSWORD) {
0000ce  f8940074          LDRB     r0,[r4,#0x74]
0000d2  f0100f20          TST      r0,#0x20
0000d6  d036              BEQ      |L1.326|
;;;232        int NumCharsPrompt;
;;;233        NumCharsPrompt = _GetNumCharsInPrompt(pObj, pText);
0000d8  4620              MOV      r0,r4
0000da  9902              LDR      r1,[sp,#8]
0000dc  f7fffffe          BL       _GetNumCharsInPrompt
0000e0  4606              MOV      r6,r0
;;;234        r = GUI__WrapGetNumCharsDisp(pText, xSize, pObj->WrapMode);
0000e2  f8942078          LDRB     r2,[r4,#0x78]
0000e6  4641              MOV      r1,r8
0000e8  9802              LDR      r0,[sp,#8]
0000ea  f7fffffe          BL       GUI__WrapGetNumCharsDisp
0000ee  4605              MOV      r5,r0
;;;235        if (r >= NumCharsPrompt) {
0000f0  42b5              CMP      r5,r6
0000f2  db27              BLT      |L1.324|
;;;236          int x;
;;;237          switch (pObj->WrapMode) {
0000f4  f8940078          LDRB     r0,[r4,#0x78]
0000f8  b920              CBNZ     r0,|L1.260|
;;;238          case GUI_WRAPMODE_NONE:
;;;239            r = GUI__GetNumChars(pText);
0000fa  9802              LDR      r0,[sp,#8]
0000fc  f7fffffe          BL       GUI__GetNumChars
000100  4605              MOV      r5,r0
;;;240            break;
000102  e01d              B        |L1.320|
                  |L1.260|
;;;241          default:
;;;242            r = NumCharsPrompt;
000104  4635              MOV      r5,r6
;;;243            x = _NumChars2XSize(pText, NumCharsPrompt);
000106  4631              MOV      r1,r6
000108  9802              LDR      r0,[sp,#8]
00010a  f7fffffe          BL       _NumChars2XSize
00010e  4607              MOV      r7,r0
;;;244            pText += GUI_UC__NumChars2NumBytes(pText, NumCharsPrompt);
000110  4631              MOV      r1,r6
000112  9802              LDR      r0,[sp,#8]
000114  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000118  9902              LDR      r1,[sp,#8]
00011a  4408              ADD      r0,r0,r1
00011c  9002              STR      r0,[sp,#8]
;;;245            while (GUI_UC__GetCharCodeInc(&pText) != 0) {
00011e  e008              B        |L1.306|
                  |L1.288|
;;;246              x += GUI_GetCharDistX(MULTIEDIT_PASSWORD_CHAR);
000120  202a              MOVS     r0,#0x2a
000122  f7fffffe          BL       GUI_GetCharDistX
000126  4407              ADD      r7,r7,r0
;;;247              if (r && (x > xSize)) {
000128  b115              CBZ      r5,|L1.304|
00012a  4547              CMP      r7,r8
00012c  dd00              BLE      |L1.304|
;;;248                break;
00012e  e005              B        |L1.316|
                  |L1.304|
;;;249              }
;;;250              r++;
000130  1c6d              ADDS     r5,r5,#1
                  |L1.306|
000132  a802              ADD      r0,sp,#8              ;245
000134  f7fffffe          BL       GUI_UC__GetCharCodeInc
000138  2800              CMP      r0,#0                 ;245
00013a  d1f1              BNE      |L1.288|
                  |L1.316|
00013c  bf00              NOP                            ;248
;;;251            }
;;;252            break;
00013e  bf00              NOP      
                  |L1.320|
000140  bf00              NOP                            ;240
;;;253          }
;;;254        }
000142  bf00              NOP      
                  |L1.324|
;;;255      } else {
000144  e006              B        |L1.340|
                  |L1.326|
;;;256        r = GUI__WrapGetNumCharsDisp(pText, xSize, pObj->WrapMode);
000146  f8942078          LDRB     r2,[r4,#0x78]
00014a  4641              MOV      r1,r8
00014c  9802              LDR      r0,[sp,#8]
00014e  f7fffffe          BL       GUI__WrapGetNumCharsDisp
000152  4605              MOV      r5,r0
                  |L1.340|
;;;257      }
;;;258      return r;
000154  4628              MOV      r0,r5
;;;259    }
000156  e8bd83fe          POP      {r1-r9,pc}
;;;260    
                          ENDP

                  _WrapGetNumBytesToNextLine PROC
;;;264    */
;;;265    static int _WrapGetNumBytesToNextLine(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj, const char* pText) {
00015a  e92d47f0          PUSH     {r4-r10,lr}
00015e  4680              MOV      r8,r0
000160  460d              MOV      r5,r1
000162  4616              MOV      r6,r2
;;;266      int xSize, r;
;;;267      xSize = _GetXSize(hObj, pObj);
000164  4629              MOV      r1,r5
000166  4640              MOV      r0,r8
000168  f7fffffe          BL       _GetXSize
00016c  4681              MOV      r9,r0
;;;268      if (pObj->Flags & MULTIEDIT_SF_PASSWORD) {
00016e  f8950074          LDRB     r0,[r5,#0x74]
000172  f0100f20          TST      r0,#0x20
000176  d016              BEQ      |L1.422|
;;;269        int NumChars, NumCharsPrompt;
;;;270        NumCharsPrompt = _GetNumCharsInPrompt(pObj, pText);
000178  4631              MOV      r1,r6
00017a  4628              MOV      r0,r5
00017c  f7fffffe          BL       _GetNumCharsInPrompt
000180  4682              MOV      r10,r0
;;;271        NumChars = _WrapGetNumCharsDisp(hObj, pObj, pText);
000182  4632              MOV      r2,r6
000184  4629              MOV      r1,r5
000186  4640              MOV      r0,r8
000188  f7fffffe          BL       _WrapGetNumCharsDisp
00018c  4607              MOV      r7,r0
;;;272        r        = GUI_UC__NumChars2NumBytes(pText, NumChars);
00018e  4639              MOV      r1,r7
000190  4630              MOV      r0,r6
000192  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000196  4604              MOV      r4,r0
;;;273        if (NumChars < NumCharsPrompt) {
000198  4557              CMP      r7,r10
00019a  da03              BGE      |L1.420|
;;;274          if (*(pText + r) == '\n') {
00019c  5d30              LDRB     r0,[r6,r4]
00019e  280a              CMP      r0,#0xa
0001a0  d100              BNE      |L1.420|
;;;275            r++;
0001a2  1c64              ADDS     r4,r4,#1
                  |L1.420|
;;;276          }
;;;277        }
;;;278      } else {
0001a4  e006              B        |L1.436|
                  |L1.422|
;;;279        r = GUI__WrapGetNumBytesToNextLine(pText, xSize, pObj->WrapMode);
0001a6  f8952078          LDRB     r2,[r5,#0x78]
0001aa  4649              MOV      r1,r9
0001ac  4630              MOV      r0,r6
0001ae  f7fffffe          BL       GUI__WrapGetNumBytesToNextLine
0001b2  4604              MOV      r4,r0
                  |L1.436|
;;;280      }
;;;281      return r;
0001b4  4620              MOV      r0,r4
;;;282    }
0001b6  e8bd87f0          POP      {r4-r10,pc}
;;;283    
                          ENDP

                  _GetCharDistX PROC
;;;287    */
;;;288    static int _GetCharDistX(const MULTIEDIT_OBJ* pObj, const char* pText) {
0001ba  e92d41f0          PUSH     {r4-r8,lr}
0001be  4604              MOV      r4,r0
0001c0  460d              MOV      r5,r1
;;;289      int r;
;;;290      if ((pObj->Flags & MULTIEDIT_SF_PASSWORD) && (_GetNumCharsInPrompt(pObj, pText) == 0)) {
0001c2  f8940074          LDRB     r0,[r4,#0x74]
0001c6  f0100f20          TST      r0,#0x20
0001ca  d009              BEQ      |L1.480|
0001cc  4629              MOV      r1,r5
0001ce  4620              MOV      r0,r4
0001d0  f7fffffe          BL       _GetNumCharsInPrompt
0001d4  b920              CBNZ     r0,|L1.480|
;;;291        r = GUI_GetCharDistX(MULTIEDIT_PASSWORD_CHAR);
0001d6  202a              MOVS     r0,#0x2a
0001d8  f7fffffe          BL       GUI_GetCharDistX
0001dc  4606              MOV      r6,r0
0001de  e008              B        |L1.498|
                  |L1.480|
;;;292      } else {
;;;293        U16 c;
;;;294        c = GUI_UC_GetCharCode(pText);
0001e0  4628              MOV      r0,r5
0001e2  f7fffffe          BL       GUI_UC_GetCharCode
0001e6  4607              MOV      r7,r0
;;;295        r = GUI_GetCharDistX(c);
0001e8  4638              MOV      r0,r7
0001ea  f7fffffe          BL       GUI_GetCharDistX
0001ee  4606              MOV      r6,r0
;;;296      }
0001f0  bf00              NOP      
                  |L1.498|
;;;297      return r;
0001f2  4630              MOV      r0,r6
;;;298    }
0001f4  e8bd81f0          POP      {r4-r8,pc}
;;;299    
                          ENDP

                  _DispString PROC
;;;303    */
;;;304    static void _DispString(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj, const char* pText, GUI_RECT* pRect) {
0001f8  e92d5ff0          PUSH     {r4-r12,lr}
0001fc  4683              MOV      r11,r0
0001fe  460f              MOV      r7,r1
000200  4690              MOV      r8,r2
000202  461c              MOV      r4,r3
;;;305      int NumCharsDisp;
;;;306      NumCharsDisp = _WrapGetNumCharsDisp(hObj, pObj, pText);
000204  4642              MOV      r2,r8
000206  4639              MOV      r1,r7
000208  4658              MOV      r0,r11
00020a  f7fffffe          BL       _WrapGetNumCharsDisp
00020e  4605              MOV      r5,r0
;;;307      if (pObj->Flags & MULTIEDIT_SF_PASSWORD) {
000210  f8970074          LDRB     r0,[r7,#0x74]
000214  f0100f20          TST      r0,#0x20
000218  d02a              BEQ      |L1.624|
;;;308        int x, NumCharsPrompt, NumCharsLeft = 0;
00021a  f04f0a00          MOV      r10,#0
;;;309        NumCharsPrompt = _GetNumCharsInPrompt(pObj, pText);
00021e  4641              MOV      r1,r8
000220  4638              MOV      r0,r7
000222  f7fffffe          BL       _GetNumCharsInPrompt
000226  4606              MOV      r6,r0
;;;310        if (NumCharsDisp < NumCharsPrompt) {
000228  42b5              CMP      r5,r6
00022a  da01              BGE      |L1.560|
;;;311          NumCharsPrompt = NumCharsDisp;
00022c  462e              MOV      r6,r5
00022e  e001              B        |L1.564|
                  |L1.560|
;;;312        } else {
;;;313          NumCharsLeft = NumCharsDisp - NumCharsPrompt;
000230  eba50a06          SUB      r10,r5,r6
                  |L1.564|
;;;314        }
;;;315        GUI_DispStringInRectMax(pText, pRect, GUI_TA_LEFT, NumCharsPrompt);
000234  4633              MOV      r3,r6
000236  2200              MOVS     r2,#0
000238  4621              MOV      r1,r4
00023a  4640              MOV      r0,r8
00023c  f7fffffe          BL       GUI_DispStringInRectMax
;;;316        x = pRect->x0 + _NumChars2XSize(pText, NumCharsPrompt);
000240  4631              MOV      r1,r6
000242  4640              MOV      r0,r8
000244  f7fffffe          BL       _NumChars2XSize
000248  f9b41000          LDRSH    r1,[r4,#0]
00024c  eb000901          ADD      r9,r0,r1
;;;317        if (NumCharsLeft) {
000250  f1ba0f00          CMP      r10,#0
000254  d00b              BEQ      |L1.622|
;;;318          GUI_DispCharAt(MULTIEDIT_PASSWORD_CHAR, x, pRect->y0);
000256  f9b42002          LDRSH    r2,[r4,#2]
00025a  fa0ff189          SXTH     r1,r9
00025e  202a              MOVS     r0,#0x2a
000260  f7fffffe          BL       GUI_DispCharAt
;;;319          GUI_DispChars(MULTIEDIT_PASSWORD_CHAR, NumCharsLeft - 1);
000264  f1aa0101          SUB      r1,r10,#1
000268  202a              MOVS     r0,#0x2a
00026a  f7fffffe          BL       GUI_DispChars
                  |L1.622|
;;;320        }
;;;321      } else {
00026e  e005              B        |L1.636|
                  |L1.624|
;;;322        GUI_DispStringInRectMax(pText, pRect, GUI_TA_LEFT, NumCharsDisp);
000270  462b              MOV      r3,r5
000272  2200              MOVS     r2,#0
000274  4621              MOV      r1,r4
000276  4640              MOV      r0,r8
000278  f7fffffe          BL       GUI_DispStringInRectMax
                  |L1.636|
;;;323      }  
;;;324    }
00027c  e8bd9ff0          POP      {r4-r12,pc}
;;;325    
                          ENDP

                  _GetpLine PROC
;;;338    */
;;;339    static char * _GetpLine(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, unsigned LineNumber) {
000280  e92d41f0          PUSH     {r4-r8,lr}
000284  4680              MOV      r8,r0
000286  460c              MOV      r4,r1
000288  4615              MOV      r5,r2
;;;340      char * pText, * pLine;
;;;341      pText = (char*) GUI_ALLOC_h2p(pObj->hText);
00028a  f9b40038          LDRSH    r0,[r4,#0x38]
00028e  f7fffffe          BL       GUI_ALLOC_h2p
000292  4607              MOV      r7,r0
;;;342      if ((unsigned)pObj->CacheLineNumber != LineNumber) {
000294  f8b40052          LDRH     r0,[r4,#0x52]
000298  42a8              CMP      r0,r5
00029a  d020              BEQ      |L1.734|
;;;343        if (LineNumber > (unsigned)pObj->CacheLineNumber) {
00029c  f8b40052          LDRH     r0,[r4,#0x52]
0002a0  42a8              CMP      r0,r5
0002a2  d20b              BCS      |L1.700|
;;;344          /* If new line number > cache we can start with old pointer */
;;;345          int OldNumber = pObj->CacheLineNumber;
0002a4  f1040450          ADD      r4,r4,#0x50
0002a8  8860              LDRH     r0,[r4,#2]
;;;346          pLine = pText + pObj->CacheLinePosByte;
0002aa  8821              LDRH     r1,[r4,#0]
0002ac  eb010607          ADD      r6,r1,r7
;;;347          pObj->CacheLineNumber  = LineNumber;
0002b0  8065              STRH     r5,[r4,#2]
0002b2  f1a40450          SUB      r4,r4,#0x50
;;;348          LineNumber -= OldNumber;
0002b6  eba50500          SUB      r5,r5,r0
;;;349        } else {
0002ba  e002              B        |L1.706|
                  |L1.700|
;;;350          /* If new line number < cache we need to start with first byte */
;;;351          pLine = pText;
0002bc  463e              MOV      r6,r7
;;;352          pObj->CacheLineNumber  = LineNumber;
0002be  f8a45052          STRH     r5,[r4,#0x52]
                  |L1.706|
;;;353        }
;;;354        while (LineNumber--) {
0002c2  e005              B        |L1.720|
                  |L1.708|
;;;355          pLine += _WrapGetNumBytesToNextLine(hObj, pObj, pLine);
0002c4  4632              MOV      r2,r6
0002c6  4621              MOV      r1,r4
0002c8  4640              MOV      r0,r8
0002ca  f7fffffe          BL       _WrapGetNumBytesToNextLine
0002ce  4406              ADD      r6,r6,r0
                  |L1.720|
0002d0  0028              MOVS     r0,r5                 ;354
0002d2  f1a50501          SUB      r5,r5,#1              ;354
0002d6  d1f5              BNE      |L1.708|
;;;356        }
;;;357        pObj->CacheLinePosByte = pLine - pText;
0002d8  1bf0              SUBS     r0,r6,r7
0002da  f8a40050          STRH     r0,[r4,#0x50]
                  |L1.734|
;;;358      }
;;;359      return pText + pObj->CacheLinePosByte;
0002de  f8b40050          LDRH     r0,[r4,#0x50]
0002e2  4438              ADD      r0,r0,r7
;;;360    }
0002e4  e8bd81f0          POP      {r4-r8,pc}
;;;361    
                          ENDP

                  _ClearCache PROC
;;;368    */
;;;369    static void _ClearCache(MULTIEDIT_OBJ* pObj) {
0002e8  2100              MOVS     r1,#0
;;;370      pObj->CacheLineNumber = 0;
0002ea  f1000050          ADD      r0,r0,#0x50
0002ee  8041              STRH     r1,[r0,#2]
;;;371      pObj->CacheLinePosByte = 0;
0002f0  8001              STRH     r1,[r0,#0]
;;;372      pObj->CacheFirstVisibleByte = 0;
0002f2  80c1              STRH     r1,[r0,#6]
;;;373      pObj->CacheFirstVisibleLine = 0;
0002f4  8081              STRH     r1,[r0,#4]
0002f6  f1a00050          SUB      r0,r0,#0x50
;;;374    }
0002fa  4770              BX       lr
;;;375    
                          ENDP

                  _GetCursorLine PROC
;;;381    */
;;;382    static int _GetCursorLine(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj, const char* pText, int CursorPosChar) {
0002fc  e92d4ff8          PUSH     {r3-r11,lr}
000300  4683              MOV      r11,r0
000302  460d              MOV      r5,r1
000304  4614              MOV      r4,r2
000306  4699              MOV      r9,r3
;;;383      const char *pCursor;
;;;384      const char *pEndLine;
;;;385      int NumChars, ByteOffsetNewCursor, LineNumber = 0;
000308  2700              MOVS     r7,#0
;;;386      ByteOffsetNewCursor = GUI_UC__NumChars2NumBytes(pText, CursorPosChar);
00030a  4649              MOV      r1,r9
00030c  4620              MOV      r0,r4
00030e  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000312  4682              MOV      r10,r0
;;;387      pCursor = pText + ByteOffsetNewCursor;
000314  eb04080a          ADD      r8,r4,r10
;;;388      if (pObj->CacheLinePosByte < ByteOffsetNewCursor) {
000318  f8b50050          LDRH     r0,[r5,#0x50]
00031c  4550              CMP      r0,r10
00031e  da05              BGE      |L1.812|
;;;389        /* If cache pos < new position we can use it as start position */
;;;390        pText      += pObj->CacheLinePosByte;
000320  f8b50050          LDRH     r0,[r5,#0x50]
000324  4404              ADD      r4,r4,r0
;;;391        LineNumber += pObj->CacheLineNumber;
000326  f8b50052          LDRH     r0,[r5,#0x52]
00032a  4407              ADD      r7,r7,r0
                  |L1.812|
;;;392      }
;;;393      while (*pText && (pCursor > pText)) {
00032c  e01b              B        |L1.870|
                  |L1.814|
;;;394        NumChars = _WrapGetNumCharsDisp(hObj, pObj, pText);
00032e  4622              MOV      r2,r4
000330  4629              MOV      r1,r5
000332  4658              MOV      r0,r11
000334  f7fffffe          BL       _WrapGetNumCharsDisp
000338  9000              STR      r0,[sp,#0]
;;;395        pEndLine = pText + GUI_UC__NumChars2NumBytes(pText, NumChars);
00033a  4620              MOV      r0,r4
00033c  9900              LDR      r1,[sp,#0]
00033e  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000342  1906              ADDS     r6,r0,r4
;;;396        pText   += _WrapGetNumBytesToNextLine(hObj, pObj, pText);
000344  4622              MOV      r2,r4
000346  4629              MOV      r1,r5
000348  4658              MOV      r0,r11
00034a  f7fffffe          BL       _WrapGetNumBytesToNextLine
00034e  4404              ADD      r4,r4,r0
;;;397        if (pCursor <= pEndLine) {
000350  45b0              CMP      r8,r6
000352  d807              BHI      |L1.868|
;;;398          if ((pCursor == pEndLine) && (pEndLine == pText) && *pText) {
000354  45b0              CMP      r8,r6
000356  d104              BNE      |L1.866|
000358  42a6              CMP      r6,r4
00035a  d102              BNE      |L1.866|
00035c  7820              LDRB     r0,[r4,#0]
00035e  b100              CBZ      r0,|L1.866|
;;;399            LineNumber++;
000360  1c7f              ADDS     r7,r7,#1
                  |L1.866|
;;;400          }
;;;401          break;
000362  e004              B        |L1.878|
                  |L1.868|
;;;402        }
;;;403        LineNumber++;
000364  1c7f              ADDS     r7,r7,#1
                  |L1.870|
000366  7820              LDRB     r0,[r4,#0]            ;393
000368  b108              CBZ      r0,|L1.878|
00036a  45a0              CMP      r8,r4                 ;393
00036c  d8df              BHI      |L1.814|
                  |L1.878|
00036e  bf00              NOP                            ;401
;;;404      }
;;;405      return LineNumber;
000370  4638              MOV      r0,r7
;;;406    }
000372  e8bd8ff8          POP      {r3-r11,pc}
;;;407    
                          ENDP

                  _GetCursorXY PROC
;;;411    */
;;;412    static void _GetCursorXY(MULTIEDIT_HANDLE hObj, /*const*/ MULTIEDIT_OBJ* pObj, int* px, int* py) {
000376  e92d5ff0          PUSH     {r4-r12,lr}
00037a  4682              MOV      r10,r0
00037c  460c              MOV      r4,r1
00037e  4616              MOV      r6,r2
000380  461f              MOV      r7,r3
;;;413      if (pObj->InvalidFlags & INVALID_CURSORXY) {
000382  f8940075          LDRB     r0,[r4,#0x75]
000386  f0100f08          TST      r0,#8
00038a  d034              BEQ      |L1.1014|
;;;414        int CursorLine = 0, x = 0;
00038c  f04f0800          MOV      r8,#0
000390  46c1              MOV      r9,r8
;;;415        GUI_SetFont(pObj->pFont);
000392  6f20              LDR      r0,[r4,#0x70]
000394  f7fffffe          BL       GUI_SetFont
;;;416        if (pObj->hText) {
000398  8f20              LDRH     r0,[r4,#0x38]
00039a  b1e8              CBZ      r0,|L1.984|
;;;417          const char *pLine;
;;;418          const char *pCursor;
;;;419          pLine      = (const char *)GUI_ALLOC_h2p(pObj->hText);
00039c  f9b40038          LDRSH    r0,[r4,#0x38]
0003a0  f7fffffe          BL       GUI_ALLOC_h2p
0003a4  4605              MOV      r5,r0
;;;420          pCursor    = pLine + pObj->CursorPosByte;
0003a6  f8b4004a          LDRH     r0,[r4,#0x4a]
0003aa  eb000b05          ADD      r11,r0,r5
;;;421          CursorLine = pObj->CursorLine;
0003ae  f8b48046          LDRH     r8,[r4,#0x46]
;;;422          pLine      = _GetpLine(hObj, pObj, CursorLine);
0003b2  4642              MOV      r2,r8
0003b4  4621              MOV      r1,r4
0003b6  4650              MOV      r0,r10
0003b8  f7fffffe          BL       _GetpLine
0003bc  4605              MOV      r5,r0
;;;423          while (pLine < pCursor) {
0003be  e008              B        |L1.978|
                  |L1.960|
;;;424            x     += _GetCharDistX(pObj, pLine);
0003c0  4629              MOV      r1,r5
0003c2  4620              MOV      r0,r4
0003c4  f7fffffe          BL       _GetCharDistX
0003c8  4481              ADD      r9,r9,r0
;;;425            pLine += GUI_UC_GetCharSize(pLine);
0003ca  4628              MOV      r0,r5
0003cc  f7fffffe          BL       GUI_UC_GetCharSize
0003d0  4405              ADD      r5,r5,r0
                  |L1.978|
0003d2  455d              CMP      r5,r11                ;423
0003d4  d3f4              BCC      |L1.960|
;;;426          }
;;;427        }
0003d6  bf00              NOP      
                  |L1.984|
;;;428        pObj->CursorPosX = x;
0003d8  f8a4904c          STRH     r9,[r4,#0x4c]
;;;429        pObj->CursorPosY = CursorLine * GUI_GetFontDistY();
0003dc  f7fffffe          BL       GUI_GetFontDistY
0003e0  fb00f008          MUL      r0,r0,r8
0003e4  f8a4004e          STRH     r0,[r4,#0x4e]
;;;430        pObj->InvalidFlags &= ~INVALID_CURSORXY;
0003e8  f8940075          LDRB     r0,[r4,#0x75]
0003ec  f0200008          BIC      r0,r0,#8
0003f0  f8840075          STRB     r0,[r4,#0x75]
;;;431      }
0003f4  bf00              NOP      
                  |L1.1014|
;;;432      *px = pObj->CursorPosX;
0003f6  f8b4004c          LDRH     r0,[r4,#0x4c]
0003fa  6030              STR      r0,[r6,#0]
;;;433      *py = pObj->CursorPosY;
0003fc  f8b4004e          LDRH     r0,[r4,#0x4e]
000400  6038              STR      r0,[r7,#0]
;;;434    }
000402  e8bd9ff0          POP      {r4-r12,pc}
;;;435    
                          ENDP

                  _InvalidateCursorXY PROC
;;;439    */
;;;440    static void _InvalidateCursorXY(MULTIEDIT_OBJ * pObj) {
000406  f8901075          LDRB     r1,[r0,#0x75]
;;;441      pObj->InvalidFlags |= INVALID_CURSORXY;
00040a  f0410108          ORR      r1,r1,#8
00040e  f8801075          STRB     r1,[r0,#0x75]
;;;442    }
000412  4770              BX       lr
;;;443    
                          ENDP

                  _SetScrollState PROC
;;;447    */
;;;448    static void _SetScrollState(WM_HWIN hObj) {
000414  b570              PUSH     {r4-r6,lr}
000416  4605              MOV      r5,r0
;;;449      MULTIEDIT_OBJ* pObj = MULTIEDIT_H2P(hObj);
000418  4628              MOV      r0,r5
00041a  f7fffffe          BL       GUI_ALLOC_h2p
00041e  4604              MOV      r4,r0
;;;450      WIDGET__SetScrollState(hObj, &pObj->ScrollStateV, &pObj->ScrollStateH);
000420  f1040264          ADD      r2,r4,#0x64
000424  f1040158          ADD      r1,r4,#0x58
000428  4628              MOV      r0,r5
00042a  f7fffffe          BL       WIDGET__SetScrollState
;;;451    }
00042e  bd70              POP      {r4-r6,pc}
;;;452    
                          ENDP

                  _CalcScrollPos PROC
;;;462    */
;;;463    static void _CalcScrollPos(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000430  b57c              PUSH     {r2-r6,lr}
000432  4605              MOV      r5,r0
000434  460c              MOV      r4,r1
;;;464      int xCursor, yCursor;
;;;465      _GetCursorXY(hObj, pObj, &xCursor, &yCursor);
000436  466b              MOV      r3,sp
000438  aa01              ADD      r2,sp,#4
00043a  4621              MOV      r1,r4
00043c  4628              MOV      r0,r5
00043e  f7fffffe          BL       _GetCursorXY
;;;466      yCursor /= GUI_GetYDistOfFont(pObj->pFont);
000442  6f20              LDR      r0,[r4,#0x70]
000444  f7fffffe          BL       GUI_GetYDistOfFont
000448  9900              LDR      r1,[sp,#0]
00044a  fb91f0f0          SDIV     r0,r1,r0
00044e  9000              STR      r0,[sp,#0]
;;;467      WM_CheckScrollPos(&pObj->ScrollStateV, yCursor, 0, 0);       /* Vertical */
000450  2300              MOVS     r3,#0
000452  461a              MOV      r2,r3
000454  f1040058          ADD      r0,r4,#0x58
000458  9900              LDR      r1,[sp,#0]
00045a  f7fffffe          BL       WM_CheckScrollPos
;;;468      WM_CheckScrollPos(&pObj->ScrollStateH, xCursor, 30, 30);     /* Horizontal */
00045e  231e              MOVS     r3,#0x1e
000460  461a              MOV      r2,r3
000462  f1040064          ADD      r0,r4,#0x64
000466  9901              LDR      r1,[sp,#4]
000468  f7fffffe          BL       WM_CheckScrollPos
;;;469      _SetScrollState(hObj);
00046c  4628              MOV      r0,r5
00046e  f7fffffe          BL       _SetScrollState
;;;470    }
000472  bd7c              POP      {r2-r6,pc}
;;;471    
                          ENDP

                  _GetTextSizeX PROC
;;;477    */
;;;478    static int _GetTextSizeX(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000474  e92d47f0          PUSH     {r4-r10,lr}
000478  4680              MOV      r8,r0
00047a  460c              MOV      r4,r1
;;;479      if (pObj->InvalidFlags & INVALID_TEXTSIZE) {
00047c  f8940075          LDRB     r0,[r4,#0x75]
000480  f0100f04          TST      r0,#4
000484  d03a              BEQ      |L1.1276|
;;;480        pObj->TextSizeX = 0;
000486  2000              MOVS     r0,#0
000488  f8a40042          STRH     r0,[r4,#0x42]
;;;481        if (pObj->hText) {
00048c  8f20              LDRH     r0,[r4,#0x38]
00048e  b378              CBZ      r0,|L1.1264|
;;;482          int NumChars, xSizeLine;
;;;483          char *pText, *pLine;
;;;484          GUI_SetFont(pObj->pFont);
000490  6f20              LDR      r0,[r4,#0x70]
000492  f7fffffe          BL       GUI_SetFont
;;;485          pText = (char*) GUI_ALLOC_h2p(pObj->hText);
000496  f9b40038          LDRSH    r0,[r4,#0x38]
00049a  f7fffffe          BL       GUI_ALLOC_h2p
00049e  4605              MOV      r5,r0
;;;486          do {
0004a0  bf00              NOP      
                  |L1.1186|
;;;487            NumChars = _WrapGetNumCharsDisp(hObj, pObj, pText);
0004a2  462a              MOV      r2,r5
0004a4  4621              MOV      r1,r4
0004a6  4640              MOV      r0,r8
0004a8  f7fffffe          BL       _WrapGetNumCharsDisp
0004ac  4681              MOV      r9,r0
;;;488            xSizeLine = 0;
0004ae  2600              MOVS     r6,#0
;;;489            pLine = pText;
0004b0  462f              MOV      r7,r5
;;;490            while (NumChars--) {
0004b2  e008              B        |L1.1222|
                  |L1.1204|
;;;491              xSizeLine += _GetCharDistX(pObj, pLine);
0004b4  4639              MOV      r1,r7
0004b6  4620              MOV      r0,r4
0004b8  f7fffffe          BL       _GetCharDistX
0004bc  4406              ADD      r6,r6,r0
;;;492              pLine     += GUI_UC_GetCharSize(pLine);
0004be  4638              MOV      r0,r7
0004c0  f7fffffe          BL       GUI_UC_GetCharSize
0004c4  4407              ADD      r7,r7,r0
                  |L1.1222|
0004c6  ea5f0009          MOVS     r0,r9                 ;490
0004ca  f1a90901          SUB      r9,r9,#1              ;490
0004ce  d1f1              BNE      |L1.1204|
;;;493            }
;;;494            if (xSizeLine > pObj->TextSizeX) {
0004d0  f8b40042          LDRH     r0,[r4,#0x42]
0004d4  42b0              CMP      r0,r6
0004d6  da01              BGE      |L1.1244|
;;;495              pObj->TextSizeX = xSizeLine;
0004d8  f8a46042          STRH     r6,[r4,#0x42]
                  |L1.1244|
;;;496            }
;;;497            pText += _WrapGetNumBytesToNextLine(hObj, pObj, pText);
0004dc  462a              MOV      r2,r5
0004de  4621              MOV      r1,r4
0004e0  4640              MOV      r0,r8
0004e2  f7fffffe          BL       _WrapGetNumBytesToNextLine
0004e6  4405              ADD      r5,r5,r0
;;;498          } while (*pText);
0004e8  7828              LDRB     r0,[r5,#0]
0004ea  2800              CMP      r0,#0
0004ec  d1d9              BNE      |L1.1186|
;;;499        }
0004ee  bf00              NOP      
                  |L1.1264|
;;;500        pObj->InvalidFlags &= ~INVALID_TEXTSIZE;
0004f0  f8940075          LDRB     r0,[r4,#0x75]
0004f4  f0200004          BIC      r0,r0,#4
0004f8  f8840075          STRB     r0,[r4,#0x75]
                  |L1.1276|
;;;501      }
;;;502      return pObj->TextSizeX;
0004fc  f8b40042          LDRH     r0,[r4,#0x42]
;;;503    }
000500  e8bd87f0          POP      {r4-r10,pc}
;;;504    
                          ENDP

                  _GetNumVisLines PROC
;;;508    */
;;;509    static int _GetNumVisLines(MULTIEDIT_HANDLE hObj, const MULTIEDIT_OBJ* pObj) {
000504  b57c              PUSH     {r2-r6,lr}
000506  4605              MOV      r5,r0
000508  460c              MOV      r4,r1
;;;510      GUI_RECT Rect;
;;;511      WM_GetInsideRectExScrollbar(hObj, &Rect);
00050a  4669              MOV      r1,sp
00050c  4628              MOV      r0,r5
00050e  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;512      return (Rect.y1 - Rect.y0 + 1) / GUI_GetYDistOfFont(pObj->pFont);
000512  6f20              LDR      r0,[r4,#0x70]
000514  f7fffffe          BL       GUI_GetYDistOfFont
000518  f9bd1006          LDRSH    r1,[sp,#6]
00051c  f9bd2002          LDRSH    r2,[sp,#2]
000520  1a89              SUBS     r1,r1,r2
000522  1c49              ADDS     r1,r1,#1
000524  fb91f0f0          SDIV     r0,r1,r0
;;;513    }
000528  bd7c              POP      {r2-r6,pc}
;;;514    
                          ENDP

                  _GetNumLines PROC
;;;520    */
;;;521    static int _GetNumLines(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ * pObj) {
00052a  e92d47f0          PUSH     {r4-r10,lr}
00052e  4681              MOV      r9,r0
000530  460c              MOV      r4,r1
;;;522      if (pObj->InvalidFlags & INVALID_NUMLINES) {
000532  f8940075          LDRB     r0,[r4,#0x75]
000536  f0100f02          TST      r0,#2
00053a  d030              BEQ      |L1.1438|
;;;523        int NumLines = 0;
00053c  2700              MOVS     r7,#0
;;;524        if (pObj->hText) {
00053e  8f20              LDRH     r0,[r4,#0x38]
000540  b318              CBZ      r0,|L1.1418|
;;;525          int NumChars, NumBytes;
;;;526          char *pText;
;;;527          U16 Char;
;;;528          pText = (char*) GUI_ALLOC_h2p(pObj->hText);
000542  f9b40038          LDRSH    r0,[r4,#0x38]
000546  f7fffffe          BL       GUI_ALLOC_h2p
00054a  4605              MOV      r5,r0
;;;529          GUI_SetFont(pObj->pFont);
00054c  6f20              LDR      r0,[r4,#0x70]
00054e  f7fffffe          BL       GUI_SetFont
;;;530          do {
000552  bf00              NOP      
                  |L1.1364|
;;;531            NumChars = _WrapGetNumCharsDisp(hObj, pObj, pText);
000554  462a              MOV      r2,r5
000556  4621              MOV      r1,r4
000558  4648              MOV      r0,r9
00055a  f7fffffe          BL       _WrapGetNumCharsDisp
00055e  4682              MOV      r10,r0
;;;532            NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
000560  4651              MOV      r1,r10
000562  4628              MOV      r0,r5
000564  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000568  4680              MOV      r8,r0
;;;533            Char     = GUI_UC_GetCharCode(pText + NumBytes);
00056a  eb050008          ADD      r0,r5,r8
00056e  f7fffffe          BL       GUI_UC_GetCharCode
000572  4606              MOV      r6,r0
;;;534            if (Char) {
000574  b106              CBZ      r6,|L1.1400|
;;;535              NumLines++;
000576  1c7f              ADDS     r7,r7,#1
                  |L1.1400|
;;;536            }
;;;537            pText += _WrapGetNumBytesToNextLine(hObj, pObj, pText);
000578  462a              MOV      r2,r5
00057a  4621              MOV      r1,r4
00057c  4648              MOV      r0,r9
00057e  f7fffffe          BL       _WrapGetNumBytesToNextLine
000582  4405              ADD      r5,r5,r0
;;;538          } while (Char);
000584  2e00              CMP      r6,#0
000586  d1e5              BNE      |L1.1364|
;;;539        }
000588  bf00              NOP      
                  |L1.1418|
;;;540        pObj->NumLines = NumLines + 1;
00058a  1c78              ADDS     r0,r7,#1
00058c  f8a40040          STRH     r0,[r4,#0x40]
;;;541        pObj->InvalidFlags &= ~INVALID_NUMLINES;
000590  f8940075          LDRB     r0,[r4,#0x75]
000594  f0200002          BIC      r0,r0,#2
000598  f8840075          STRB     r0,[r4,#0x75]
;;;542      }
00059c  bf00              NOP      
                  |L1.1438|
;;;543      return pObj->NumLines;
00059e  f8b40040          LDRH     r0,[r4,#0x40]
;;;544    }
0005a2  e8bd87f0          POP      {r4-r10,pc}
;;;545    
                          ENDP

                  _InvalidateNumLines PROC
;;;551    */
;;;552    static void _InvalidateNumLines(MULTIEDIT_OBJ * pObj) {
0005a6  f8901075          LDRB     r1,[r0,#0x75]
;;;553      pObj->InvalidFlags |= INVALID_NUMLINES;
0005aa  f0410102          ORR      r1,r1,#2
0005ae  f8801075          STRB     r1,[r0,#0x75]
;;;554    }
0005b2  4770              BX       lr
;;;555    
                          ENDP

                  _InvalidateTextSizeX PROC
;;;561    */
;;;562    static void _InvalidateTextSizeX(MULTIEDIT_OBJ * pObj) {
0005b4  f8901075          LDRB     r1,[r0,#0x75]
;;;563      pObj->InvalidFlags |= INVALID_TEXTSIZE;
0005b8  f0410104          ORR      r1,r1,#4
0005bc  f8801075          STRB     r1,[r0,#0x75]
;;;564    }
0005c0  4770              BX       lr
;;;565    
                          ENDP

                  _CalcScrollParas PROC
;;;572    */
;;;573    static void _CalcScrollParas(MULTIEDIT_HANDLE hObj) {
0005c2  b570              PUSH     {r4-r6,lr}
0005c4  4605              MOV      r5,r0
;;;574      MULTIEDIT_OBJ* pObj = MULTIEDIT_H2P(hObj);
0005c6  4628              MOV      r0,r5
0005c8  f7fffffe          BL       GUI_ALLOC_h2p
0005cc  4604              MOV      r4,r0
;;;575      /* Calc vertical scroll parameters */
;;;576      pObj->ScrollStateV.NumItems = _GetNumLines(hObj, pObj);
0005ce  4621              MOV      r1,r4
0005d0  4628              MOV      r0,r5
0005d2  f7fffffe          BL       _GetNumLines
0005d6  65a0              STR      r0,[r4,#0x58]
;;;577      pObj->ScrollStateV.PageSize = _GetNumVisLines(hObj, pObj);
0005d8  4621              MOV      r1,r4
0005da  4628              MOV      r0,r5
0005dc  f7fffffe          BL       _GetNumVisLines
0005e0  6620              STR      r0,[r4,#0x60]
;;;578      /* Calc horizontal scroll parameters */
;;;579      pObj->ScrollStateH.NumItems = _GetTextSizeX(hObj, pObj);
0005e2  4621              MOV      r1,r4
0005e4  4628              MOV      r0,r5
0005e6  f7fffffe          BL       _GetTextSizeX
0005ea  6660              STR      r0,[r4,#0x64]
;;;580      pObj->ScrollStateH.PageSize = _GetXSize(hObj, pObj);
0005ec  4621              MOV      r1,r4
0005ee  4628              MOV      r0,r5
0005f0  f7fffffe          BL       _GetXSize
0005f4  66e0              STR      r0,[r4,#0x6c]
;;;581      _CalcScrollPos(hObj, pObj);
0005f6  4621              MOV      r1,r4
0005f8  4628              MOV      r0,r5
0005fa  f7fffffe          BL       _CalcScrollPos
;;;582    }
0005fe  bd70              POP      {r4-r6,pc}
;;;583    
                          ENDP

                  _ManageAutoScrollV PROC
;;;587    */
;;;588    static void _ManageAutoScrollV(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000600  e92d41f0          PUSH     {r4-r8,lr}
000604  4606              MOV      r6,r0
000606  460c              MOV      r4,r1
;;;589      if (pObj->Flags & MULTIEDIT_SF_AUTOSCROLLBAR_V) {
000608  f8940074          LDRB     r0,[r4,#0x74]
00060c  f0100f08          TST      r0,#8
000610  d021              BEQ      |L1.1622|
;;;590        char IsRequired = _GetNumVisLines(hObj, pObj) < _GetNumLines(hObj, pObj);
000612  4621              MOV      r1,r4
000614  4630              MOV      r0,r6
000616  f7fffffe          BL       _GetNumVisLines
00061a  4607              MOV      r7,r0
00061c  4621              MOV      r1,r4
00061e  4630              MOV      r0,r6
000620  f7fffffe          BL       _GetNumLines
000624  4287              CMP      r7,r0
000626  da01              BGE      |L1.1580|
000628  2001              MOVS     r0,#1
00062a  e000              B        |L1.1582|
                  |L1.1580|
00062c  2000              MOVS     r0,#0
                  |L1.1582|
00062e  4605              MOV      r5,r0
;;;591        if (WM_SetScrollbarV(hObj, IsRequired) != IsRequired) {
000630  4629              MOV      r1,r5
000632  4630              MOV      r0,r6
000634  f7fffffe          BL       WM_SetScrollbarV
000638  42a8              CMP      r0,r5
00063a  d00b              BEQ      |L1.1620|
;;;592          _InvalidateNumLines(pObj);
00063c  4620              MOV      r0,r4
00063e  f7fffffe          BL       _InvalidateNumLines
;;;593          _InvalidateTextSizeX(pObj);
000642  4620              MOV      r0,r4
000644  f7fffffe          BL       _InvalidateTextSizeX
;;;594          _InvalidateCursorXY(pObj);
000648  4620              MOV      r0,r4
00064a  f7fffffe          BL       _InvalidateCursorXY
;;;595          _ClearCache(pObj);
00064e  4620              MOV      r0,r4
000650  f7fffffe          BL       _ClearCache
                  |L1.1620|
;;;596        }
;;;597      }
000654  bf00              NOP      
                  |L1.1622|
;;;598    }
000656  e8bd81f0          POP      {r4-r8,pc}
;;;599    
                          ENDP

                  _ManageScrollers PROC
;;;609    */
;;;610    static void _ManageScrollers(MULTIEDIT_HANDLE hObj) {
00065a  e92d41f0          PUSH     {r4-r8,lr}
00065e  4606              MOV      r6,r0
;;;611      MULTIEDIT_OBJ* pObj;
;;;612      pObj = MULTIEDIT_H2P(hObj);
000660  4630              MOV      r0,r6
000662  f7fffffe          BL       GUI_ALLOC_h2p
000666  4604              MOV      r4,r0
;;;613      /* 1. Step: Check if vertical scrollbar is required */
;;;614      _ManageAutoScrollV(hObj, pObj);
000668  4621              MOV      r1,r4
00066a  4630              MOV      r0,r6
00066c  f7fffffe          BL       _ManageAutoScrollV
;;;615      /* 2. Step: Check if horizontal scrollbar is required */
;;;616      if (pObj->Flags & MULTIEDIT_SF_AUTOSCROLLBAR_H) {
000670  f8940074          LDRB     r0,[r4,#0x74]
000674  f0100f10          TST      r0,#0x10
000678  d019              BEQ      |L1.1710|
;;;617        char IsRequired;
;;;618        IsRequired = (_GetXSize(hObj, pObj) < _GetTextSizeX(hObj, pObj));
00067a  4621              MOV      r1,r4
00067c  4630              MOV      r0,r6
00067e  f7fffffe          BL       _GetXSize
000682  4607              MOV      r7,r0
000684  4621              MOV      r1,r4
000686  4630              MOV      r0,r6
000688  f7fffffe          BL       _GetTextSizeX
00068c  4287              CMP      r7,r0
00068e  da01              BGE      |L1.1684|
000690  2001              MOVS     r0,#1
000692  e000              B        |L1.1686|
                  |L1.1684|
000694  2000              MOVS     r0,#0
                  |L1.1686|
000696  4605              MOV      r5,r0
;;;619        if (WM_SetScrollbarH(hObj, IsRequired) != IsRequired) {
000698  4629              MOV      r1,r5
00069a  4630              MOV      r0,r6
00069c  f7fffffe          BL       WM_SetScrollbarH
0006a0  42a8              CMP      r0,r5
0006a2  d003              BEQ      |L1.1708|
;;;620          /* 3. Step: Check vertical scrollbar again if horizontal has changed */
;;;621          _ManageAutoScrollV(hObj, pObj);
0006a4  4621              MOV      r1,r4
0006a6  4630              MOV      r0,r6
0006a8  f7fffffe          BL       _ManageAutoScrollV
                  |L1.1708|
;;;622        }
;;;623      }
0006ac  bf00              NOP      
                  |L1.1710|
;;;624      _CalcScrollParas(hObj);
0006ae  4630              MOV      r0,r6
0006b0  f7fffffe          BL       _CalcScrollParas
;;;625    }
0006b4  e8bd81f0          POP      {r4-r8,pc}
;;;626    
                          ENDP

                  _Invalidate PROC
;;;630    */
;;;631    static void _Invalidate(MULTIEDIT_HANDLE hObj) {
0006b8  b510              PUSH     {r4,lr}
0006ba  4604              MOV      r4,r0
;;;632      _ManageScrollers(hObj);
0006bc  4620              MOV      r0,r4
0006be  f7fffffe          BL       _ManageScrollers
;;;633      WM_Invalidate(hObj);
0006c2  4620              MOV      r0,r4
0006c4  f7fffffe          BL       WM_InvalidateWindow
;;;634    }
0006c8  bd10              POP      {r4,pc}
;;;635    
                          ENDP

                  _InvalidateTextArea PROC
;;;641    */
;;;642    static void _InvalidateTextArea(MULTIEDIT_HANDLE hObj) {
0006ca  b51c              PUSH     {r2-r4,lr}
0006cc  4604              MOV      r4,r0
;;;643      GUI_RECT rInsideRect;
;;;644      _ManageScrollers(hObj);
0006ce  4620              MOV      r0,r4
0006d0  f7fffffe          BL       _ManageScrollers
;;;645      WM_GetInsideRectExScrollbar(hObj, &rInsideRect);
0006d4  4669              MOV      r1,sp
0006d6  4620              MOV      r0,r4
0006d8  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;646      WM_InvalidateRect(hObj, &rInsideRect);
0006dc  4669              MOV      r1,sp
0006de  4620              MOV      r0,r4
0006e0  f7fffffe          BL       WM_InvalidateRect
;;;647    }
0006e4  bd1c              POP      {r2-r4,pc}
;;;648    
                          ENDP

                  _InvalidateCursorPos PROC
;;;654    */
;;;655    static int _InvalidateCursorPos(MULTIEDIT_OBJ * pObj) {
0006e6  4601              MOV      r1,r0
;;;656      int Value;
;;;657      Value = pObj->CursorPosChar;
0006e8  f8b10048          LDRH     r0,[r1,#0x48]
;;;658      pObj->CursorPosChar = 0xffff;
0006ec  f64f72ff          MOV      r2,#0xffff
0006f0  f8a12048          STRH     r2,[r1,#0x48]
;;;659      return Value;
;;;660    }
0006f4  4770              BX       lr
;;;661    
                          ENDP

                  _SetFlag PROC
;;;665    */
;;;666    static void _SetFlag(MULTIEDIT_HANDLE hObj, int OnOff, U8 Flag) {
0006f6  e92d41f0          PUSH     {r4-r8,lr}
0006fa  4606              MOV      r6,r0
0006fc  460f              MOV      r7,r1
0006fe  4615              MOV      r5,r2
;;;667      if (hObj) {
000700  b1be              CBZ      r6,|L1.1842|
;;;668        MULTIEDIT_OBJ * pObj;
;;;669        WM_LOCK();
000702  f7fffffe          BL       GUI_Lock
;;;670        pObj = MULTIEDIT_H2P(hObj);
000706  4630              MOV      r0,r6
000708  f7fffffe          BL       GUI_ALLOC_h2p
00070c  4604              MOV      r4,r0
;;;671        if (OnOff) {
00070e  b12f              CBZ      r7,|L1.1820|
;;;672          pObj->Flags |= Flag;
000710  f8940074          LDRB     r0,[r4,#0x74]
000714  4328              ORRS     r0,r0,r5
000716  f8840074          STRB     r0,[r4,#0x74]
00071a  e004              B        |L1.1830|
                  |L1.1820|
;;;673        } else {
;;;674          pObj->Flags &= ~Flag;
00071c  f8940074          LDRB     r0,[r4,#0x74]
000720  43a8              BICS     r0,r0,r5
000722  f8840074          STRB     r0,[r4,#0x74]
                  |L1.1830|
;;;675        }
;;;676        _InvalidateTextArea(hObj);
000726  4630              MOV      r0,r6
000728  f7fffffe          BL       _InvalidateTextArea
;;;677        WM_UNLOCK();
00072c  f7fffffe          BL       GUI_Unlock
;;;678      }
000730  bf00              NOP      
                  |L1.1842|
;;;679    }
000732  e8bd81f0          POP      {r4-r8,pc}
;;;680    
                          ENDP

                  _CalcNextValidCursorPos PROC
;;;693    */
;;;694    static int _CalcNextValidCursorPos(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, int CursorPosChar, int * pCursorPosByte, int * pCursorLine) {
000736  e92d4fff          PUSH     {r0-r11,lr}
00073a  b083              SUB      sp,sp,#0xc
00073c  460c              MOV      r4,r1
00073e  4615              MOV      r5,r2
000740  469a              MOV      r10,r3
;;;695      if (pObj->hText) {
000742  8f20              LDRH     r0,[r4,#0x38]
000744  2800              CMP      r0,#0
000746  d062              BEQ      |L1.2062|
;;;696        char *pNextLine, *pCursor, *pText;
;;;697        int CursorLine, NumChars, CursorPosByte;
;;;698        pText    = (char*) GUI_ALLOC_h2p(pObj->hText);
000748  f9b40038          LDRSH    r0,[r4,#0x38]
00074c  f7fffffe          BL       GUI_ALLOC_h2p
000750  4607              MOV      r7,r0
;;;699        NumChars = _GetNumChars(pObj);
000752  4620              MOV      r0,r4
000754  f7fffffe          BL       _GetNumChars
000758  9002              STR      r0,[sp,#8]
;;;700        /* Set offset in valid range */
;;;701        if (CursorPosChar < pObj->NumCharsPrompt) {
00075a  8fe0              LDRH     r0,[r4,#0x3e]
00075c  42a8              CMP      r0,r5
00075e  dd00              BLE      |L1.1890|
;;;702          CursorPosChar = pObj->NumCharsPrompt;
000760  8fe5              LDRH     r5,[r4,#0x3e]
                  |L1.1890|
;;;703        }
;;;704        if (CursorPosChar > NumChars) {
000762  9802              LDR      r0,[sp,#8]
000764  4285              CMP      r5,r0
000766  dd00              BLE      |L1.1898|
;;;705          CursorPosChar = NumChars;
000768  9d02              LDR      r5,[sp,#8]
                  |L1.1898|
;;;706        }
;;;707        CursorPosByte = GUI_UC__NumChars2NumBytes(pText, CursorPosChar);
00076a  4629              MOV      r1,r5
00076c  4638              MOV      r0,r7
00076e  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000772  9001              STR      r0,[sp,#4]
;;;708        CursorLine    = _GetCursorLine(hObj, pObj, pText, CursorPosChar);
000774  462b              MOV      r3,r5
000776  463a              MOV      r2,r7
000778  4621              MOV      r1,r4
00077a  9803              LDR      r0,[sp,#0xc]
00077c  f7fffffe          BL       _GetCursorLine
000780  4680              MOV      r8,r0
;;;709        pCursor       = pText + CursorPosByte;
000782  9801              LDR      r0,[sp,#4]
000784  eb070b00          ADD      r11,r7,r0
;;;710        pNextLine     = _GetpLine(hObj, pObj, CursorLine);
000788  4642              MOV      r2,r8
00078a  4621              MOV      r1,r4
00078c  9803              LDR      r0,[sp,#0xc]
00078e  f7fffffe          BL       _GetpLine
000792  4606              MOV      r6,r0
;;;711        if (pNextLine > pCursor) {
000794  455e              CMP      r6,r11
000796  d92b              BLS      |L1.2032|
;;;712          if (pObj->CursorPosChar < CursorPosChar) {
000798  f8b40048          LDRH     r0,[r4,#0x48]
00079c  42a8              CMP      r0,r5
00079e  da01              BGE      |L1.1956|
;;;713            pCursor = pNextLine;
0007a0  46b3              MOV      r11,r6
0007a2  e013              B        |L1.1996|
                  |L1.1956|
;;;714          } else {
;;;715            char *pPrevLine;
;;;716            int NumChars;
;;;717            pPrevLine  = _GetpLine(hObj, pObj, CursorLine - 1);
0007a4  f1a80201          SUB      r2,r8,#1
0007a8  4621              MOV      r1,r4
0007aa  9803              LDR      r0,[sp,#0xc]
0007ac  f7fffffe          BL       _GetpLine
0007b0  4681              MOV      r9,r0
;;;718            NumChars   = _WrapGetNumCharsDisp(hObj, pObj, pPrevLine);
0007b2  464a              MOV      r2,r9
0007b4  4621              MOV      r1,r4
0007b6  9803              LDR      r0,[sp,#0xc]
0007b8  f7fffffe          BL       _WrapGetNumCharsDisp
0007bc  9000              STR      r0,[sp,#0]
;;;719            pPrevLine += GUI_UC__NumChars2NumBytes(pPrevLine, NumChars);
0007be  4648              MOV      r0,r9
0007c0  9900              LDR      r1,[sp,#0]
0007c2  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0007c6  4481              ADD      r9,r9,r0
;;;720            pCursor = pPrevLine;
0007c8  46cb              MOV      r11,r9
;;;721          }
0007ca  bf00              NOP      
                  |L1.1996|
;;;722          CursorPosChar = GUI_UC__NumBytes2NumChars(pText, pCursor - pText);
0007cc  ebab0107          SUB      r1,r11,r7
0007d0  4638              MOV      r0,r7
0007d2  f7fffffe          BL       GUI_UC__NumBytes2NumChars
0007d6  4605              MOV      r5,r0
;;;723          CursorPosByte = GUI_UC__NumChars2NumBytes(pText, CursorPosChar);
0007d8  4629              MOV      r1,r5
0007da  4638              MOV      r0,r7
0007dc  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0007e0  9001              STR      r0,[sp,#4]
;;;724          CursorLine    = _GetCursorLine(hObj, pObj, pText, CursorPosChar);
0007e2  462b              MOV      r3,r5
0007e4  463a              MOV      r2,r7
0007e6  4621              MOV      r1,r4
0007e8  9803              LDR      r0,[sp,#0xc]
0007ea  f7fffffe          BL       _GetCursorLine
0007ee  4680              MOV      r8,r0
                  |L1.2032|
;;;725        }
;;;726        if (pCursorPosByte) {
0007f0  f1ba0f00          CMP      r10,#0
0007f4  d002              BEQ      |L1.2044|
;;;727          *pCursorPosByte = CursorPosByte;
0007f6  9801              LDR      r0,[sp,#4]
0007f8  f8ca0000          STR      r0,[r10,#0]
                  |L1.2044|
;;;728        }
;;;729        if (pCursorLine) {
0007fc  9810              LDR      r0,[sp,#0x40]
0007fe  b110              CBZ      r0,|L1.2054|
;;;730          *pCursorLine = CursorLine;
000800  9810              LDR      r0,[sp,#0x40]
000802  f8c08000          STR      r8,[r0,#0]
                  |L1.2054|
;;;731        }
;;;732        return CursorPosChar;
000806  4628              MOV      r0,r5
                  |L1.2056|
;;;733      }
;;;734      return 0;
;;;735    }
000808  b007              ADD      sp,sp,#0x1c
00080a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2062|
00080e  2000              MOVS     r0,#0                 ;734
000810  e7fa              B        |L1.2056|
;;;736    
                          ENDP

                  _SetCursorPos PROC
;;;742    */
;;;743    static void _SetCursorPos(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, int CursorPosChar) {
000812  b5fe              PUSH     {r1-r7,lr}
000814  4606              MOV      r6,r0
000816  460c              MOV      r4,r1
000818  4615              MOV      r5,r2
;;;744      int CursorPosByte, CursorLine;
;;;745      CursorPosChar = _CalcNextValidCursorPos(hObj, pObj, CursorPosChar, &CursorPosByte, &CursorLine);
00081a  a801              ADD      r0,sp,#4
00081c  ab02              ADD      r3,sp,#8
00081e  462a              MOV      r2,r5
000820  4621              MOV      r1,r4
000822  9000              STR      r0,[sp,#0]
000824  4630              MOV      r0,r6
000826  f7fffffe          BL       _CalcNextValidCursorPos
00082a  4605              MOV      r5,r0
;;;746      /* Assign value and recalc whatever necessary */
;;;747      if (pObj->CursorPosChar != CursorPosChar) {
00082c  f8b40048          LDRH     r0,[r4,#0x48]
000830  42a8              CMP      r0,r5
000832  d00e              BEQ      |L1.2130|
;;;748        /* Save values */
;;;749        pObj->CursorPosByte = CursorPosByte;
000834  f1040446          ADD      r4,r4,#0x46
000838  9802              LDR      r0,[sp,#8]
00083a  80a0              STRH     r0,[r4,#4]
;;;750        pObj->CursorPosChar = CursorPosChar;
00083c  8065              STRH     r5,[r4,#2]
;;;751        pObj->CursorLine = CursorLine;
00083e  9801              LDR      r0,[sp,#4]
000840  f8240946          STRH     r0,[r4],#-0x46
;;;752        _InvalidateCursorXY(pObj); /* Invalidate X/Y position */
000844  4620              MOV      r0,r4
000846  f7fffffe          BL       _InvalidateCursorXY
;;;753        _CalcScrollPos(hObj, pObj);
00084a  4621              MOV      r1,r4
00084c  4630              MOV      r0,r6
00084e  f7fffffe          BL       _CalcScrollPos
                  |L1.2130|
;;;754      }
;;;755    }
000852  bdfe              POP      {r1-r7,pc}
;;;756    
                          ENDP

                  _SetWrapMode PROC
;;;760    */
;;;761    static int _SetWrapMode(MULTIEDIT_HANDLE hObj, GUI_WRAPMODE WrapMode) {
000854  e92d41f0          PUSH     {r4-r8,lr}
000858  4606              MOV      r6,r0
00085a  460d              MOV      r5,r1
;;;762      int r;
;;;763      r = 0;
00085c  2700              MOVS     r7,#0
;;;764      if (hObj) {
00085e  b336              CBZ      r6,|L1.2222|
;;;765        MULTIEDIT_OBJ * pObj;
;;;766        WM_LOCK();
000860  f7fffffe          BL       GUI_Lock
;;;767        pObj = MULTIEDIT_H2P(hObj);
000864  4630              MOV      r0,r6
000866  f7fffffe          BL       GUI_ALLOC_h2p
00086a  4604              MOV      r4,r0
;;;768        r = pObj->WrapMode;
00086c  f8947078          LDRB     r7,[r4,#0x78]
;;;769        if (pObj->WrapMode != WrapMode) {
000870  f8940078          LDRB     r0,[r4,#0x78]
000874  42a8              CMP      r0,r5
000876  d017              BEQ      |L1.2216|
;;;770          int Position;
;;;771          pObj->WrapMode = WrapMode;
000878  f8845078          STRB     r5,[r4,#0x78]
;;;772          _ClearCache(pObj);
00087c  4620              MOV      r0,r4
00087e  f7fffffe          BL       _ClearCache
;;;773          _InvalidateNumLines(pObj);
000882  4620              MOV      r0,r4
000884  f7fffffe          BL       _InvalidateNumLines
;;;774          _InvalidateTextSizeX(pObj);
000888  4620              MOV      r0,r4
00088a  f7fffffe          BL       _InvalidateTextSizeX
;;;775          _InvalidateTextArea(hObj);
00088e  4630              MOV      r0,r6
000890  f7fffffe          BL       _InvalidateTextArea
;;;776          Position = _InvalidateCursorPos(pObj);
000894  4620              MOV      r0,r4
000896  f7fffffe          BL       _InvalidateCursorPos
00089a  4680              MOV      r8,r0
;;;777          _SetCursorPos(hObj, pObj, Position);
00089c  4642              MOV      r2,r8
00089e  4621              MOV      r1,r4
0008a0  4630              MOV      r0,r6
0008a2  f7fffffe          BL       _SetCursorPos
;;;778        }
0008a6  bf00              NOP      
                  |L1.2216|
;;;779        WM_UNLOCK();
0008a8  f7fffffe          BL       GUI_Unlock
;;;780      }
0008ac  bf00              NOP      
                  |L1.2222|
;;;781      return r;
0008ae  4638              MOV      r0,r7
;;;782    }
0008b0  e8bd81f0          POP      {r4-r8,pc}
;;;783    
                          ENDP

                  _SetCursorXY PROC
;;;789    */
;;;790    static void _SetCursorXY(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, int x, int y) {
0008b4  e92d4fff          PUSH     {r0-r11,lr}
0008b8  b083              SUB      sp,sp,#0xc
0008ba  460c              MOV      r4,r1
0008bc  4690              MOV      r8,r2
0008be  4699              MOV      r9,r3
;;;791      int CursorPosChar = 0;
0008c0  2000              MOVS     r0,#0
0008c2  9002              STR      r0,[sp,#8]
;;;792      if ((x < 0) || (y < 0)) {
0008c4  f1b80f00          CMP      r8,#0
0008c8  db02              BLT      |L1.2256|
0008ca  f1b90f00          CMP      r9,#0
0008ce  da02              BGE      |L1.2262|
                  |L1.2256|
;;;793        return;
;;;794      }
;;;795      if (pObj->hText) {
;;;796        char *pLine, *pText;
;;;797        int CursorLine, WrapChars;
;;;798        int SizeX = 0;
;;;799        U16 Char;
;;;800        GUI_SetFont(pObj->pFont);
;;;801        CursorLine = y / GUI_GetFontDistY();
;;;802        pLine      = _GetpLine(hObj, pObj, CursorLine);
;;;803        pText      = (char*) GUI_ALLOC_h2p(pObj->hText);
;;;804        WrapChars  = _WrapGetNumCharsDisp(hObj, pObj, pLine);
;;;805        Char       = GUI_UC__GetCharCode(pLine + GUI_UC__NumChars2NumBytes(pLine, WrapChars));
;;;806        if (pObj->Flags & MULTIEDIT_SF_PASSWORD) {
;;;807          if (!Char) {
;;;808            WrapChars++;
;;;809          }
;;;810        } else {
;;;811          if (!Char || (Char == '\n') || ((Char == ' ') && (pObj->WrapMode == GUI_WRAPMODE_WORD))) {
;;;812            WrapChars++;
;;;813          }
;;;814        }
;;;815        while (--WrapChars > 0) {
;;;816          Char   = GUI_UC_GetCharCode(pLine);
;;;817          SizeX += _GetCharDistX(pObj, pLine);
;;;818          if (!Char || (SizeX > x)) {
;;;819            break;
;;;820          }
;;;821          pLine += GUI_UC_GetCharSize(pLine);
;;;822        }
;;;823        CursorPosChar = GUI_UC__NumBytes2NumChars(pText, pLine - pText);
;;;824      }
;;;825      _SetCursorPos(hObj, pObj, CursorPosChar);
;;;826    }
0008d0  b007              ADD      sp,sp,#0x1c
0008d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2262|
0008d6  8f20              LDRH     r0,[r4,#0x38]         ;795
0008d8  2800              CMP      r0,#0                 ;795
0008da  d055              BEQ      |L1.2440|
0008dc  f04f0b00          MOV      r11,#0                ;798
0008e0  6f20              LDR      r0,[r4,#0x70]         ;800
0008e2  f7fffffe          BL       GUI_SetFont
0008e6  f7fffffe          BL       GUI_GetFontDistY
0008ea  fb99f0f0          SDIV     r0,r9,r0              ;801
0008ee  9001              STR      r0,[sp,#4]            ;801
0008f0  4621              MOV      r1,r4                 ;802
0008f2  9a01              LDR      r2,[sp,#4]            ;802
0008f4  9803              LDR      r0,[sp,#0xc]          ;802
0008f6  f7fffffe          BL       _GetpLine
0008fa  4605              MOV      r5,r0                 ;802
0008fc  f9b40038          LDRSH    r0,[r4,#0x38]         ;803
000900  f7fffffe          BL       GUI_ALLOC_h2p
000904  4682              MOV      r10,r0                ;803
000906  462a              MOV      r2,r5                 ;804
000908  4621              MOV      r1,r4                 ;804
00090a  9803              LDR      r0,[sp,#0xc]          ;804
00090c  f7fffffe          BL       _WrapGetNumCharsDisp
000910  4607              MOV      r7,r0                 ;804
000912  4639              MOV      r1,r7                 ;805
000914  4628              MOV      r0,r5                 ;805
000916  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00091a  4428              ADD      r0,r0,r5              ;805
00091c  9000              STR      r0,[sp,#0]            ;805
00091e  48fb              LDR      r0,|L1.3340|
000920  69c0              LDR      r0,[r0,#0x1c]         ;805  ; GUI_Context
000922  6801              LDR      r1,[r0,#0]            ;805
000924  9800              LDR      r0,[sp,#0]            ;805
000926  4788              BLX      r1                    ;805
000928  4606              MOV      r6,r0                 ;805
00092a  f8940074          LDRB     r0,[r4,#0x74]         ;806
00092e  f0100f20          TST      r0,#0x20              ;806
000932  d002              BEQ      |L1.2362|
000934  b95e              CBNZ     r6,|L1.2382|
000936  1c7f              ADDS     r7,r7,#1              ;808
000938  e009              B        |L1.2382|
                  |L1.2362|
00093a  b13e              CBZ      r6,|L1.2380|
00093c  2e0a              CMP      r6,#0xa               ;811
00093e  d005              BEQ      |L1.2380|
000940  2e20              CMP      r6,#0x20              ;811
000942  d104              BNE      |L1.2382|
000944  f8940078          LDRB     r0,[r4,#0x78]         ;811
000948  2801              CMP      r0,#1                 ;811
00094a  d100              BNE      |L1.2382|
                  |L1.2380|
00094c  1c7f              ADDS     r7,r7,#1              ;812
                  |L1.2382|
00094e  e010              B        |L1.2418|
                  |L1.2384|
000950  4628              MOV      r0,r5                 ;816
000952  f7fffffe          BL       GUI_UC_GetCharCode
000956  4606              MOV      r6,r0                 ;816
000958  4629              MOV      r1,r5                 ;817
00095a  4620              MOV      r0,r4                 ;817
00095c  f7fffffe          BL       _GetCharDistX
000960  4483              ADD      r11,r11,r0            ;817
000962  b10e              CBZ      r6,|L1.2408|
000964  45c3              CMP      r11,r8                ;818
000966  dd00              BLE      |L1.2410|
                  |L1.2408|
000968  e006              B        |L1.2424|
                  |L1.2410|
00096a  4628              MOV      r0,r5                 ;821
00096c  f7fffffe          BL       GUI_UC_GetCharSize
000970  4405              ADD      r5,r5,r0              ;821
                  |L1.2418|
000972  1e78              SUBS     r0,r7,#1              ;815
000974  1e07              SUBS     r7,r0,#0              ;815
000976  dceb              BGT      |L1.2384|
                  |L1.2424|
000978  bf00              NOP                            ;819
00097a  eba5010a          SUB      r1,r5,r10             ;823
00097e  4650              MOV      r0,r10                ;823
000980  f7fffffe          BL       GUI_UC__NumBytes2NumChars
000984  9002              STR      r0,[sp,#8]            ;823
000986  bf00              NOP                            ;824
                  |L1.2440|
000988  4621              MOV      r1,r4                 ;825
00098a  e9dd2002          LDRD     r2,r0,[sp,#8]         ;825
00098e  f7fffffe          BL       _SetCursorPos
000992  bf00              NOP      
000994  e79c              B        |L1.2256|
;;;827    
                          ENDP

                  _MoveCursorUp PROC
;;;831    */
;;;832    static void _MoveCursorUp(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000996  b57c              PUSH     {r2-r6,lr}
000998  4605              MOV      r5,r0
00099a  460c              MOV      r4,r1
;;;833      int xPos, yPos;
;;;834      _GetCursorXY(hObj, pObj, &xPos, &yPos);
00099c  466b              MOV      r3,sp
00099e  aa01              ADD      r2,sp,#4
0009a0  4621              MOV      r1,r4
0009a2  4628              MOV      r0,r5
0009a4  f7fffffe          BL       _GetCursorXY
;;;835      yPos -= GUI_GetYDistOfFont(pObj->pFont);
0009a8  6f20              LDR      r0,[r4,#0x70]
0009aa  f7fffffe          BL       GUI_GetYDistOfFont
0009ae  9900              LDR      r1,[sp,#0]
0009b0  1a08              SUBS     r0,r1,r0
0009b2  9000              STR      r0,[sp,#0]
;;;836      _SetCursorXY(hObj, pObj, xPos, yPos);
0009b4  4621              MOV      r1,r4
0009b6  4628              MOV      r0,r5
0009b8  e9dd3200          LDRD     r3,r2,[sp,#0]
0009bc  f7fffffe          BL       _SetCursorXY
;;;837    }
0009c0  bd7c              POP      {r2-r6,pc}
;;;838    
                          ENDP

                  _MoveCursorDown PROC
;;;842    */
;;;843    static void _MoveCursorDown(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
0009c2  b57c              PUSH     {r2-r6,lr}
0009c4  4605              MOV      r5,r0
0009c6  460c              MOV      r4,r1
;;;844      int xPos, yPos;
;;;845      _GetCursorXY(hObj, pObj, &xPos, &yPos);
0009c8  466b              MOV      r3,sp
0009ca  aa01              ADD      r2,sp,#4
0009cc  4621              MOV      r1,r4
0009ce  4628              MOV      r0,r5
0009d0  f7fffffe          BL       _GetCursorXY
;;;846      yPos += GUI_GetYDistOfFont(pObj->pFont);
0009d4  6f20              LDR      r0,[r4,#0x70]
0009d6  f7fffffe          BL       GUI_GetYDistOfFont
0009da  9900              LDR      r1,[sp,#0]
0009dc  4408              ADD      r0,r0,r1
0009de  9000              STR      r0,[sp,#0]
;;;847      _SetCursorXY(hObj, pObj, xPos, yPos);
0009e0  4621              MOV      r1,r4
0009e2  4628              MOV      r0,r5
0009e4  e9dd3200          LDRD     r3,r2,[sp,#0]
0009e8  f7fffffe          BL       _SetCursorXY
;;;848    }
0009ec  bd7c              POP      {r2-r6,pc}
;;;849    
                          ENDP

                  _MoveCursor2NextLine PROC
;;;853    */
;;;854    static void _MoveCursor2NextLine(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
0009ee  b57c              PUSH     {r2-r6,lr}
0009f0  4605              MOV      r5,r0
0009f2  460c              MOV      r4,r1
;;;855      int xPos, yPos;
;;;856      _GetCursorXY(hObj, pObj, &xPos, &yPos);
0009f4  466b              MOV      r3,sp
0009f6  aa01              ADD      r2,sp,#4
0009f8  4621              MOV      r1,r4
0009fa  4628              MOV      r0,r5
0009fc  f7fffffe          BL       _GetCursorXY
;;;857      yPos += GUI_GetYDistOfFont(pObj->pFont);
000a00  6f20              LDR      r0,[r4,#0x70]
000a02  f7fffffe          BL       GUI_GetYDistOfFont
000a06  9900              LDR      r1,[sp,#0]
000a08  4408              ADD      r0,r0,r1
000a0a  9000              STR      r0,[sp,#0]
;;;858      _SetCursorXY(hObj, pObj, 0, yPos);
000a0c  2200              MOVS     r2,#0
000a0e  4621              MOV      r1,r4
000a10  4628              MOV      r0,r5
000a12  9b00              LDR      r3,[sp,#0]
000a14  f7fffffe          BL       _SetCursorXY
;;;859    }
000a18  bd7c              POP      {r2-r6,pc}
;;;860    
                          ENDP

                  _MoveCursor2LineEnd PROC
;;;864    */
;;;865    static void _MoveCursor2LineEnd(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000a1a  b57c              PUSH     {r2-r6,lr}
000a1c  4604              MOV      r4,r0
000a1e  460d              MOV      r5,r1
;;;866      int xPos, yPos;
;;;867      _GetCursorXY(hObj, pObj, &xPos, &yPos);
000a20  466b              MOV      r3,sp
000a22  aa01              ADD      r2,sp,#4
000a24  4629              MOV      r1,r5
000a26  4620              MOV      r0,r4
000a28  f7fffffe          BL       _GetCursorXY
;;;868      _SetCursorXY(hObj, pObj, 0x7FFF, yPos);
000a2c  f64772ff          MOV      r2,#0x7fff
000a30  4629              MOV      r1,r5
000a32  4620              MOV      r0,r4
000a34  9b00              LDR      r3,[sp,#0]
000a36  f7fffffe          BL       _SetCursorXY
;;;869    }
000a3a  bd7c              POP      {r2-r6,pc}
;;;870    
                          ENDP

                  _MoveCursor2LinePos1 PROC
;;;874    */
;;;875    static void _MoveCursor2LinePos1(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000a3c  b57c              PUSH     {r2-r6,lr}
000a3e  4604              MOV      r4,r0
000a40  460d              MOV      r5,r1
;;;876      int xPos, yPos;
;;;877      _GetCursorXY(hObj, pObj, &xPos, &yPos);
000a42  466b              MOV      r3,sp
000a44  aa01              ADD      r2,sp,#4
000a46  4629              MOV      r1,r5
000a48  4620              MOV      r0,r4
000a4a  f7fffffe          BL       _GetCursorXY
;;;878      _SetCursorXY(hObj, pObj, 0, yPos);
000a4e  2200              MOVS     r2,#0
000a50  4629              MOV      r1,r5
000a52  4620              MOV      r0,r4
000a54  9b00              LDR      r3,[sp,#0]
000a56  f7fffffe          BL       _SetCursorXY
;;;879    }
000a5a  bd7c              POP      {r2-r6,pc}
;;;880    
                          ENDP

                  _IsOverwriteAtThisChar PROC
;;;884    */
;;;885    static int _IsOverwriteAtThisChar(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000a5c  e92d4ff8          PUSH     {r3-r11,lr}
000a60  4607              MOV      r7,r0
000a62  460c              MOV      r4,r1
;;;886      int r = 0;
000a64  f04f0800          MOV      r8,#0
;;;887      if (pObj->hText && !(pObj->Flags & MULTIEDIT_CF_INSERT)) {
000a68  8f20              LDRH     r0,[r4,#0x38]
000a6a  2800              CMP      r0,#0
000a6c  d03a              BEQ      |L1.2788|
000a6e  f8940074          LDRB     r0,[r4,#0x74]
000a72  f0100f04          TST      r0,#4
000a76  d135              BNE      |L1.2788|
;;;888        const char *pText;
;;;889        int CurPos, Line1, Line2;
;;;890        U16 Char;
;;;891        pText  = (const char *)GUI_ALLOC_h2p(pObj->hText);
000a78  f9b40038          LDRSH    r0,[r4,#0x38]
000a7c  f7fffffe          BL       GUI_ALLOC_h2p
000a80  4605              MOV      r5,r0
;;;892        Line1  = pObj->CursorLine;
000a82  f8b4a046          LDRH     r10,[r4,#0x46]
;;;893        CurPos = _CalcNextValidCursorPos(hObj, pObj, pObj->CursorPosChar + 1, 0, 0);
000a86  2000              MOVS     r0,#0
000a88  9000              STR      r0,[sp,#0]
000a8a  f8b40048          LDRH     r0,[r4,#0x48]
000a8e  1c42              ADDS     r2,r0,#1
000a90  2300              MOVS     r3,#0
000a92  4621              MOV      r1,r4
000a94  4638              MOV      r0,r7
000a96  f7fffffe          BL       _CalcNextValidCursorPos
000a9a  4681              MOV      r9,r0
;;;894        Line2  = _GetCursorLine(hObj, pObj, pText, CurPos);
000a9c  464b              MOV      r3,r9
000a9e  462a              MOV      r2,r5
000aa0  4621              MOV      r1,r4
000aa2  4638              MOV      r0,r7
000aa4  f7fffffe          BL       _GetCursorLine
000aa8  4683              MOV      r11,r0
;;;895        pText += pObj->CursorPosByte;
000aaa  f8b4004a          LDRH     r0,[r4,#0x4a]
000aae  4405              ADD      r5,r5,r0
;;;896        Char   = GUI_UC_GetCharCode(pText);
000ab0  4628              MOV      r0,r5
000ab2  f7fffffe          BL       GUI_UC_GetCharCode
000ab6  4606              MOV      r6,r0
;;;897        if (Char) {
000ab8  b19e              CBZ      r6,|L1.2786|
;;;898          if ((Line1 == Line2) || (pObj->Flags & MULTIEDIT_SF_PASSWORD)) {
000aba  45da              CMP      r10,r11
000abc  d004              BEQ      |L1.2760|
000abe  f8940074          LDRB     r0,[r4,#0x74]
000ac2  f0100f20          TST      r0,#0x20
000ac6  d002              BEQ      |L1.2766|
                  |L1.2760|
;;;899            r = 1;
000ac8  f04f0801          MOV      r8,#1
000acc  e009              B        |L1.2786|
                  |L1.2766|
;;;900          } else {
;;;901            if (Char != '\n') {
000ace  2e0a              CMP      r6,#0xa
000ad0  d007              BEQ      |L1.2786|
;;;902              if ((Char != ' ') || (pObj->WrapMode == GUI_WRAPMODE_CHAR)) {
000ad2  2e20              CMP      r6,#0x20
000ad4  d103              BNE      |L1.2782|
000ad6  f8940078          LDRB     r0,[r4,#0x78]
000ada  2802              CMP      r0,#2
000adc  d101              BNE      |L1.2786|
                  |L1.2782|
;;;903                r = 1;
000ade  f04f0801          MOV      r8,#1
                  |L1.2786|
;;;904              }
;;;905            }
;;;906          }
;;;907        }
;;;908      }
000ae2  bf00              NOP      
                  |L1.2788|
;;;909      return r;
000ae4  4640              MOV      r0,r8
;;;910    }
000ae6  e8bd8ff8          POP      {r3-r11,pc}
;;;911    
                          ENDP

                  _GetCursorSizeX PROC
;;;918    */
;;;919    static int _GetCursorSizeX(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000aea  b570              PUSH     {r4-r6,lr}
000aec  4606              MOV      r6,r0
000aee  460c              MOV      r4,r1
;;;920      if (_IsOverwriteAtThisChar(hObj, pObj)) {
000af0  4621              MOV      r1,r4
000af2  4630              MOV      r0,r6
000af4  f7fffffe          BL       _IsOverwriteAtThisChar
000af8  b160              CBZ      r0,|L1.2836|
;;;921        const char *pText;
;;;922        pText  = (const char *)GUI_ALLOC_h2p(pObj->hText);
000afa  f9b40038          LDRSH    r0,[r4,#0x38]
000afe  f7fffffe          BL       GUI_ALLOC_h2p
000b02  4605              MOV      r5,r0
;;;923        pText += pObj->CursorPosByte;
000b04  f8b4004a          LDRH     r0,[r4,#0x4a]
000b08  4405              ADD      r5,r5,r0
;;;924        return _GetCharDistX(pObj, pText);
000b0a  4629              MOV      r1,r5
000b0c  4620              MOV      r0,r4
000b0e  f7fffffe          BL       _GetCharDistX
                  |L1.2834|
;;;925      } else {
;;;926        return 2;
;;;927      }
;;;928    }
000b12  bd70              POP      {r4-r6,pc}
                  |L1.2836|
000b14  2002              MOVS     r0,#2                 ;926
000b16  e7fc              B        |L1.2834|
;;;929    
                          ENDP

                  _IncrementBuffer PROC
;;;941    */
;;;942    static int _IncrementBuffer(MULTIEDIT_OBJ* pObj, unsigned AddBytes) {
000b18  e92d41f0          PUSH     {r4-r8,lr}
000b1c  4604              MOV      r4,r0
000b1e  460e              MOV      r6,r1
;;;943      WM_HMEM hNew;
;;;944      int NewSize;
;;;945      NewSize = pObj->BufferSize + AddBytes;
000b20  f8b40044          LDRH     r0,[r4,#0x44]
000b24  1987              ADDS     r7,r0,r6
;;;946      hNew    = GUI_ALLOC_Realloc(pObj->hText, NewSize);
000b26  f9b40038          LDRSH    r0,[r4,#0x38]
000b2a  4639              MOV      r1,r7
000b2c  f7fffffe          BL       GUI_ALLOC_Realloc
000b30  4605              MOV      r5,r0
;;;947      if (hNew) {
000b32  b17d              CBZ      r5,|L1.2900|
;;;948        if (!(pObj->hText)) {
000b34  8f20              LDRH     r0,[r4,#0x38]
000b36  b938              CBNZ     r0,|L1.2888|
;;;949          char* pText;
;;;950          pText  = (char*) GUI_ALLOC_h2p(hNew);
000b38  4628              MOV      r0,r5
000b3a  f7fffffe          BL       GUI_ALLOC_h2p
000b3e  4680              MOV      r8,r0
;;;951          *pText = 0;
000b40  2000              MOVS     r0,#0
000b42  f8880000          STRB     r0,[r8,#0]
;;;952        }
000b46  bf00              NOP      
                  |L1.2888|
;;;953        pObj->BufferSize = NewSize;
000b48  f8a47044          STRH     r7,[r4,#0x44]
;;;954        pObj->hText = hNew;
000b4c  8725              STRH     r5,[r4,#0x38]
;;;955        return 1;
000b4e  2001              MOVS     r0,#1
                  |L1.2896|
;;;956      }
;;;957      return 0;
;;;958    }
000b50  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2900|
000b54  2000              MOVS     r0,#0                 ;957
000b56  e7fb              B        |L1.2896|
;;;959    
                          ENDP

                  _IsSpaceInBuffer PROC
;;;970    */
;;;971    static int _IsSpaceInBuffer(MULTIEDIT_OBJ* pObj, int BytesNeeded) {
000b58  e92d41f0          PUSH     {r4-r8,lr}
000b5c  4604              MOV      r4,r0
000b5e  460d              MOV      r5,r1
;;;972      int NumBytes = 0;
000b60  2600              MOVS     r6,#0
;;;973      if (pObj->hText) {
000b62  8f20              LDRH     r0,[r4,#0x38]
000b64  b138              CBZ      r0,|L1.2934|
;;;974        NumBytes = strlen((char*)GUI_ALLOC_h2p(pObj->hText));
000b66  f9b40038          LDRSH    r0,[r4,#0x38]
000b6a  f7fffffe          BL       GUI_ALLOC_h2p
000b6e  4607              MOV      r7,r0
000b70  f7fffffe          BL       strlen
000b74  4606              MOV      r6,r0
                  |L1.2934|
;;;975      }
;;;976      BytesNeeded = (BytesNeeded + NumBytes + 1) - pObj->BufferSize;
000b76  19a8              ADDS     r0,r5,r6
000b78  1c40              ADDS     r0,r0,#1
000b7a  f8b41044          LDRH     r1,[r4,#0x44]
000b7e  1a45              SUBS     r5,r0,r1
;;;977      if (BytesNeeded > 0) {
000b80  2d00              CMP      r5,#0
000b82  dd08              BLE      |L1.2966|
;;;978        if (!_IncrementBuffer(pObj, BytesNeeded + MULTIEDIT_REALLOC_SIZE)) {
000b84  f1050110          ADD      r1,r5,#0x10
000b88  4620              MOV      r0,r4
000b8a  f7fffffe          BL       _IncrementBuffer
000b8e  b910              CBNZ     r0,|L1.2966|
;;;979          return 0;
000b90  2000              MOVS     r0,#0
                  |L1.2962|
;;;980        }
;;;981      }
;;;982      return 1;
;;;983    }
000b92  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2966|
000b96  2001              MOVS     r0,#1                 ;982
000b98  e7fb              B        |L1.2962|
;;;984    
                          ENDP

                  _IsCharsAvailable PROC
;;;994    */
;;;995    static int _IsCharsAvailable(MULTIEDIT_OBJ* pObj, int CharsNeeded) {
000b9a  b570              PUSH     {r4-r6,lr}
000b9c  4604              MOV      r4,r0
000b9e  460d              MOV      r5,r1
;;;996      if ((CharsNeeded > 0) && (pObj->MaxNumChars > 0)) {
000ba0  2d00              CMP      r5,#0
000ba2  dd10              BLE      |L1.3014|
000ba4  8f60              LDRH     r0,[r4,#0x3a]
000ba6  2800              CMP      r0,#0
000ba8  dd0d              BLE      |L1.3014|
;;;997        int NumChars = 0;
000baa  2600              MOVS     r6,#0
;;;998        if (pObj->hText) {
000bac  8f20              LDRH     r0,[r4,#0x38]
000bae  b118              CBZ      r0,|L1.3000|
;;;999          NumChars = _GetNumChars(pObj);
000bb0  4620              MOV      r0,r4
000bb2  f7fffffe          BL       _GetNumChars
000bb6  4606              MOV      r6,r0
                  |L1.3000|
;;;1000       }
;;;1001       if ((CharsNeeded + NumChars) > pObj->MaxNumChars) {
000bb8  19a8              ADDS     r0,r5,r6
000bba  8f61              LDRH     r1,[r4,#0x3a]
000bbc  4288              CMP      r0,r1
000bbe  dd01              BLE      |L1.3012|
;;;1002         return 0;
000bc0  2000              MOVS     r0,#0
                  |L1.3010|
;;;1003       }
;;;1004     }
;;;1005     return 1;
;;;1006   }
000bc2  bd70              POP      {r4-r6,pc}
                  |L1.3012|
000bc4  bf00              NOP                            ;1004
                  |L1.3014|
000bc6  2001              MOVS     r0,#1                 ;1005
000bc8  e7fb              B        |L1.3010|
;;;1007   
                          ENDP

                  _DeleteChar PROC
;;;1020   */
;;;1021   static void _DeleteChar(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj) {
000bca  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000bce  b081              SUB      sp,sp,#4
000bd0  460c              MOV      r4,r1
;;;1022     if (pObj->hText) {
000bd2  8f20              LDRH     r0,[r4,#0x38]
000bd4  2800              CMP      r0,#0
000bd6  d05a              BEQ      |L1.3214|
;;;1023       unsigned CursorOffset;
;;;1024       char* s;
;;;1025       s = (char*) GUI_ALLOC_h2p(pObj->hText);
000bd8  f9b40038          LDRSH    r0,[r4,#0x38]
000bdc  f7fffffe          BL       GUI_ALLOC_h2p
000be0  4607              MOV      r7,r0
;;;1026       CursorOffset = pObj->CursorPosByte;
000be2  f8b4904a          LDRH     r9,[r4,#0x4a]
;;;1027       if (CursorOffset < strlen(s)) {
000be6  4638              MOV      r0,r7
000be8  f7fffffe          BL       strlen
000bec  4548              CMP      r0,r9
000bee  d94d              BLS      |L1.3212|
;;;1028         char *pCursor, *pLine, *pEndLine;
;;;1029         int CursorLine, NumChars, NumBytes;
;;;1030         pCursor    = s + CursorOffset;
000bf0  eb070809          ADD      r8,r7,r9
;;;1031         CursorLine = pObj->CursorLine;
000bf4  f8b40046          LDRH     r0,[r4,#0x46]
000bf8  9000              STR      r0,[sp,#0]
;;;1032         pLine      = _GetpLine(hObj, pObj, CursorLine);
000bfa  4621              MOV      r1,r4
000bfc  e9dd2000          LDRD     r2,r0,[sp,#0]
000c00  f7fffffe          BL       _GetpLine
000c04  4605              MOV      r5,r0
;;;1033         NumChars   = _WrapGetNumCharsDisp(hObj, pObj, pLine);
000c06  462a              MOV      r2,r5
000c08  4621              MOV      r1,r4
000c0a  9801              LDR      r0,[sp,#4]
000c0c  f7fffffe          BL       _WrapGetNumCharsDisp
000c10  4683              MOV      r11,r0
;;;1034         pEndLine   = pLine + GUI_UC__NumChars2NumBytes(pLine, NumChars);
000c12  4659              MOV      r1,r11
000c14  4628              MOV      r0,r5
000c16  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000c1a  eb000a05          ADD      r10,r0,r5
;;;1035         pLine      = pLine + _WrapGetNumBytesToNextLine(hObj, pObj, pLine);
000c1e  462a              MOV      r2,r5
000c20  4621              MOV      r1,r4
000c22  9801              LDR      r0,[sp,#4]
000c24  f7fffffe          BL       _WrapGetNumBytesToNextLine
000c28  4405              ADD      r5,r5,r0
;;;1036         if (pCursor == pEndLine) {
000c2a  45d0              CMP      r8,r10
000c2c  d102              BNE      |L1.3124|
;;;1037           NumBytes = pLine - pEndLine;
000c2e  eba5060a          SUB      r6,r5,r10
000c32  e003              B        |L1.3132|
                  |L1.3124|
;;;1038         } else {
;;;1039           NumBytes = GUI_UC_GetCharSize(pCursor);
000c34  4640              MOV      r0,r8
000c36  f7fffffe          BL       GUI_UC_GetCharSize
000c3a  4606              MOV      r6,r0
                  |L1.3132|
;;;1040         }
;;;1041         NumChars = GUI_UC__NumBytes2NumChars(pCursor, NumBytes);
000c3c  4631              MOV      r1,r6
000c3e  4640              MOV      r0,r8
000c40  f7fffffe          BL       GUI_UC__NumBytes2NumChars
000c44  4683              MOV      r11,r0
;;;1042         strcpy(pCursor, pCursor + NumBytes);
000c46  eb080106          ADD      r1,r8,r6
000c4a  4640              MOV      r0,r8
000c4c  f7fffffe          BL       strcpy
;;;1043         WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000c50  2105              MOVS     r1,#5
000c52  9801              LDR      r0,[sp,#4]
000c54  f7fffffe          BL       WM_NotifyParent
;;;1044         pObj->NumChars -= NumChars;
000c58  8fa0              LDRH     r0,[r4,#0x3c]
000c5a  eba0000b          SUB      r0,r0,r11
000c5e  87a0              STRH     r0,[r4,#0x3c]
;;;1045         _InvalidateNumLines(pObj);
000c60  4620              MOV      r0,r4
000c62  f7fffffe          BL       _InvalidateNumLines
;;;1046         _InvalidateTextSizeX(pObj);
000c66  4620              MOV      r0,r4
000c68  f7fffffe          BL       _InvalidateTextSizeX
;;;1047         _InvalidateCursorXY(pObj); /* Invalidate X/Y position */
000c6c  4620              MOV      r0,r4
000c6e  f7fffffe          BL       _InvalidateCursorXY
;;;1048         _ClearCache(pObj);
000c72  4620              MOV      r0,r4
000c74  f7fffffe          BL       _ClearCache
;;;1049         pObj->CursorLine = _GetCursorLine(hObj, pObj, s, pObj->CursorPosChar);
000c78  f8b43048          LDRH     r3,[r4,#0x48]
000c7c  463a              MOV      r2,r7
000c7e  4621              MOV      r1,r4
000c80  9801              LDR      r0,[sp,#4]
000c82  f7fffffe          BL       _GetCursorLine
000c86  f8a40046          STRH     r0,[r4,#0x46]
;;;1050       }
000c8a  bf00              NOP      
                  |L1.3212|
;;;1051     }
000c8c  bf00              NOP      
                  |L1.3214|
;;;1052   }
000c8e  e8bd8ffe          POP      {r1-r11,pc}
;;;1053   
                          ENDP

                  _InsertChar PROC
;;;1059   */
;;;1060   static int _InsertChar(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, U16 Char) {
000c92  e92d47f0          PUSH     {r4-r10,lr}
000c96  4680              MOV      r8,r0
000c98  460c              MOV      r4,r1
000c9a  4616              MOV      r6,r2
;;;1061     if (_IsCharsAvailable(pObj, 1)) {
000c9c  2101              MOVS     r1,#1
000c9e  4620              MOV      r0,r4
000ca0  f7fffffe          BL       _IsCharsAvailable
000ca4  2800              CMP      r0,#0
000ca6  d035              BEQ      |L1.3348|
;;;1062       int BytesNeeded;
;;;1063       BytesNeeded = GUI_UC__CalcSizeOfChar(Char);
000ca8  4630              MOV      r0,r6
000caa  f7fffffe          BL       GUI_UC__CalcSizeOfChar
000cae  4607              MOV      r7,r0
;;;1064       if (_IsSpaceInBuffer(pObj, BytesNeeded)) {
000cb0  4639              MOV      r1,r7
000cb2  4620              MOV      r0,r4
000cb4  f7fffffe          BL       _IsSpaceInBuffer
000cb8  b350              CBZ      r0,|L1.3344|
;;;1065         int CursorOffset;
;;;1066         char* pText;
;;;1067         pText = (char*) GUI_ALLOC_h2p(pObj->hText);
000cba  f9b40038          LDRSH    r0,[r4,#0x38]
000cbe  f7fffffe          BL       GUI_ALLOC_h2p
000cc2  4605              MOV      r5,r0
;;;1068         CursorOffset = pObj->CursorPosByte;
000cc4  f8b4904a          LDRH     r9,[r4,#0x4a]
;;;1069         pText += CursorOffset;
000cc8  444d              ADD      r5,r5,r9
;;;1070         memmove(pText + BytesNeeded, pText, strlen(pText) + 1);
000cca  4628              MOV      r0,r5
000ccc  f7fffffe          BL       strlen
000cd0  f1000a01          ADD      r10,r0,#1
000cd4  19e8              ADDS     r0,r5,r7
000cd6  4652              MOV      r2,r10
000cd8  4629              MOV      r1,r5
000cda  f7fffffe          BL       __aeabi_memmove
;;;1071         GUI_UC_Encode(pText, Char);
000cde  4631              MOV      r1,r6
000ce0  4628              MOV      r0,r5
000ce2  f7fffffe          BL       GUI_UC_Encode
;;;1072         WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000ce6  2105              MOVS     r1,#5
000ce8  4640              MOV      r0,r8
000cea  f7fffffe          BL       WM_NotifyParent
;;;1073         pObj->NumChars += 1;
000cee  8fa0              LDRH     r0,[r4,#0x3c]
000cf0  1c40              ADDS     r0,r0,#1
000cf2  87a0              STRH     r0,[r4,#0x3c]
;;;1074         _InvalidateNumLines(pObj);
000cf4  4620              MOV      r0,r4
000cf6  f7fffffe          BL       _InvalidateNumLines
;;;1075         _InvalidateTextSizeX(pObj);
000cfa  4620              MOV      r0,r4
000cfc  f7fffffe          BL       _InvalidateTextSizeX
;;;1076         _ClearCache(pObj);
000d00  4620              MOV      r0,r4
000d02  f7fffffe          BL       _ClearCache
;;;1077         return 1;
000d06  2001              MOVS     r0,#1
                  |L1.3336|
;;;1078       }
;;;1079     }
;;;1080     return 0;
;;;1081   }
000d08  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3340|
                          DCD      GUI_Context
                  |L1.3344|
000d10  e7ff              B        |L1.3346|
                  |L1.3346|
000d12  bf00              NOP                            ;1079
                  |L1.3348|
000d14  2000              MOVS     r0,#0                 ;1080
000d16  e7f7              B        |L1.3336|
;;;1082   
                          ENDP

                  _MULTIEDIT_Paint PROC
;;;1092   */
;;;1093   static void _MULTIEDIT_Paint(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ * pObj) {
000d18  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000d1c  b08d              SUB      sp,sp,#0x34
000d1e  460c              MOV      r4,r1
;;;1094     int ScrollPosX, ScrollPosY, EffectSize, HBorder;
;;;1095     int x, y, xOff, yOff, ColorIndex, FontSizeY;
;;;1096     GUI_RECT r, rClip;
;;;1097     const GUI_RECT *prOldClip;
;;;1098     /* Init some values */
;;;1099     GUI_SetFont(pObj->pFont);
000d20  6f20              LDR      r0,[r4,#0x70]
000d22  f7fffffe          BL       GUI_SetFont
;;;1100     FontSizeY  = GUI_GetFontDistY();
000d26  f7fffffe          BL       GUI_GetFontDistY
000d2a  4682              MOV      r10,r0
;;;1101     ScrollPosX = pObj->ScrollStateH.v;
000d2c  6ea0              LDR      r0,[r4,#0x68]
000d2e  900c              STR      r0,[sp,#0x30]
;;;1102     ScrollPosY = pObj->ScrollStateV.v;
000d30  6de5              LDR      r5,[r4,#0x5c]
;;;1103     EffectSize = pObj->Widget.pEffect->EffectSize;
000d32  6a20              LDR      r0,[r4,#0x20]
000d34  6946              LDR      r6,[r0,#0x14]
;;;1104     HBorder    = pObj->HBorder;
000d36  f8949077          LDRB     r9,[r4,#0x77]
;;;1105     xOff       = EffectSize + HBorder - ScrollPosX ;
000d3a  eb060109          ADD      r1,r6,r9
000d3e  980c              LDR      r0,[sp,#0x30]
000d40  eba10b00          SUB      r11,r1,r0
;;;1106     yOff       = EffectSize - ScrollPosY * FontSizeY;
000d44  fb05601a          MLS      r0,r5,r10,r6
000d48  9009              STR      r0,[sp,#0x24]
;;;1107     ColorIndex = ((pObj->Flags & MULTIEDIT_SF_READONLY) ? 1 : 0);
000d4a  f8940074          LDRB     r0,[r4,#0x74]
000d4e  f0000001          AND      r0,r0,#1
000d52  9008              STR      r0,[sp,#0x20]
;;;1108     /* Set colors and draw the background */
;;;1109     LCD_SetBkColor(pObj->aBkColor[ColorIndex]);
000d54  f1040128          ADD      r1,r4,#0x28
000d58  9a08              LDR      r2,[sp,#0x20]
000d5a  f8510022          LDR      r0,[r1,r2,LSL #2]
000d5e  f7fffffe          BL       LCD_SetBkColor
;;;1110     LCD_SetColor(pObj->aColor[ColorIndex]);
000d62  f1040130          ADD      r1,r4,#0x30
000d66  9a08              LDR      r2,[sp,#0x20]
000d68  f8510022          LDR      r0,[r1,r2,LSL #2]
000d6c  f7fffffe          BL       LCD_SetColor
;;;1111     GUI_Clear();
000d70  f7fffffe          BL       GUI_Clear
;;;1112     /* Draw the text if necessary */
;;;1113     rClip.x0 = EffectSize + HBorder;
000d74  eb060009          ADD      r0,r6,r9
000d78  b200              SXTH     r0,r0
000d7a  f8ad0010          STRH     r0,[sp,#0x10]
;;;1114     rClip.y0 = EffectSize;
000d7e  b230              SXTH     r0,r6
000d80  f8ad0012          STRH     r0,[sp,#0x12]
;;;1115     rClip.x1 = WM_GetWindowSizeX(hObj) - EffectSize - HBorder - 1;
000d84  980d              LDR      r0,[sp,#0x34]
000d86  f7fffffe          BL       WM_GetWindowSizeX
000d8a  1b80              SUBS     r0,r0,r6
000d8c  eba00009          SUB      r0,r0,r9
000d90  1e40              SUBS     r0,r0,#1
000d92  b200              SXTH     r0,r0
000d94  f8ad0014          STRH     r0,[sp,#0x14]
;;;1116     rClip.y1 = WM_GetWindowSizeY(hObj) - EffectSize - 1;
000d98  980d              LDR      r0,[sp,#0x34]
000d9a  f7fffffe          BL       WM_GetWindowSizeY
000d9e  1b80              SUBS     r0,r0,r6
000da0  1e40              SUBS     r0,r0,#1
000da2  b200              SXTH     r0,r0
000da4  f8ad0016          STRH     r0,[sp,#0x16]
;;;1117     prOldClip = WM_SetUserClipRect(&rClip);
000da8  a804              ADD      r0,sp,#0x10
000daa  f7fffffe          BL       WM_SetUserClipRect
000dae  9003              STR      r0,[sp,#0xc]
;;;1118     if (pObj->hText) {
000db0  8f20              LDRH     r0,[r4,#0x38]
000db2  2800              CMP      r0,#0
000db4  d066              BEQ      |L1.3716|
;;;1119       const char* pText;
;;;1120       int Line = 0;
000db6  f04f0800          MOV      r8,#0
;;;1121       int xSize       = _GetXSize(hObj, pObj);
000dba  4621              MOV      r1,r4
000dbc  980d              LDR      r0,[sp,#0x34]
000dbe  f7fffffe          BL       _GetXSize
000dc2  9002              STR      r0,[sp,#8]
;;;1122       int NumVisLines = _GetNumVisLines(hObj, pObj);
000dc4  4621              MOV      r1,r4
000dc6  980d              LDR      r0,[sp,#0x34]
000dc8  f7fffffe          BL       _GetNumVisLines
000dcc  9001              STR      r0,[sp,#4]
;;;1123       /* Get the text */
;;;1124       pText = (const char *)GUI_ALLOC_h2p(pObj->hText);
000dce  f9b40038          LDRSH    r0,[r4,#0x38]
000dd2  f7fffffe          BL       GUI_ALLOC_h2p
000dd6  4607              MOV      r7,r0
;;;1125       /* Set the rectangle for drawing */
;;;1126       r.x0 = xOff;
000dd8  fa0ff08b          SXTH     r0,r11
000ddc  f8ad0018          STRH     r0,[sp,#0x18]
;;;1127       r.y0 = EffectSize;
000de0  b230              SXTH     r0,r6
000de2  f8ad001a          STRH     r0,[sp,#0x1a]
;;;1128       r.x1 = xSize + EffectSize + HBorder - 1;
000de6  9802              LDR      r0,[sp,#8]
000de8  4430              ADD      r0,r0,r6
000dea  4448              ADD      r0,r0,r9
000dec  1e40              SUBS     r0,r0,#1
000dee  b200              SXTH     r0,r0
000df0  f8ad001c          STRH     r0,[sp,#0x1c]
;;;1129       r.y1 = pObj->Widget.Win.Rect.y1 - pObj->Widget.Win.Rect.y0 + 1;
000df4  88e0              LDRH     r0,[r4,#6]
000df6  8861              LDRH     r1,[r4,#2]
000df8  1a40              SUBS     r0,r0,r1
000dfa  1c40              ADDS     r0,r0,#1
000dfc  b200              SXTH     r0,r0
000dfe  f8ad001e          STRH     r0,[sp,#0x1e]
;;;1130       /* Use cached position of first visible byte if possible */
;;;1131       if (ScrollPosY >= pObj->CacheFirstVisibleLine) {
000e02  f8b40054          LDRH     r0,[r4,#0x54]
000e06  42a8              CMP      r0,r5
000e08  dc07              BGT      |L1.3610|
;;;1132         if (pObj->CacheFirstVisibleByte) {
000e0a  f8b40056          LDRH     r0,[r4,#0x56]
000e0e  b120              CBZ      r0,|L1.3610|
;;;1133           pText += pObj->CacheFirstVisibleByte;
000e10  f8b40056          LDRH     r0,[r4,#0x56]
000e14  4407              ADD      r7,r7,r0
;;;1134           Line   = pObj->CacheFirstVisibleLine;
000e16  f8b48054          LDRH     r8,[r4,#0x54]
                  |L1.3610|
;;;1135         }
;;;1136       }
;;;1137       /* Do the drawing of the text */
;;;1138       do {
000e1a  bf00              NOP      
                  |L1.3612|
;;;1139         /* Cache the position of the first visible byte and the depending line number */
;;;1140         if (pObj->CacheFirstVisibleLine != ScrollPosY) {
000e1c  f8b40054          LDRH     r0,[r4,#0x54]
000e20  42a8              CMP      r0,r5
000e22  d00a              BEQ      |L1.3642|
;;;1141           if (Line == ScrollPosY) {
000e24  45a8              CMP      r8,r5
000e26  d108              BNE      |L1.3642|
;;;1142             pObj->CacheFirstVisibleByte = pText - (const char *)GUI_ALLOC_h2p(pObj->hText);
000e28  f9b40038          LDRSH    r0,[r4,#0x38]
000e2c  f7fffffe          BL       GUI_ALLOC_h2p
000e30  1a38              SUBS     r0,r7,r0
000e32  f8a40056          STRH     r0,[r4,#0x56]
;;;1143             pObj->CacheFirstVisibleLine = ScrollPosY;
000e36  f8a45054          STRH     r5,[r4,#0x54]
                  |L1.3642|
;;;1144           }
;;;1145         }
;;;1146         /* Draw it */
;;;1147         if ((Line >= ScrollPosY) && ((Line - ScrollPosY) <= NumVisLines)) {
000e3a  45a8              CMP      r8,r5
000e3c  db10              BLT      |L1.3680|
000e3e  eba80105          SUB      r1,r8,r5
000e42  9801              LDR      r0,[sp,#4]
000e44  4281              CMP      r1,r0
000e46  dc0b              BGT      |L1.3680|
;;;1148           _DispString(hObj, pObj, pText, &r);
000e48  ab06              ADD      r3,sp,#0x18
000e4a  463a              MOV      r2,r7
000e4c  4621              MOV      r1,r4
000e4e  980d              LDR      r0,[sp,#0x34]
000e50  f7fffffe          BL       _DispString
;;;1149           r.y0 += FontSizeY;  /* Next line */
000e54  f8bd001a          LDRH     r0,[sp,#0x1a]
000e58  4450              ADD      r0,r0,r10
000e5a  b200              SXTH     r0,r0
000e5c  f8ad001a          STRH     r0,[sp,#0x1a]
                  |L1.3680|
;;;1150         }
;;;1151         pText += _WrapGetNumBytesToNextLine(hObj, pObj, pText);
000e60  463a              MOV      r2,r7
000e62  4621              MOV      r1,r4
000e64  980d              LDR      r0,[sp,#0x34]
000e66  f7fffffe          BL       _WrapGetNumBytesToNextLine
000e6a  4407              ADD      r7,r7,r0
;;;1152         Line++;
000e6c  f1080801          ADD      r8,r8,#1
;;;1153       } while (GUI_UC_GetCharCode(pText) && ((Line - ScrollPosY) <= NumVisLines));
000e70  4638              MOV      r0,r7
000e72  f7fffffe          BL       GUI_UC_GetCharCode
000e76  b120              CBZ      r0,|L1.3714|
000e78  eba80105          SUB      r1,r8,r5
000e7c  9801              LDR      r0,[sp,#4]
000e7e  4281              CMP      r1,r0
000e80  ddcc              BLE      |L1.3612|
                  |L1.3714|
;;;1154     }
000e82  bf00              NOP      
                  |L1.3716|
;;;1155     /* Draw cursor if necessary */
;;;1156     if (WM_HasFocus(hObj)) {
000e84  980d              LDR      r0,[sp,#0x34]
000e86  f7fffffe          BL       WM_HasFocus
000e8a  b360              CBZ      r0,|L1.3814|
;;;1157       _GetCursorXY(hObj, pObj, &x, &y);
000e8c  ab0a              ADD      r3,sp,#0x28
000e8e  aa0b              ADD      r2,sp,#0x2c
000e90  4621              MOV      r1,r4
000e92  980d              LDR      r0,[sp,#0x34]
000e94  f7fffffe          BL       _GetCursorXY
;;;1158       r.x0 = x + xOff;
000e98  980b              LDR      r0,[sp,#0x2c]
000e9a  4458              ADD      r0,r0,r11
000e9c  b200              SXTH     r0,r0
000e9e  f8ad0018          STRH     r0,[sp,#0x18]
;;;1159       r.y0 = y + yOff;
000ea2  e9dd0109          LDRD     r0,r1,[sp,#0x24]
000ea6  4408              ADD      r0,r0,r1
000ea8  b200              SXTH     r0,r0
000eaa  f8ad001a          STRH     r0,[sp,#0x1a]
;;;1160       r.x1 = r.x0 + _GetCursorSizeX(hObj, pObj) - 1;
000eae  4621              MOV      r1,r4
000eb0  980d              LDR      r0,[sp,#0x34]
000eb2  f7fffffe          BL       _GetCursorSizeX
000eb6  f8bd1018          LDRH     r1,[sp,#0x18]
000eba  4408              ADD      r0,r0,r1
000ebc  1e40              SUBS     r0,r0,#1
000ebe  b200              SXTH     r0,r0
000ec0  f8ad001c          STRH     r0,[sp,#0x1c]
;;;1161       r.y1 = r.y0 + FontSizeY - 1;
000ec4  f8bd001a          LDRH     r0,[sp,#0x1a]
000ec8  4450              ADD      r0,r0,r10
000eca  1e40              SUBS     r0,r0,#1
000ecc  b200              SXTH     r0,r0
000ece  f8ad001e          STRH     r0,[sp,#0x1e]
;;;1162       GUI_InvertRect(r.x0, r.y0, r.x1, r.y1);
000ed2  f9bd301e          LDRSH    r3,[sp,#0x1e]
000ed6  f9bd201c          LDRSH    r2,[sp,#0x1c]
000eda  f9bd101a          LDRSH    r1,[sp,#0x1a]
000ede  f9bd0018          LDRSH    r0,[sp,#0x18]
000ee2  f7fffffe          BL       GUI_InvertRect
                  |L1.3814|
;;;1163     }
;;;1164     WM_SetUserClipRect(prOldClip);
000ee6  9803              LDR      r0,[sp,#0xc]
000ee8  f7fffffe          BL       WM_SetUserClipRect
;;;1165     /* Draw the 3D effect (if configured) */
;;;1166     WIDGET__EFFECT_DrawDown(&pObj->Widget);
000eec  4620              MOV      r0,r4
000eee  f7fffffe          BL       WIDGET__EFFECT_DrawDown
;;;1167   }
000ef2  b00f              ADD      sp,sp,#0x3c
000ef4  e8bd8ff0          POP      {r4-r11,pc}
;;;1168   
                          ENDP

                  _OnTouch PROC
;;;1172   */
;;;1173   static void _OnTouch(MULTIEDIT_HANDLE hObj, MULTIEDIT_OBJ* pObj, WM_MESSAGE*pMsg) {
000ef8  e92d5ff0          PUSH     {r4-r12,lr}
000efc  4681              MOV      r9,r0
000efe  460c              MOV      r4,r1
000f00  4616              MOV      r6,r2
;;;1174     int Notification;
;;;1175     const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000f02  68b7              LDR      r7,[r6,#8]
;;;1176     if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
000f04  68b0              LDR      r0,[r6,#8]
000f06  b318              CBZ      r0,|L1.3920|
;;;1177       if (pState->Pressed) {
000f08  7a38              LDRB     r0,[r7,#8]
000f0a  b1f8              CBZ      r0,|L1.3916|
;;;1178         int Effect, xPos, yPos;
;;;1179         Effect = pObj->Widget.pEffect->EffectSize;
000f0c  6a20              LDR      r0,[r4,#0x20]
000f0e  f8d08014          LDR      r8,[r0,#0x14]
;;;1180         xPos   = pState->x + pObj->ScrollStateH.v - Effect - pObj->HBorder;
000f12  6839              LDR      r1,[r7,#0]
000f14  6ea0              LDR      r0,[r4,#0x68]
000f16  4408              ADD      r0,r0,r1
000f18  eba00008          SUB      r0,r0,r8
000f1c  f8941077          LDRB     r1,[r4,#0x77]
000f20  eba00a01          SUB      r10,r0,r1
;;;1181         yPos   = pState->y + pObj->ScrollStateV.v * GUI_GetYDistOfFont(pObj->pFont) - Effect;
000f24  6f20              LDR      r0,[r4,#0x70]
000f26  f7fffffe          BL       GUI_GetYDistOfFont
000f2a  687a              LDR      r2,[r7,#4]
000f2c  6de1              LDR      r1,[r4,#0x5c]
000f2e  fb012000          MLA      r0,r1,r0,r2
000f32  eba00b08          SUB      r11,r0,r8
;;;1182         _SetCursorXY(hObj, pObj, xPos, yPos);
000f36  465b              MOV      r3,r11
000f38  4652              MOV      r2,r10
000f3a  4621              MOV      r1,r4
000f3c  4648              MOV      r0,r9
000f3e  f7fffffe          BL       _SetCursorXY
;;;1183         _Invalidate(hObj);
000f42  4648              MOV      r0,r9
000f44  f7fffffe          BL       _Invalidate
;;;1184         Notification = WM_NOTIFICATION_CLICKED;
000f48  2501              MOVS     r5,#1
;;;1185       } else {
000f4a  e002              B        |L1.3922|
                  |L1.3916|
;;;1186         Notification = WM_NOTIFICATION_RELEASED;
000f4c  2502              MOVS     r5,#2
000f4e  e000              B        |L1.3922|
                  |L1.3920|
;;;1187       }
;;;1188     } else {
;;;1189       Notification = WM_NOTIFICATION_MOVED_OUT;
000f50  2503              MOVS     r5,#3
                  |L1.3922|
;;;1190     }
;;;1191     WM_NotifyParent(hObj, Notification);
000f52  4629              MOV      r1,r5
000f54  4648              MOV      r0,r9
000f56  f7fffffe          BL       WM_NotifyParent
;;;1192   }
000f5a  e8bd9ff0          POP      {r4-r12,pc}
;;;1193   
                          ENDP

                  _AddKey PROC
;;;1200   */
;;;1201   static int _AddKey(MULTIEDIT_HANDLE hObj, U16 Key) {
000f5e  e92d41f0          PUSH     {r4-r8,lr}
000f62  4606              MOV      r6,r0
000f64  460d              MOV      r5,r1
;;;1202     int r = 0;               /* Key has not been consumed */
000f66  2700              MOVS     r7,#0
;;;1203     MULTIEDIT_OBJ* pObj;
;;;1204     pObj = MULTIEDIT_H2P(hObj);
000f68  4630              MOV      r0,r6
000f6a  f7fffffe          BL       GUI_ALLOC_h2p
000f6e  4604              MOV      r4,r0
;;;1205     switch (Key) {
000f70  4628              MOV      r0,r5
000f72  2d13              CMP      r5,#0x13
000f74  d01c              BEQ      |L1.4016|
000f76  dc0c              BGT      |L1.3986|
000f78  2810              CMP      r0,#0x10
000f7a  d028              BEQ      |L1.4046|
000f7c  dc04              BGT      |L1.3976|
000f7e  2808              CMP      r0,#8
000f80  d03a              BEQ      |L1.4088|
000f82  280d              CMP      r0,#0xd
                  |L1.3972|
000f84  d178              BNE      |L1.4216|
000f86  e06d              B        |L1.4196|
                  |L1.3976|
000f88  2811              CMP      r0,#0x11
000f8a  d00b              BEQ      |L1.4004|
000f8c  2812              CMP      r0,#0x12
000f8e  d1f9              BNE      |L1.3972|
000f90  e014              B        |L1.4028|
                  |L1.3986|
000f92  3817              SUBS     r0,r0,#0x17
000f94  2808              CMP      r0,#8
000f96  d26f              BCS      |L1.4216|
000f98  e8dff000          TBB      [pc,r0]
000f9c  28228989          DCB      0x28,0x22,0x89,0x89
000fa0  88895045          DCB      0x88,0x89,0x50,0x45
                  |L1.4004|
;;;1206     case GUI_KEY_UP:
;;;1207       _MoveCursorUp(hObj, pObj);
000fa4  4621              MOV      r1,r4
000fa6  4630              MOV      r0,r6
000fa8  f7fffffe          BL       _MoveCursorUp
;;;1208       r = 1;               /* Key has been consumed */
000fac  2701              MOVS     r7,#1
;;;1209       break;
000fae  e09d              B        |L1.4332|
                  |L1.4016|
;;;1210     case GUI_KEY_DOWN:
;;;1211       _MoveCursorDown(hObj, pObj);
000fb0  4621              MOV      r1,r4
000fb2  4630              MOV      r0,r6
000fb4  f7fffffe          BL       _MoveCursorDown
;;;1212       r = 1;               /* Key has been consumed */
000fb8  2701              MOVS     r7,#1
;;;1213       break;
000fba  e097              B        |L1.4332|
                  |L1.4028|
;;;1214     case GUI_KEY_RIGHT:
;;;1215       _SetCursorPos(hObj, pObj, pObj->CursorPosChar + 1);
000fbc  f8b40048          LDRH     r0,[r4,#0x48]
000fc0  1c42              ADDS     r2,r0,#1
000fc2  4621              MOV      r1,r4
000fc4  4630              MOV      r0,r6
000fc6  f7fffffe          BL       _SetCursorPos
;;;1216       r = 1;               /* Key has been consumed */
000fca  2701              MOVS     r7,#1
;;;1217       break;
000fcc  e08e              B        |L1.4332|
                  |L1.4046|
;;;1218     case GUI_KEY_LEFT:
;;;1219       _SetCursorPos(hObj, pObj, pObj->CursorPosChar - 1);
000fce  f8b40048          LDRH     r0,[r4,#0x48]
000fd2  1e42              SUBS     r2,r0,#1
000fd4  4621              MOV      r1,r4
000fd6  4630              MOV      r0,r6
000fd8  f7fffffe          BL       _SetCursorPos
;;;1220       r = 1;               /* Key has been consumed */
000fdc  2701              MOVS     r7,#1
;;;1221       break;
000fde  e085              B        |L1.4332|
;;;1222     case GUI_KEY_END:
;;;1223       _MoveCursor2LineEnd(hObj, pObj);
000fe0  4621              MOV      r1,r4
000fe2  4630              MOV      r0,r6
000fe4  f7fffffe          BL       _MoveCursor2LineEnd
;;;1224       r = 1;               /* Key has been consumed */
000fe8  2701              MOVS     r7,#1
;;;1225       break;
000fea  e07f              B        |L1.4332|
;;;1226     case GUI_KEY_HOME:
;;;1227       _MoveCursor2LinePos1(hObj, pObj);
000fec  4621              MOV      r1,r4
000fee  4630              MOV      r0,r6
000ff0  f7fffffe          BL       _MoveCursor2LinePos1
;;;1228       r = 1;               /* Key has been consumed */
000ff4  2701              MOVS     r7,#1
;;;1229       break;
000ff6  e079              B        |L1.4332|
                  |L1.4088|
;;;1230     case GUI_KEY_BACKSPACE:
;;;1231       if (!(pObj->Flags & MULTIEDIT_SF_READONLY)) {
000ff8  f8940074          LDRB     r0,[r4,#0x74]
000ffc  f0100f01          TST      r0,#1
001000  d110              BNE      |L1.4132|
;;;1232         if (pObj->CursorPosChar > pObj->NumCharsPrompt) {
001002  f8b40048          LDRH     r0,[r4,#0x48]
001006  8fe1              LDRH     r1,[r4,#0x3e]
001008  4288              CMP      r0,r1
00100a  dd0a              BLE      |L1.4130|
;;;1233           _SetCursorPos(hObj, pObj, pObj->CursorPosChar - 1);
00100c  f8b40048          LDRH     r0,[r4,#0x48]
001010  1e42              SUBS     r2,r0,#1
001012  4621              MOV      r1,r4
001014  4630              MOV      r0,r6
001016  f7fffffe          BL       _SetCursorPos
;;;1234           _DeleteChar(hObj, pObj);
00101a  4621              MOV      r1,r4
00101c  4630              MOV      r0,r6
00101e  f7fffffe          BL       _DeleteChar
                  |L1.4130|
;;;1235         }
;;;1236         r = 1;               /* Key has been consumed */
001022  2701              MOVS     r7,#1
                  |L1.4132|
;;;1237       }
;;;1238       break;
001024  e062              B        |L1.4332|
;;;1239     case GUI_KEY_DELETE:
;;;1240       if (!(pObj->Flags & MULTIEDIT_SF_READONLY)) {
001026  f8940074          LDRB     r0,[r4,#0x74]
00102a  f0100f01          TST      r0,#1
00102e  d104              BNE      |L1.4154|
;;;1241         _DeleteChar(hObj, pObj);
001030  4621              MOV      r1,r4
001032  4630              MOV      r0,r6
001034  f7fffffe          BL       _DeleteChar
;;;1242         r = 1;               /* Key has been consumed */
001038  2701              MOVS     r7,#1
                  |L1.4154|
;;;1243       }
;;;1244       break;
00103a  e057              B        |L1.4332|
;;;1245     case GUI_KEY_INSERT:
;;;1246       if (!(pObj->Flags & MULTIEDIT_CF_INSERT)) {
00103c  f8940074          LDRB     r0,[r4,#0x74]
001040  f0100f04          TST      r0,#4
001044  d106              BNE      |L1.4180|
;;;1247         pObj->Flags |= MULTIEDIT_CF_INSERT;
001046  f8940074          LDRB     r0,[r4,#0x74]
00104a  f0400004          ORR      r0,r0,#4
00104e  f8840074          STRB     r0,[r4,#0x74]
001052  e005              B        |L1.4192|
                  |L1.4180|
;;;1248       } else {
;;;1249         pObj->Flags &= ~MULTIEDIT_CF_INSERT;
001054  f8940074          LDRB     r0,[r4,#0x74]
001058  f0200004          BIC      r0,r0,#4
00105c  f8840074          STRB     r0,[r4,#0x74]
                  |L1.4192|
;;;1250       }
;;;1251       r = 1;               /* Key has been consumed */
001060  2701              MOVS     r7,#1
;;;1252       break;
001062  e043              B        |L1.4332|
                  |L1.4196|
;;;1253     case GUI_KEY_ENTER:
;;;1254       if (pObj->Flags & MULTIEDIT_SF_READONLY) {
001064  f8940074          LDRB     r0,[r4,#0x74]
001068  f0100f01          TST      r0,#1
00106c  d005              BEQ      |L1.4218|
;;;1255         _MoveCursor2NextLine(hObj, pObj);
00106e  4621              MOV      r1,r4
001070  4630              MOV      r0,r6
001072  f7fffffe          BL       _MoveCursor2NextLine
001076  e017              B        |L1.4264|
                  |L1.4216|
001078  e019              B        |L1.4270|
                  |L1.4218|
;;;1256       } else {
;;;1257         if (_InsertChar(hObj, pObj, (U8)('\n'))) {
00107a  220a              MOVS     r2,#0xa
00107c  4621              MOV      r1,r4
00107e  4630              MOV      r0,r6
001080  f7fffffe          BL       _InsertChar
001084  b180              CBZ      r0,|L1.4264|
;;;1258           if (pObj->Flags & MULTIEDIT_SF_PASSWORD) {
001086  f8940074          LDRB     r0,[r4,#0x74]
00108a  f0100f20          TST      r0,#0x20
00108e  d007              BEQ      |L1.4256|
;;;1259             _SetCursorPos(hObj, pObj, pObj->CursorPosChar + 1);
001090  f8b40048          LDRH     r0,[r4,#0x48]
001094  1c42              ADDS     r2,r0,#1
001096  4621              MOV      r1,r4
001098  4630              MOV      r0,r6
00109a  f7fffffe          BL       _SetCursorPos
00109e  e003              B        |L1.4264|
                  |L1.4256|
;;;1260           } else {
;;;1261             _MoveCursor2NextLine(hObj, pObj);
0010a0  4621              MOV      r1,r4
0010a2  4630              MOV      r0,r6
0010a4  f7fffffe          BL       _MoveCursor2NextLine
                  |L1.4264|
;;;1262           }
;;;1263         }
;;;1264       }
;;;1265       r = 1;               /* Key has been consumed */
0010a8  2701              MOVS     r7,#1
;;;1266       break;
0010aa  e01f              B        |L1.4332|
;;;1267     case GUI_KEY_ESCAPE:
;;;1268       break;
0010ac  e01e              B        |L1.4332|
                  |L1.4270|
;;;1269     default:
;;;1270       if (!(pObj->Flags & MULTIEDIT_SF_READONLY) && (Key >= 0x20)) {
0010ae  f8940074          LDRB     r0,[r4,#0x74]
0010b2  f0100f01          TST      r0,#1
0010b6  d118              BNE      |L1.4330|
0010b8  2d20              CMP      r5,#0x20
0010ba  db16              BLT      |L1.4330|
;;;1271         if (_IsOverwriteAtThisChar(hObj, pObj)) {
0010bc  4621              MOV      r1,r4
0010be  4630              MOV      r0,r6
0010c0  f7fffffe          BL       _IsOverwriteAtThisChar
0010c4  b118              CBZ      r0,|L1.4302|
;;;1272           _DeleteChar(hObj, pObj);
0010c6  4621              MOV      r1,r4
0010c8  4630              MOV      r0,r6
0010ca  f7fffffe          BL       _DeleteChar
                  |L1.4302|
;;;1273         }
;;;1274         if (_InsertChar(hObj, pObj, Key)) {
0010ce  462a              MOV      r2,r5
0010d0  4621              MOV      r1,r4
0010d2  4630              MOV      r0,r6
0010d4  f7fffffe          BL       _InsertChar
0010d8  b130              CBZ      r0,|L1.4328|
;;;1275           _SetCursorPos(hObj, pObj, pObj->CursorPosChar + 1);
0010da  f8b40048          LDRH     r0,[r4,#0x48]
0010de  1c42              ADDS     r2,r0,#1
0010e0  4621              MOV      r1,r4
0010e2  4630              MOV      r0,r6
0010e4  f7fffffe          BL       _SetCursorPos
                  |L1.4328|
;;;1276         }
;;;1277         r = 1;               /* Key has been consumed */
0010e8  2701              MOVS     r7,#1
                  |L1.4330|
0010ea  bf00              NOP                            ;1205
                  |L1.4332|
0010ec  bf00              NOP                            ;1209
;;;1278       }
;;;1279     }
;;;1280     _InvalidateTextArea(hObj);
0010ee  4630              MOV      r0,r6
0010f0  f7fffffe          BL       _InvalidateTextArea
;;;1281     return r;
0010f4  4638              MOV      r0,r7
;;;1282   }
0010f6  e8bd81f0          POP      {r4-r8,pc}
;;;1283   
                          ENDP

                  _MULTIEDIT_Callback PROC
;;;1287   */
;;;1288   static void _MULTIEDIT_Callback (WM_MESSAGE *pMsg) {
0010fa  b5fe              PUSH     {r1-r7,lr}
0010fc  4604              MOV      r4,r0
;;;1289     MULTIEDIT_HANDLE hObj;
;;;1290     MULTIEDIT_OBJ* pObj;
;;;1291     WM_SCROLL_STATE ScrollState;
;;;1292     hObj = pMsg->hWin;
0010fe  f9b46004          LDRSH    r6,[r4,#4]
;;;1293     /* Let widget handle the standard messages */
;;;1294     if (WIDGET_HandleActive(hObj, pMsg) == 0) {
001102  4621              MOV      r1,r4
001104  4630              MOV      r0,r6
001106  f7fffffe          BL       WIDGET_HandleActive
00110a  b900              CBNZ     r0,|L1.4366|
                  |L1.4364|
;;;1295       return;
;;;1296     }
;;;1297     pObj = MULTIEDIT_H2P(hObj);
;;;1298     switch (pMsg->MsgId) {
;;;1299     case WM_NOTIFY_CLIENTCHANGE:
;;;1300       _InvalidateCursorXY(pObj);
;;;1301       _InvalidateNumLines(pObj);
;;;1302       _InvalidateTextSizeX(pObj);
;;;1303       _ClearCache(pObj);
;;;1304       _CalcScrollParas(hObj);
;;;1305       break;
;;;1306     case WM_SIZE:
;;;1307       _InvalidateCursorXY(pObj);
;;;1308       _InvalidateNumLines(pObj);
;;;1309       _InvalidateTextSizeX(pObj);
;;;1310       _ClearCache(pObj);
;;;1311       _Invalidate(hObj);
;;;1312       break;
;;;1313     case WM_NOTIFY_PARENT:
;;;1314       switch (pMsg->Data.v) {
;;;1315       case WM_NOTIFICATION_VALUE_CHANGED:
;;;1316         if (pMsg->hWinSrc  == WM_GetScrollbarV(hObj)) {
;;;1317           WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
;;;1318           pObj->ScrollStateV.v = ScrollState.v;
;;;1319           WM_InvalidateWindow(hObj);
;;;1320           WM_NotifyParent(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
;;;1321         } else if (pMsg->hWinSrc == WM_GetScrollbarH(hObj)) {
;;;1322           WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
;;;1323           pObj->ScrollStateH.v = ScrollState.v;
;;;1324           WM_InvalidateWindow(hObj);
;;;1325           WM_NotifyParent(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
;;;1326         }
;;;1327         break;
;;;1328       case WM_NOTIFICATION_SCROLLBAR_ADDED:
;;;1329         _SetScrollState(hObj);
;;;1330         break;
;;;1331       }
;;;1332       break;
;;;1333     case WM_PAINT:
;;;1334       _MULTIEDIT_Paint(hObj, pObj);
;;;1335       return;
;;;1336     case WM_TOUCH:
;;;1337       _OnTouch(hObj, pObj, pMsg);
;;;1338       break;
;;;1339     case WM_DELETE:
;;;1340       GUI_ALLOC_FreePtr(&pObj->hText);
;;;1341       break;
;;;1342     case WM_KEY:
;;;1343       if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt >0) {
;;;1344         int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;1345         /* Leave code for test purpose
;;;1346         switch (Key) {
;;;1347         case '1': Key = GUI_KEY_LEFT;  break;
;;;1348         case '2': Key = GUI_KEY_UP;    break;
;;;1349         case '3': Key = GUI_KEY_RIGHT; break;
;;;1350         case '4': Key = GUI_KEY_DOWN;  break;
;;;1351         }
;;;1352         */
;;;1353         if (_AddKey(hObj, Key)) {
;;;1354           return;
;;;1355         }
;;;1356       } else {
;;;1357         if (!(pObj->Flags & MULTIEDIT_SF_READONLY)) {
;;;1358           return;                /* Key release is consumed (not sent to parent) */
;;;1359         }
;;;1360       }
;;;1361     }
;;;1362     WM_DefaultProc(pMsg);
;;;1363   }
00110c  bdfe              POP      {r1-r7,pc}
                  |L1.4366|
00110e  4630              MOV      r0,r6                 ;1297
001110  f7fffffe          BL       GUI_ALLOC_h2p
001114  4605              MOV      r5,r0                 ;1297
001116  6820              LDR      r0,[r4,#0]            ;1298
001118  280e              CMP      r0,#0xe               ;1298
00111a  d078              BEQ      |L1.4622|
00111c  dc06              BGT      |L1.4396|
00111e  2805              CMP      r0,#5                 ;1298
001120  d01b              BEQ      |L1.4442|
001122  280b              CMP      r0,#0xb               ;1298
001124  d06e              BEQ      |L1.4612|
001126  280c              CMP      r0,#0xc               ;1298
001128  d116              BNE      |L1.4440|
00112a  e063              B        |L1.4596|
                  |L1.4396|
00112c  280f              CMP      r0,#0xf               ;1298
00112e  d05c              BEQ      |L1.4586|
001130  2825              CMP      r0,#0x25              ;1298
001132  d002              BEQ      |L1.4410|
001134  2826              CMP      r0,#0x26              ;1298
001136  d17e              BNE      |L1.4662|
001138  e01f              B        |L1.4474|
                  |L1.4410|
00113a  4628              MOV      r0,r5                 ;1300
00113c  f7fffffe          BL       _InvalidateCursorXY
001140  4628              MOV      r0,r5                 ;1301
001142  f7fffffe          BL       _InvalidateNumLines
001146  4628              MOV      r0,r5                 ;1302
001148  f7fffffe          BL       _InvalidateTextSizeX
00114c  4628              MOV      r0,r5                 ;1303
00114e  f7fffffe          BL       _ClearCache
001152  4630              MOV      r0,r6                 ;1304
001154  f7fffffe          BL       _CalcScrollParas
                  |L1.4440|
001158  e06d              B        |L1.4662|
                  |L1.4442|
00115a  4628              MOV      r0,r5                 ;1307
00115c  f7fffffe          BL       _InvalidateCursorXY
001160  4628              MOV      r0,r5                 ;1308
001162  f7fffffe          BL       _InvalidateNumLines
001166  4628              MOV      r0,r5                 ;1309
001168  f7fffffe          BL       _InvalidateTextSizeX
00116c  4628              MOV      r0,r5                 ;1310
00116e  f7fffffe          BL       _ClearCache
001172  4630              MOV      r0,r6                 ;1311
001174  f7fffffe          BL       _Invalidate
001178  e05d              B        |L1.4662|
                  |L1.4474|
00117a  68a0              LDR      r0,[r4,#8]            ;1314
00117c  2805              CMP      r0,#5                 ;1314
00117e  d002              BEQ      |L1.4486|
001180  2806              CMP      r0,#6                 ;1314
001182  d130              BNE      |L1.4582|
001184  e02b              B        |L1.4574|
                  |L1.4486|
001186  4630              MOV      r0,r6                 ;1316
001188  f7fffffe          BL       WM_GetScrollbarV
00118c  f9b41006          LDRSH    r1,[r4,#6]            ;1316
001190  4288              CMP      r0,r1                 ;1316
001192  d10e              BNE      |L1.4530|
001194  f9b40006          LDRSH    r0,[r4,#6]            ;1317
001198  4669              MOV      r1,sp                 ;1317
00119a  f7fffffe          BL       WM_GetScrollState
00119e  9901              LDR      r1,[sp,#4]            ;1318
0011a0  65e9              STR      r1,[r5,#0x5c]         ;1318
0011a2  4630              MOV      r0,r6                 ;1319
0011a4  f7fffffe          BL       WM_InvalidateWindow
0011a8  210a              MOVS     r1,#0xa               ;1320
0011aa  4630              MOV      r0,r6                 ;1320
0011ac  f7fffffe          BL       WM_NotifyParent
0011b0  e014              B        |L1.4572|
                  |L1.4530|
0011b2  4630              MOV      r0,r6                 ;1321
0011b4  f7fffffe          BL       WM_GetScrollbarH
0011b8  f9b41006          LDRSH    r1,[r4,#6]            ;1321
0011bc  4288              CMP      r0,r1                 ;1321
0011be  d10d              BNE      |L1.4572|
0011c0  f9b40006          LDRSH    r0,[r4,#6]            ;1322
0011c4  4669              MOV      r1,sp                 ;1322
0011c6  f7fffffe          BL       WM_GetScrollState
0011ca  9901              LDR      r1,[sp,#4]            ;1323
0011cc  66a9              STR      r1,[r5,#0x68]         ;1323
0011ce  4630              MOV      r0,r6                 ;1324
0011d0  f7fffffe          BL       WM_InvalidateWindow
0011d4  210a              MOVS     r1,#0xa               ;1325
0011d6  4630              MOV      r0,r6                 ;1325
0011d8  f7fffffe          BL       WM_NotifyParent
                  |L1.4572|
0011dc  e003              B        |L1.4582|
                  |L1.4574|
0011de  4630              MOV      r0,r6                 ;1329
0011e0  f7fffffe          BL       _SetScrollState
0011e4  bf00              NOP                            ;1330
                  |L1.4582|
0011e6  bf00              NOP                            ;1327
0011e8  e025              B        |L1.4662|
                  |L1.4586|
0011ea  4629              MOV      r1,r5                 ;1334
0011ec  4630              MOV      r0,r6                 ;1334
0011ee  f7fffffe          BL       _MULTIEDIT_Paint
0011f2  e78b              B        |L1.4364|
                  |L1.4596|
0011f4  4622              MOV      r2,r4                 ;1337
0011f6  4629              MOV      r1,r5                 ;1337
0011f8  4630              MOV      r0,r6                 ;1337
0011fa  f7fffffe          BL       _OnTouch
0011fe  e01a              B        |L1.4662|
001200  e005              B        |L1.4622|
001202  e7ff              B        |L1.4612|
                  |L1.4612|
001204  f1050038          ADD      r0,r5,#0x38           ;1340
001208  f7fffffe          BL       GUI_ALLOC_FreePtr
00120c  e013              B        |L1.4662|
                  |L1.4622|
00120e  68a0              LDR      r0,[r4,#8]            ;1343
001210  6840              LDR      r0,[r0,#4]            ;1343
001212  2800              CMP      r0,#0                 ;1343
001214  dd08              BLE      |L1.4648|
001216  68a0              LDR      r0,[r4,#8]            ;1344
001218  6807              LDR      r7,[r0,#0]            ;1344
00121a  b2b9              UXTH     r1,r7                 ;1353
00121c  4630              MOV      r0,r6                 ;1353
00121e  f7fffffe          BL       _AddKey
001222  b100              CBZ      r0,|L1.4646|
001224  e772              B        |L1.4364|
                  |L1.4646|
001226  e005              B        |L1.4660|
                  |L1.4648|
001228  f8950074          LDRB     r0,[r5,#0x74]         ;1357
00122c  f0100f01          TST      r0,#1                 ;1357
001230  d100              BNE      |L1.4660|
001232  e76b              B        |L1.4364|
                  |L1.4660|
001234  bf00              NOP                            ;1298
                  |L1.4662|
001236  bf00              NOP                            ;1305
001238  4620              MOV      r0,r4                 ;1362
00123a  f7fffffe          BL       WM_DefaultProc
00123e  bf00              NOP      
001240  e764              B        |L1.4364|
;;;1364   
                          ENDP

                  MULTIEDIT_SetText PROC
;;;1456   */
;;;1457   void MULTIEDIT_SetText(MULTIEDIT_HANDLE hObj, const char* pNew) {
001242  e92d5ff0          PUSH     {r4-r12,lr}
001246  4607              MOV      r7,r0
001248  460d              MOV      r5,r1
;;;1458     if (hObj) {
00124a  2f00              CMP      r7,#0
00124c  d05b              BEQ      |L1.4870|
;;;1459       MULTIEDIT_OBJ* pObj;
;;;1460       int NumCharsNew = 0, NumCharsOld = 0;
00124e  f04f0800          MOV      r8,#0
001252  46c1              MOV      r9,r8
;;;1461       int NumBytesNew = 0, NumBytesOld = 0;
001254  46c2              MOV      r10,r8
001256  46c3              MOV      r11,r8
;;;1462       char* pText;
;;;1463       WM_LOCK();
001258  f7fffffe          BL       GUI_Lock
;;;1464       pObj = MULTIEDIT_H2P(hObj);
00125c  4638              MOV      r0,r7
00125e  f7fffffe          BL       GUI_ALLOC_h2p
001262  4604              MOV      r4,r0
;;;1465       if (pObj->hText) {
001264  8f20              LDRH     r0,[r4,#0x38]
001266  b190              CBZ      r0,|L1.4750|
;;;1466         pText  = (char*) GUI_ALLOC_h2p(pObj->hText);
001268  f9b40038          LDRSH    r0,[r4,#0x38]
00126c  f7fffffe          BL       GUI_ALLOC_h2p
001270  4606              MOV      r6,r0
;;;1467         pText += GUI_UC__NumChars2NumBytes(pText, pObj->NumCharsPrompt);
001272  8fe1              LDRH     r1,[r4,#0x3e]
001274  4630              MOV      r0,r6
001276  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00127a  4406              ADD      r6,r6,r0
;;;1468         NumCharsOld = GUI__GetNumChars(pText);
00127c  4630              MOV      r0,r6
00127e  f7fffffe          BL       GUI__GetNumChars
001282  4681              MOV      r9,r0
;;;1469         NumBytesOld = GUI_UC__NumChars2NumBytes(pText, NumCharsOld);
001284  4649              MOV      r1,r9
001286  4630              MOV      r0,r6
001288  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00128c  4683              MOV      r11,r0
                  |L1.4750|
;;;1470       }
;;;1471       if (pNew) {
00128e  b145              CBZ      r5,|L1.4770|
;;;1472         NumCharsNew = GUI__GetNumChars(pNew);
001290  4628              MOV      r0,r5
001292  f7fffffe          BL       GUI__GetNumChars
001296  4680              MOV      r8,r0
;;;1473         NumBytesNew = GUI_UC__NumChars2NumBytes(pNew, NumCharsNew);
001298  4641              MOV      r1,r8
00129a  4628              MOV      r0,r5
00129c  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0012a0  4682              MOV      r10,r0
                  |L1.4770|
;;;1474       }
;;;1475       if (_IsCharsAvailable(pObj, NumCharsNew - NumCharsOld)) {
0012a2  eba80109          SUB      r1,r8,r9
0012a6  4620              MOV      r0,r4
0012a8  f7fffffe          BL       _IsCharsAvailable
0012ac  b340              CBZ      r0,|L1.4864|
;;;1476         if (_IsSpaceInBuffer(pObj, NumBytesNew - NumBytesOld)) {
0012ae  ebaa010b          SUB      r1,r10,r11
0012b2  4620              MOV      r0,r4
0012b4  f7fffffe          BL       _IsSpaceInBuffer
0012b8  b310              CBZ      r0,|L1.4864|
;;;1477           pText  = (char*) GUI_ALLOC_h2p(pObj->hText);
0012ba  f9b40038          LDRSH    r0,[r4,#0x38]
0012be  f7fffffe          BL       GUI_ALLOC_h2p
0012c2  4606              MOV      r6,r0
;;;1478           pText += GUI_UC__NumChars2NumBytes(pText, pObj->NumCharsPrompt);
0012c4  8fe1              LDRH     r1,[r4,#0x3e]
0012c6  4630              MOV      r0,r6
0012c8  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0012cc  4406              ADD      r6,r6,r0
;;;1479           if (pNew) {
0012ce  b125              CBZ      r5,|L1.4826|
;;;1480             strcpy(pText, pNew);
0012d0  4629              MOV      r1,r5
0012d2  4630              MOV      r0,r6
0012d4  f7fffffe          BL       strcpy
0012d8  e001              B        |L1.4830|
                  |L1.4826|
;;;1481           } else {
;;;1482             *pText = 0;
0012da  2000              MOVS     r0,#0
0012dc  7030              STRB     r0,[r6,#0]
                  |L1.4830|
;;;1483           }
;;;1484           _SetCursorPos(hObj, pObj, pObj->NumCharsPrompt);
0012de  8fe2              LDRH     r2,[r4,#0x3e]
0012e0  4621              MOV      r1,r4
0012e2  4638              MOV      r0,r7
0012e4  f7fffffe          BL       _SetCursorPos
;;;1485           _InvalidateTextArea(hObj);
0012e8  4638              MOV      r0,r7
0012ea  f7fffffe          BL       _InvalidateTextArea
;;;1486           _InvalidateNumChars(pObj);
0012ee  4620              MOV      r0,r4
0012f0  f7fffffe          BL       _InvalidateNumChars
;;;1487           _InvalidateNumLines(pObj);
0012f4  4620              MOV      r0,r4
0012f6  f7fffffe          BL       _InvalidateNumLines
;;;1488           _InvalidateTextSizeX(pObj);
0012fa  4620              MOV      r0,r4
0012fc  f7fffffe          BL       _InvalidateTextSizeX
                  |L1.4864|
;;;1489         }
;;;1490       }
;;;1491       WM_UNLOCK();
001300  f7fffffe          BL       GUI_Unlock
;;;1492     }
001304  bf00              NOP      
                  |L1.4870|
;;;1493   }
001306  e8bd9ff0          POP      {r4-r12,pc}
;;;1494   
                          ENDP

                  MULTIEDIT_CreateEx PROC
;;;1378   */
;;;1379   MULTIEDIT_HANDLE MULTIEDIT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags,
00130a  e92d5fff          PUSH     {r0-r12,lr}
;;;1380                                       int Id, int BufferSize, const char* pText)
;;;1381   {
00130e  4680              MOV      r8,r0
001310  4689              MOV      r9,r1
001312  4692              MOV      r10,r2
001314  469b              MOV      r11,r3
001316  9e12              LDR      r6,[sp,#0x48]
;;;1382     MULTIEDIT_HANDLE hObj;
;;;1383     /* Create the window */
;;;1384     WM_LOCK();
001318  f7fffffe          BL       GUI_Lock
;;;1385     if ((xsize == 0) && (ysize == 0) && (x0 == 0) && (y0 == 0)) {
00131c  f1ba0f00          CMP      r10,#0
001320  d11b              BNE      |L1.4954|
001322  f1bb0f00          CMP      r11,#0
001326  d118              BNE      |L1.4954|
001328  f1b80f00          CMP      r8,#0
00132c  d115              BNE      |L1.4954|
00132e  f1b90f00          CMP      r9,#0
001332  d112              BNE      |L1.4954|
;;;1386       GUI_RECT Rect;
;;;1387       WM_GetClientRectEx(hParent, &Rect);
001334  a902              ADD      r1,sp,#8
001336  980e              LDR      r0,[sp,#0x38]
001338  f7fffffe          BL       WM_GetClientRectEx
;;;1388       xsize = Rect.x1 - Rect.x0 + 1;
00133c  f9bd000c          LDRSH    r0,[sp,#0xc]
001340  f9bd1008          LDRSH    r1,[sp,#8]
001344  1a40              SUBS     r0,r0,r1
001346  f1000a01          ADD      r10,r0,#1
;;;1389       ysize = Rect.y1 - Rect.y0 + 1;
00134a  f9bd000e          LDRSH    r0,[sp,#0xe]
00134e  f9bd100a          LDRSH    r1,[sp,#0xa]
001352  1a40              SUBS     r0,r0,r1
001354  f1000b01          ADD      r11,r0,#1
;;;1390     }
001358  bf00              NOP      
                  |L1.4954|
;;;1391     hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, &_MULTIEDIT_Callback,
00135a  225c              MOVS     r2,#0x5c
00135c  4bfe              LDR      r3,|L1.5976|
00135e  980f              LDR      r0,[sp,#0x3c]
001360  b280              UXTH     r0,r0
001362  990e              LDR      r1,[sp,#0x38]
001364  e9cd3202          STRD     r3,r2,[sp,#8]
001368  e9cd1000          STRD     r1,r0,[sp,#0]
00136c  465b              MOV      r3,r11
00136e  4652              MOV      r2,r10
001370  4649              MOV      r1,r9
001372  4640              MOV      r0,r8
001374  f7fffffe          BL       WM_CreateWindowAsChild
001378  4607              MOV      r7,r0
;;;1392                                   sizeof(MULTIEDIT_OBJ) - sizeof(WM_Obj));
;;;1393     if (hObj) {
00137a  2f00              CMP      r7,#0
00137c  d04b              BEQ      |L1.5142|
;;;1394       int i;
;;;1395       MULTIEDIT_OBJ* pObj = MULTIEDIT_H2P(hObj);
00137e  4638              MOV      r0,r7
001380  f7fffffe          BL       GUI_ALLOC_h2p
001384  4604              MOV      r4,r0
;;;1396       /* init widget specific variables */
;;;1397       WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
001386  2210              MOVS     r2,#0x10
001388  4620              MOV      r0,r4
00138a  9911              LDR      r1,[sp,#0x44]
00138c  f7fffffe          BL       WIDGET__Init
;;;1398       /* init member variables */
;;;1399       MULTIEDIT_INIT_ID(pObj);
;;;1400       for (i = 0; i < NUM_DISP_MODES; i++) {
001390  2500              MOVS     r5,#0
001392  e00e              B        |L1.5042|
                  |L1.5012|
;;;1401         pObj->aBkColor[i]  = _aDefaultBkColor[i];
001394  48f1              LDR      r0,|L1.5980|
001396  f8501025          LDR      r1,[r0,r5,LSL #2]
00139a  f1040028          ADD      r0,r4,#0x28
00139e  f8401025          STR      r1,[r0,r5,LSL #2]
;;;1402         pObj->aColor[i]    = _aDefaultColor[i];
0013a2  48ef              LDR      r0,|L1.5984|
0013a4  f8501025          LDR      r1,[r0,r5,LSL #2]
0013a8  f1040030          ADD      r0,r4,#0x30
0013ac  f8401025          STR      r1,[r0,r5,LSL #2]
0013b0  1c6d              ADDS     r5,r5,#1              ;1400
                  |L1.5042|
0013b2  2d02              CMP      r5,#2                 ;1400
0013b4  dbee              BLT      |L1.5012|
;;;1403       }
;;;1404       pObj->pFont          = _pDefaultFont;
0013b6  48eb              LDR      r0,|L1.5988|
0013b8  6800              LDR      r0,[r0,#0]  ; _pDefaultFont
0013ba  f1040438          ADD      r4,r4,#0x38
0013be  63a0              STR      r0,[r4,#0x38]
;;;1405       pObj->Flags          = ExFlags;
0013c0  9810              LDR      r0,[sp,#0x40]
0013c2  f884003c          STRB     r0,[r4,#0x3c]
;;;1406       pObj->CursorPosChar  = 0;
0013c6  f04f0000          MOV      r0,#0
0013ca  8220              STRH     r0,[r4,#0x10]
;;;1407       pObj->CursorPosByte  = 0;
0013cc  8260              STRH     r0,[r4,#0x12]
;;;1408       pObj->HBorder        = 1;
0013ce  f04f0001          MOV      r0,#1
0013d2  f884003f          STRB     r0,[r4,#0x3f]
;;;1409       pObj->MaxNumChars    = 0;
0013d6  f04f0000          MOV      r0,#0
0013da  8060              STRH     r0,[r4,#2]
;;;1410       pObj->NumCharsPrompt = 0;
0013dc  80e0              STRH     r0,[r4,#6]
;;;1411       pObj->BufferSize     = 0;
0013de  81a0              STRH     r0,[r4,#0xc]
;;;1412       pObj->hText          = 0;
0013e0  f8240938          STRH     r0,[r4],#-0x38
;;;1413       if (BufferSize > 0) {
0013e4  2e00              CMP      r6,#0
0013e6  dd0e              BLE      |L1.5126|
;;;1414         WM_HWIN hText;
;;;1415         if ((hText = GUI_ALLOC_AllocZero(BufferSize)) != 0) {
0013e8  b230              SXTH     r0,r6
0013ea  f7fffffe          BL       GUI_ALLOC_AllocZero
0013ee  9003              STR      r0,[sp,#0xc]
0013f0  b120              CBZ      r0,|L1.5116|
;;;1416           pObj->BufferSize = BufferSize;
0013f2  f8a46044          STRH     r6,[r4,#0x44]
;;;1417           pObj->hText      = hText;
0013f6  9803              LDR      r0,[sp,#0xc]
0013f8  8720              STRH     r0,[r4,#0x38]
0013fa  e003              B        |L1.5124|
                  |L1.5116|
;;;1418         } else {
;;;1419           GUI_DEBUG_ERROROUT("MULTIEDIT_CreateEx failed to alloc buffer");
;;;1420           WM_DeleteWindow(hObj);
0013fc  4638              MOV      r0,r7
0013fe  f7fffffe          BL       WM_DeleteWindow
;;;1421           hObj = 0;
001402  2700              MOVS     r7,#0
                  |L1.5124|
;;;1422         }
;;;1423       }
001404  bf00              NOP      
                  |L1.5126|
;;;1424       MULTIEDIT_SetText(hObj, pText);
001406  4638              MOV      r0,r7
001408  9913              LDR      r1,[sp,#0x4c]
00140a  f7fffffe          BL       MULTIEDIT_SetText
;;;1425       _ManageScrollers(hObj);
00140e  4638              MOV      r0,r7
001410  f7fffffe          BL       _ManageScrollers
;;;1426     } else {
001414  bf00              NOP      
                  |L1.5142|
;;;1427       GUI_DEBUG_ERROROUT_IF(hObj==0, "MULTIEDIT_CreateEx failed")
;;;1428     }
;;;1429     WM_UNLOCK();
001416  f7fffffe          BL       GUI_Unlock
;;;1430     return hObj;
00141a  4638              MOV      r0,r7
;;;1431   }
00141c  b004              ADD      sp,sp,#0x10
00141e  e8bd9ff0          POP      {r4-r12,pc}
;;;1432   
                          ENDP

                  MULTIEDIT_AddKey PROC
;;;1442   */
;;;1443   int MULTIEDIT_AddKey(MULTIEDIT_HANDLE hObj, U16 Key) {
001422  b570              PUSH     {r4-r6,lr}
001424  4604              MOV      r4,r0
001426  460d              MOV      r5,r1
;;;1444     int r = 0;
001428  2600              MOVS     r6,#0
;;;1445     if (hObj) {
00142a  b144              CBZ      r4,|L1.5182|
;;;1446       WM_LOCK();
00142c  f7fffffe          BL       GUI_Lock
;;;1447       r = _AddKey(hObj, Key);
001430  4629              MOV      r1,r5
001432  4620              MOV      r0,r4
001434  f7fffffe          BL       _AddKey
001438  4606              MOV      r6,r0
;;;1448       WM_UNLOCK();
00143a  f7fffffe          BL       GUI_Unlock
                  |L1.5182|
;;;1449     }
;;;1450     return r;
00143e  4630              MOV      r0,r6
;;;1451   }
001440  bd70              POP      {r4-r6,pc}
;;;1452   
                          ENDP

                  MULTIEDIT_GetText PROC
;;;1498   */
;;;1499   void MULTIEDIT_GetText(MULTIEDIT_HANDLE hObj, char* sDest, int MaxLen) {
001442  e92d47f0          PUSH     {r4-r10,lr}
001446  4681              MOV      r9,r0
001448  460c              MOV      r4,r1
00144a  4615              MOV      r5,r2
;;;1500     if (hObj) {
00144c  f1b90f00          CMP      r9,#0
001450  d024              BEQ      |L1.5276|
;;;1501       MULTIEDIT_OBJ* pObj;
;;;1502       WM_LOCK();
001452  f7fffffe          BL       GUI_Lock
;;;1503       pObj = MULTIEDIT_H2P(hObj);
001456  4648              MOV      r0,r9
001458  f7fffffe          BL       GUI_ALLOC_h2p
00145c  4606              MOV      r6,r0
;;;1504       if (pObj) {
00145e  b1d6              CBZ      r6,|L1.5270|
;;;1505         char* pText;
;;;1506         int Len;
;;;1507         pText  = (char*) GUI_ALLOC_h2p(pObj->hText);
001460  f9b60038          LDRSH    r0,[r6,#0x38]
001464  f7fffffe          BL       GUI_ALLOC_h2p
001468  4607              MOV      r7,r0
;;;1508         pText += GUI_UC__NumChars2NumBytes(pText, pObj->NumCharsPrompt);
00146a  8ff1              LDRH     r1,[r6,#0x3e]
00146c  4638              MOV      r0,r7
00146e  f7fffffe          BL       GUI_UC__NumChars2NumBytes
001472  4407              ADD      r7,r7,r0
;;;1509         Len    = strlen(pText);
001474  4638              MOV      r0,r7
001476  f7fffffe          BL       strlen
00147a  4680              MOV      r8,r0
;;;1510         if (Len > (MaxLen - 1)) {
00147c  1e68              SUBS     r0,r5,#1
00147e  4540              CMP      r0,r8
001480  da00              BGE      |L1.5252|
;;;1511           Len = MaxLen - 1;
001482  4680              MOV      r8,r0
                  |L1.5252|
;;;1512         }
;;;1513         memcpy(sDest, pText, Len);
001484  4642              MOV      r2,r8
001486  4639              MOV      r1,r7
001488  4620              MOV      r0,r4
00148a  f7fffffe          BL       __aeabi_memcpy
;;;1514         *(sDest + Len) = 0;
00148e  2000              MOVS     r0,#0
001490  f8040008          STRB     r0,[r4,r8]
;;;1515       }
001494  bf00              NOP      
                  |L1.5270|
;;;1516       WM_UNLOCK();
001496  f7fffffe          BL       GUI_Unlock
;;;1517     }
00149a  bf00              NOP      
                  |L1.5276|
;;;1518   }
00149c  e8bd87f0          POP      {r4-r10,pc}
;;;1519   
                          ENDP

                  MULTIEDIT_GetPrompt PROC
;;;1523   */
;;;1524   void MULTIEDIT_GetPrompt(MULTIEDIT_HANDLE hObj, char * sDest, int MaxLen) {
0014a0  e92d47f0          PUSH     {r4-r10,lr}
0014a4  4680              MOV      r8,r0
0014a6  460c              MOV      r4,r1
0014a8  4615              MOV      r5,r2
;;;1525     if (hObj) {
0014aa  f1b80f00          CMP      r8,#0
0014ae  d01f              BEQ      |L1.5360|
;;;1526       MULTIEDIT_OBJ * pObj;
;;;1527       WM_LOCK();
0014b0  f7fffffe          BL       GUI_Lock
;;;1528       pObj = MULTIEDIT_H2P(hObj);
0014b4  4640              MOV      r0,r8
0014b6  f7fffffe          BL       GUI_ALLOC_h2p
0014ba  4606              MOV      r6,r0
;;;1529       if (pObj) {
0014bc  b1ae              CBZ      r6,|L1.5354|
;;;1530         char* sSource = (char*)GUI_ALLOC_h2p(pObj->hText);
0014be  f9b60038          LDRSH    r0,[r6,#0x38]
0014c2  f7fffffe          BL       GUI_ALLOC_h2p
0014c6  4681              MOV      r9,r0
;;;1531         int Len = GUI_UC__NumChars2NumBytes(sSource, pObj->NumCharsPrompt);
0014c8  8ff1              LDRH     r1,[r6,#0x3e]
0014ca  4648              MOV      r0,r9
0014cc  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0014d0  4607              MOV      r7,r0
;;;1532         if (Len > (MaxLen - 1)) {
0014d2  1e68              SUBS     r0,r5,#1
0014d4  42b8              CMP      r0,r7
0014d6  da00              BGE      |L1.5338|
;;;1533           Len = MaxLen - 1;
0014d8  1e6f              SUBS     r7,r5,#1
                  |L1.5338|
;;;1534         }
;;;1535         memcpy(sDest, sSource, Len);
0014da  463a              MOV      r2,r7
0014dc  4649              MOV      r1,r9
0014de  4620              MOV      r0,r4
0014e0  f7fffffe          BL       __aeabi_memcpy
;;;1536         *(sDest + Len) = 0;
0014e4  2000              MOVS     r0,#0
0014e6  55e0              STRB     r0,[r4,r7]
;;;1537       }
0014e8  bf00              NOP      
                  |L1.5354|
;;;1538       WM_UNLOCK();
0014ea  f7fffffe          BL       GUI_Unlock
;;;1539     }
0014ee  bf00              NOP      
                  |L1.5360|
;;;1540   }
0014f0  e8bd87f0          POP      {r4-r10,pc}
;;;1541   
                          ENDP

                  MULTIEDIT_SetWrapWord PROC
;;;1545   */
;;;1546   void MULTIEDIT_SetWrapWord(MULTIEDIT_HANDLE hObj) {
0014f4  b510              PUSH     {r4,lr}
0014f6  4604              MOV      r4,r0
;;;1547     _SetWrapMode(hObj, GUI_WRAPMODE_WORD);
0014f8  2101              MOVS     r1,#1
0014fa  4620              MOV      r0,r4
0014fc  f7fffffe          BL       _SetWrapMode
;;;1548   }
001500  bd10              POP      {r4,pc}
;;;1549   
                          ENDP

                  MULTIEDIT_SetWrapChar PROC
;;;1553   */
;;;1554   void MULTIEDIT_SetWrapChar(MULTIEDIT_HANDLE hObj) {
001502  b510              PUSH     {r4,lr}
001504  4604              MOV      r4,r0
;;;1555     _SetWrapMode(hObj, GUI_WRAPMODE_CHAR);
001506  2102              MOVS     r1,#2
001508  4620              MOV      r0,r4
00150a  f7fffffe          BL       _SetWrapMode
;;;1556   }
00150e  bd10              POP      {r4,pc}
;;;1557   
                          ENDP

                  MULTIEDIT_SetWrapNone PROC
;;;1561   */
;;;1562   void MULTIEDIT_SetWrapNone(MULTIEDIT_HANDLE hObj) {
001510  b510              PUSH     {r4,lr}
001512  4604              MOV      r4,r0
;;;1563     _SetWrapMode(hObj, GUI_WRAPMODE_NONE);
001514  2100              MOVS     r1,#0
001516  4620              MOV      r0,r4
001518  f7fffffe          BL       _SetWrapMode
;;;1564   }
00151c  bd10              POP      {r4,pc}
;;;1565   
                          ENDP

                  MULTIEDIT_SetInsertMode PROC
;;;1569   */
;;;1570   void MULTIEDIT_SetInsertMode(MULTIEDIT_HANDLE hObj, int OnOff) {
00151e  b570              PUSH     {r4-r6,lr}
001520  4604              MOV      r4,r0
001522  460d              MOV      r5,r1
;;;1571     _SetFlag(hObj, OnOff, MULTIEDIT_SF_INSERT);
001524  2204              MOVS     r2,#4
001526  4629              MOV      r1,r5
001528  4620              MOV      r0,r4
00152a  f7fffffe          BL       _SetFlag
;;;1572   }
00152e  bd70              POP      {r4-r6,pc}
;;;1573   
                          ENDP

                  MULTIEDIT_SetReadOnly PROC
;;;1577   */
;;;1578   void MULTIEDIT_SetReadOnly(MULTIEDIT_HANDLE hObj, int OnOff) {
001530  b570              PUSH     {r4-r6,lr}
001532  4604              MOV      r4,r0
001534  460d              MOV      r5,r1
;;;1579     _SetFlag(hObj, OnOff, MULTIEDIT_SF_READONLY);
001536  2201              MOVS     r2,#1
001538  4629              MOV      r1,r5
00153a  4620              MOV      r0,r4
00153c  f7fffffe          BL       _SetFlag
;;;1580   }
001540  bd70              POP      {r4-r6,pc}
;;;1581   
                          ENDP

                  MULTIEDIT_SetPasswordMode PROC
;;;1585   */
;;;1586   void MULTIEDIT_SetPasswordMode(MULTIEDIT_HANDLE hObj, int OnOff) {
001542  b570              PUSH     {r4-r6,lr}
001544  4604              MOV      r4,r0
001546  460d              MOV      r5,r1
;;;1587     if (hObj) {
001548  b1b4              CBZ      r4,|L1.5496|
;;;1588       MULTIEDIT_OBJ* pObj;
;;;1589       WM_LOCK();
00154a  f7fffffe          BL       GUI_Lock
;;;1590       pObj = MULTIEDIT_H2P(hObj);
00154e  4620              MOV      r0,r4
001550  f7fffffe          BL       GUI_ALLOC_h2p
001554  4606              MOV      r6,r0
;;;1591       _SetFlag(hObj, OnOff, MULTIEDIT_SF_PASSWORD);
001556  2220              MOVS     r2,#0x20
001558  4629              MOV      r1,r5
00155a  4620              MOV      r0,r4
00155c  f7fffffe          BL       _SetFlag
;;;1592       _InvalidateCursorXY(pObj);
001560  4630              MOV      r0,r6
001562  f7fffffe          BL       _InvalidateCursorXY
;;;1593       _InvalidateNumLines(pObj);
001566  4630              MOV      r0,r6
001568  f7fffffe          BL       _InvalidateNumLines
;;;1594       _InvalidateTextSizeX(pObj);
00156c  4630              MOV      r0,r6
00156e  f7fffffe          BL       _InvalidateTextSizeX
;;;1595       WM_UNLOCK();
001572  f7fffffe          BL       GUI_Unlock
;;;1596     }
001576  bf00              NOP      
                  |L1.5496|
;;;1597   }
001578  bd70              POP      {r4-r6,pc}
;;;1598   
                          ENDP

                  MULTIEDIT_SetAutoScrollV PROC
;;;1602   */
;;;1603   void MULTIEDIT_SetAutoScrollV(MULTIEDIT_HANDLE hObj, int OnOff) {
00157a  b570              PUSH     {r4-r6,lr}
00157c  4604              MOV      r4,r0
00157e  460d              MOV      r5,r1
;;;1604     _SetFlag(hObj, OnOff, MULTIEDIT_SF_AUTOSCROLLBAR_V);
001580  2208              MOVS     r2,#8
001582  4629              MOV      r1,r5
001584  4620              MOV      r0,r4
001586  f7fffffe          BL       _SetFlag
;;;1605   }
00158a  bd70              POP      {r4-r6,pc}
;;;1606   
                          ENDP

                  MULTIEDIT_SetAutoScrollH PROC
;;;1610   */
;;;1611   void MULTIEDIT_SetAutoScrollH(MULTIEDIT_HANDLE hObj, int OnOff) {
00158c  b570              PUSH     {r4-r6,lr}
00158e  4604              MOV      r4,r0
001590  460d              MOV      r5,r1
;;;1612     _SetFlag(hObj, OnOff, MULTIEDIT_SF_AUTOSCROLLBAR_H);
001592  2210              MOVS     r2,#0x10
001594  4629              MOV      r1,r5
001596  4620              MOV      r0,r4
001598  f7fffffe          BL       _SetFlag
;;;1613   }
00159c  bd70              POP      {r4-r6,pc}
;;;1614   
                          ENDP

                  MULTIEDIT_SetHBorder PROC
;;;1618   */
;;;1619   void MULTIEDIT_SetHBorder(MULTIEDIT_HANDLE hObj, unsigned HBorder) {
00159e  b570              PUSH     {r4-r6,lr}
0015a0  4605              MOV      r5,r0
0015a2  460c              MOV      r4,r1
;;;1620     if (hObj) {
0015a4  b18d              CBZ      r5,|L1.5578|
;;;1621       MULTIEDIT_OBJ* pObj;
;;;1622       WM_LOCK();
0015a6  f7fffffe          BL       GUI_Lock
;;;1623       pObj = MULTIEDIT_H2P(hObj);
0015aa  4628              MOV      r0,r5
0015ac  f7fffffe          BL       GUI_ALLOC_h2p
0015b0  4606              MOV      r6,r0
;;;1624       if ((unsigned)pObj->HBorder != HBorder) {
0015b2  f8960077          LDRB     r0,[r6,#0x77]
0015b6  42a0              CMP      r0,r4
0015b8  d004              BEQ      |L1.5572|
;;;1625         pObj->HBorder = HBorder;
0015ba  f8864077          STRB     r4,[r6,#0x77]
;;;1626         _Invalidate(hObj);
0015be  4628              MOV      r0,r5
0015c0  f7fffffe          BL       _Invalidate
                  |L1.5572|
;;;1627       }
;;;1628       WM_UNLOCK();
0015c4  f7fffffe          BL       GUI_Unlock
;;;1629     }
0015c8  bf00              NOP      
                  |L1.5578|
;;;1630   }
0015ca  bd70              POP      {r4-r6,pc}
;;;1631   
                          ENDP

                  MULTIEDIT_SetFont PROC
;;;1635   */
;;;1636   void MULTIEDIT_SetFont(MULTIEDIT_HANDLE hObj, const GUI_FONT GUI_UNI_PTR * pFont) {
0015cc  b570              PUSH     {r4-r6,lr}
0015ce  4606              MOV      r6,r0
0015d0  460c              MOV      r4,r1
;;;1637     if (hObj) {
0015d2  b1c6              CBZ      r6,|L1.5638|
;;;1638       MULTIEDIT_OBJ* pObj;
;;;1639       WM_LOCK();
0015d4  f7fffffe          BL       GUI_Lock
;;;1640       pObj = MULTIEDIT_H2P(hObj);
0015d8  4630              MOV      r0,r6
0015da  f7fffffe          BL       GUI_ALLOC_h2p
0015de  4605              MOV      r5,r0
;;;1641       if (pObj->pFont != pFont) {
0015e0  6f28              LDR      r0,[r5,#0x70]
0015e2  42a0              CMP      r0,r4
0015e4  d00c              BEQ      |L1.5632|
;;;1642         pObj->pFont = pFont;
0015e6  672c              STR      r4,[r5,#0x70]
;;;1643         _InvalidateTextArea(hObj);
0015e8  4630              MOV      r0,r6
0015ea  f7fffffe          BL       _InvalidateTextArea
;;;1644         _InvalidateCursorXY(pObj);
0015ee  4628              MOV      r0,r5
0015f0  f7fffffe          BL       _InvalidateCursorXY
;;;1645         _InvalidateNumLines(pObj);
0015f4  4628              MOV      r0,r5
0015f6  f7fffffe          BL       _InvalidateNumLines
;;;1646         _InvalidateTextSizeX(pObj);
0015fa  4628              MOV      r0,r5
0015fc  f7fffffe          BL       _InvalidateTextSizeX
                  |L1.5632|
;;;1647       }
;;;1648       WM_UNLOCK();
001600  f7fffffe          BL       GUI_Unlock
;;;1649     }
001604  bf00              NOP      
                  |L1.5638|
;;;1650   }
001606  bd70              POP      {r4-r6,pc}
;;;1651   
                          ENDP

                  MULTIEDIT_SetBkColor PROC
;;;1655   */
;;;1656   void MULTIEDIT_SetBkColor(MULTIEDIT_HANDLE hObj, unsigned Index, GUI_COLOR color) {
001608  e92d41f0          PUSH     {r4-r8,lr}
00160c  4605              MOV      r5,r0
00160e  460c              MOV      r4,r1
001610  4616              MOV      r6,r2
;;;1657     if (hObj && (Index < NUM_DISP_MODES)) {
001612  b18d              CBZ      r5,|L1.5688|
001614  2c02              CMP      r4,#2
001616  d20f              BCS      |L1.5688|
;;;1658       MULTIEDIT_OBJ* pObj;
;;;1659       WM_LOCK();
001618  f7fffffe          BL       GUI_Lock
;;;1660       pObj = MULTIEDIT_H2P(hObj);
00161c  4628              MOV      r0,r5
00161e  f7fffffe          BL       GUI_ALLOC_h2p
001622  4607              MOV      r7,r0
;;;1661       pObj->aBkColor[Index] = color;
001624  f1070028          ADD      r0,r7,#0x28
001628  f8406024          STR      r6,[r0,r4,LSL #2]
;;;1662       _InvalidateTextArea(hObj);
00162c  4628              MOV      r0,r5
00162e  f7fffffe          BL       _InvalidateTextArea
;;;1663       WM_UNLOCK();
001632  f7fffffe          BL       GUI_Unlock
;;;1664     }
001636  bf00              NOP      
                  |L1.5688|
;;;1665   }
001638  e8bd81f0          POP      {r4-r8,pc}
;;;1666   
                          ENDP

                  MULTIEDIT_SetCursorOffset PROC
;;;1670   */
;;;1671   void MULTIEDIT_SetCursorOffset(MULTIEDIT_HANDLE hObj, int Offset) {
00163c  b570              PUSH     {r4-r6,lr}
00163e  4604              MOV      r4,r0
001640  460d              MOV      r5,r1
;;;1672     if (hObj) {
001642  b184              CBZ      r4,|L1.5734|
;;;1673       MULTIEDIT_OBJ* pObj;
;;;1674       WM_LOCK();
001644  f7fffffe          BL       GUI_Lock
;;;1675       pObj = MULTIEDIT_H2P(hObj);
001648  4620              MOV      r0,r4
00164a  f7fffffe          BL       GUI_ALLOC_h2p
00164e  4606              MOV      r6,r0
;;;1676       _SetCursorPos(hObj, pObj, Offset);
001650  462a              MOV      r2,r5
001652  4631              MOV      r1,r6
001654  4620              MOV      r0,r4
001656  f7fffffe          BL       _SetCursorPos
;;;1677       WM_Invalidate(hObj);
00165a  4620              MOV      r0,r4
00165c  f7fffffe          BL       WM_InvalidateWindow
;;;1678       WM_UNLOCK();
001660  f7fffffe          BL       GUI_Unlock
;;;1679     }
001664  bf00              NOP      
                  |L1.5734|
;;;1680   }
001666  bd70              POP      {r4-r6,pc}
;;;1681   
                          ENDP

                  MULTIEDIT_SetTextColor PROC
;;;1685   */
;;;1686   void MULTIEDIT_SetTextColor(MULTIEDIT_HANDLE hObj, unsigned Index, GUI_COLOR color) {
001668  e92d41f0          PUSH     {r4-r8,lr}
00166c  4605              MOV      r5,r0
00166e  460c              MOV      r4,r1
001670  4616              MOV      r6,r2
;;;1687     if (hObj && (Index < NUM_DISP_MODES)) {
001672  b18d              CBZ      r5,|L1.5784|
001674  2c02              CMP      r4,#2
001676  d20f              BCS      |L1.5784|
;;;1688       MULTIEDIT_OBJ* pObj;
;;;1689       WM_LOCK();
001678  f7fffffe          BL       GUI_Lock
;;;1690       pObj = MULTIEDIT_H2P(hObj);
00167c  4628              MOV      r0,r5
00167e  f7fffffe          BL       GUI_ALLOC_h2p
001682  4607              MOV      r7,r0
;;;1691       pObj->aColor[Index] = color;
001684  f1070030          ADD      r0,r7,#0x30
001688  f8406024          STR      r6,[r0,r4,LSL #2]
;;;1692       WM_Invalidate(hObj);
00168c  4628              MOV      r0,r5
00168e  f7fffffe          BL       WM_InvalidateWindow
;;;1693       WM_UNLOCK();
001692  f7fffffe          BL       GUI_Unlock
;;;1694     }
001696  bf00              NOP      
                  |L1.5784|
;;;1695   }
001698  e8bd81f0          POP      {r4-r8,pc}
;;;1696   
                          ENDP

                  MULTIEDIT_SetPrompt PROC
;;;1700   */
;;;1701   void MULTIEDIT_SetPrompt(MULTIEDIT_HANDLE hObj, const char* pPrompt) {
00169c  e92d4ff8          PUSH     {r3-r11,lr}
0016a0  4682              MOV      r10,r0
0016a2  460e              MOV      r6,r1
;;;1702     if (hObj) {
0016a4  f1ba0f00          CMP      r10,#0
0016a8  d064              BEQ      |L1.6004|
;;;1703       MULTIEDIT_OBJ* pObj;
;;;1704       int NumCharsNew = 0, NumCharsOld = 0;
0016aa  2700              MOVS     r7,#0
0016ac  46bb              MOV      r11,r7
;;;1705       int NumBytesNew = 0, NumBytesOld = 0;
0016ae  46b8              MOV      r8,r7
0016b0  46b9              MOV      r9,r7
;;;1706       char* pText;
;;;1707       WM_LOCK();
0016b2  f7fffffe          BL       GUI_Lock
;;;1708       pObj = MULTIEDIT_H2P(hObj);
0016b6  4650              MOV      r0,r10
0016b8  f7fffffe          BL       GUI_ALLOC_h2p
0016bc  4604              MOV      r4,r0
;;;1709       if (pObj->hText) {
0016be  8f20              LDRH     r0,[r4,#0x38]
0016c0  b158              CBZ      r0,|L1.5850|
;;;1710         pText = (char*) GUI_ALLOC_h2p(pObj->hText);
0016c2  f9b40038          LDRSH    r0,[r4,#0x38]
0016c6  f7fffffe          BL       GUI_ALLOC_h2p
0016ca  4605              MOV      r5,r0
;;;1711         NumCharsOld = pObj->NumCharsPrompt;
0016cc  f8b4b03e          LDRH     r11,[r4,#0x3e]
;;;1712         NumBytesOld = GUI_UC__NumChars2NumBytes(pText, NumCharsOld);
0016d0  4659              MOV      r1,r11
0016d2  4628              MOV      r0,r5
0016d4  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0016d8  4681              MOV      r9,r0
                  |L1.5850|
;;;1713       }
;;;1714       if (pPrompt) {
0016da  b146              CBZ      r6,|L1.5870|
;;;1715         NumCharsNew = GUI__GetNumChars(pPrompt);
0016dc  4630              MOV      r0,r6
0016de  f7fffffe          BL       GUI__GetNumChars
0016e2  4607              MOV      r7,r0
;;;1716         NumBytesNew = GUI_UC__NumChars2NumBytes(pPrompt, NumCharsNew);
0016e4  4639              MOV      r1,r7
0016e6  4630              MOV      r0,r6
0016e8  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0016ec  4680              MOV      r8,r0
                  |L1.5870|
;;;1717       }
;;;1718       if (_IsCharsAvailable(pObj, NumCharsNew - NumCharsOld)) {
0016ee  eba7010b          SUB      r1,r7,r11
0016f2  4620              MOV      r0,r4
0016f4  f7fffffe          BL       _IsCharsAvailable
0016f8  b3b0              CBZ      r0,|L1.5992|
;;;1719         if (_IsSpaceInBuffer(pObj, NumBytesNew - NumBytesOld)) {
0016fa  eba80109          SUB      r1,r8,r9
0016fe  4620              MOV      r0,r4
001700  f7fffffe          BL       _IsSpaceInBuffer
001704  b380              CBZ      r0,|L1.5992|
;;;1720           pText = (char*) GUI_ALLOC_h2p(pObj->hText);
001706  f9b40038          LDRSH    r0,[r4,#0x38]
00170a  f7fffffe          BL       GUI_ALLOC_h2p
00170e  4605              MOV      r5,r0
;;;1721           memmove(pText + NumBytesNew, pText + NumBytesOld, strlen(pText + NumBytesOld) + 1);
001710  eb050009          ADD      r0,r5,r9
001714  f7fffffe          BL       strlen
001718  1c40              ADDS     r0,r0,#1
00171a  eb050109          ADD      r1,r5,r9
00171e  9000              STR      r0,[sp,#0]
001720  eb050008          ADD      r0,r5,r8
001724  9a00              LDR      r2,[sp,#0]
001726  f7fffffe          BL       __aeabi_memmove
;;;1722           if (pPrompt) {
00172a  b126              CBZ      r6,|L1.5942|
;;;1723             memcpy(pText, pPrompt, NumBytesNew);
00172c  4642              MOV      r2,r8
00172e  4631              MOV      r1,r6
001730  4628              MOV      r0,r5
001732  f7fffffe          BL       __aeabi_memcpy
                  |L1.5942|
;;;1724           }
;;;1725           pObj->NumCharsPrompt = NumCharsNew;
001736  87e7              STRH     r7,[r4,#0x3e]
;;;1726           _SetCursorPos(hObj, pObj, NumCharsNew);
001738  463a              MOV      r2,r7
00173a  4621              MOV      r1,r4
00173c  4650              MOV      r0,r10
00173e  f7fffffe          BL       _SetCursorPos
;;;1727           _InvalidateTextArea(hObj);
001742  4650              MOV      r0,r10
001744  f7fffffe          BL       _InvalidateTextArea
;;;1728           _InvalidateNumChars(pObj);
001748  4620              MOV      r0,r4
00174a  f7fffffe          BL       _InvalidateNumChars
;;;1729           _InvalidateNumLines(pObj);
00174e  4620              MOV      r0,r4
001750  f7fffffe          BL       _InvalidateNumLines
;;;1730           _InvalidateTextSizeX(pObj);
001754  4620              MOV      r0,r4
001756  e008              B        |L1.5994|
                  |L1.5976|
                          DCD      _MULTIEDIT_Callback
                  |L1.5980|
                          DCD      _aDefaultBkColor
                  |L1.5984|
                          DCD      _aDefaultColor
                  |L1.5988|
                          DCD      _pDefaultFont
                  |L1.5992|
001768  e001              B        |L1.5998|
                  |L1.5994|
00176a  f7fffffe          BL       _InvalidateTextSizeX
                  |L1.5998|
;;;1731         }
;;;1732       }
;;;1733       WM_UNLOCK();
00176e  f7fffffe          BL       GUI_Unlock
;;;1734     }
001772  bf00              NOP      
                  |L1.6004|
;;;1735   }
001774  e8bd8ff8          POP      {r3-r11,pc}
;;;1736   
                          ENDP

                  MULTIEDIT_SetBufferSize PROC
;;;1740   */
;;;1741   void MULTIEDIT_SetBufferSize(MULTIEDIT_HANDLE hObj, int BufferSize) {
001778  e92d41f0          PUSH     {r4-r8,lr}
00177c  4606              MOV      r6,r0
00177e  460d              MOV      r5,r1
;;;1742     if (hObj) {
001780  b356              CBZ      r6,|L1.6104|
;;;1743       MULTIEDIT_OBJ* pObj;
;;;1744       WM_HMEM hText;
;;;1745       WM_LOCK();
001782  f7fffffe          BL       GUI_Lock
;;;1746       pObj = MULTIEDIT_H2P(hObj);
001786  4630              MOV      r0,r6
001788  f7fffffe          BL       GUI_ALLOC_h2p
00178c  4604              MOV      r4,r0
;;;1747       if ((hText = GUI_ALLOC_AllocZero(BufferSize)) == 0) {
00178e  b228              SXTH     r0,r5
001790  f7fffffe          BL       GUI_ALLOC_AllocZero
001794  0007              MOVS     r7,r0
001796  d019              BEQ      |L1.6092|
;;;1748         GUI_DEBUG_ERROROUT("MULTIEDIT_SetBufferSize failed to alloc buffer");
;;;1749       } else {
;;;1750         GUI_ALLOC_FreePtr(&pObj->hText);
001798  f1040038          ADD      r0,r4,#0x38
00179c  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;1751         pObj->hText          = hText;
0017a0  8727              STRH     r7,[r4,#0x38]
;;;1752         pObj->BufferSize     = BufferSize;
0017a2  f8a45044          STRH     r5,[r4,#0x44]
;;;1753         pObj->NumCharsPrompt = 0;
0017a6  2000              MOVS     r0,#0
0017a8  87e0              STRH     r0,[r4,#0x3e]
;;;1754         _SetCursorPos(hObj, pObj, 0);
0017aa  2200              MOVS     r2,#0
0017ac  4621              MOV      r1,r4
0017ae  4630              MOV      r0,r6
0017b0  f7fffffe          BL       _SetCursorPos
;;;1755         _InvalidateNumChars(pObj);
0017b4  4620              MOV      r0,r4
0017b6  f7fffffe          BL       _InvalidateNumChars
;;;1756         _InvalidateCursorXY(pObj);
0017ba  4620              MOV      r0,r4
0017bc  f7fffffe          BL       _InvalidateCursorXY
;;;1757         _InvalidateNumLines(pObj);
0017c0  4620              MOV      r0,r4
0017c2  f7fffffe          BL       _InvalidateNumLines
;;;1758         _InvalidateTextSizeX(pObj);
0017c6  4620              MOV      r0,r4
0017c8  f7fffffe          BL       _InvalidateTextSizeX
                  |L1.6092|
;;;1759       }
;;;1760       _InvalidateTextArea(hObj);
0017cc  4630              MOV      r0,r6
0017ce  f7fffffe          BL       _InvalidateTextArea
;;;1761       WM_UNLOCK();
0017d2  f7fffffe          BL       GUI_Unlock
;;;1762     }
0017d6  bf00              NOP      
                  |L1.6104|
;;;1763   }
0017d8  e8bd81f0          POP      {r4-r8,pc}
;;;1764   
                          ENDP

                  MULTIEDIT_SetMaxNumChars PROC
;;;1768   */
;;;1769   void MULTIEDIT_SetMaxNumChars(MULTIEDIT_HANDLE hObj, unsigned MaxNumChars) {
0017dc  e92d41f0          PUSH     {r4-r8,lr}
0017e0  4680              MOV      r8,r0
0017e2  460d              MOV      r5,r1
;;;1770     if (hObj) {
0017e4  f1b80f00          CMP      r8,#0
0017e8  d02d              BEQ      |L1.6214|
;;;1771       MULTIEDIT_OBJ* pObj;
;;;1772       WM_LOCK();
0017ea  f7fffffe          BL       GUI_Lock
;;;1773       pObj = MULTIEDIT_H2P(hObj);
0017ee  4640              MOV      r0,r8
0017f0  f7fffffe          BL       GUI_ALLOC_h2p
0017f4  4604              MOV      r4,r0
;;;1774       pObj->MaxNumChars = MaxNumChars;
0017f6  8765              STRH     r5,[r4,#0x3a]
;;;1775       if (MaxNumChars < (unsigned)pObj->NumCharsPrompt) {
0017f8  8fe0              LDRH     r0,[r4,#0x3e]
0017fa  42a8              CMP      r0,r5
0017fc  d900              BLS      |L1.6144|
;;;1776         pObj->NumCharsPrompt = MaxNumChars;
0017fe  87e5              STRH     r5,[r4,#0x3e]
                  |L1.6144|
;;;1777       }
;;;1778       if (pObj->hText && MaxNumChars) {
001800  8f20              LDRH     r0,[r4,#0x38]
001802  b1e8              CBZ      r0,|L1.6208|
001804  b1e5              CBZ      r5,|L1.6208|
;;;1779         char* pText;
;;;1780         int Offset;
;;;1781         pText = (char*) GUI_ALLOC_h2p(pObj->hText);
001806  f9b40038          LDRSH    r0,[r4,#0x38]
00180a  f7fffffe          BL       GUI_ALLOC_h2p
00180e  4606              MOV      r6,r0
;;;1782         Offset = GUI_UC__NumChars2NumBytes(pText, MaxNumChars);
001810  4629              MOV      r1,r5
001812  4630              MOV      r0,r6
001814  f7fffffe          BL       GUI_UC__NumChars2NumBytes
001818  4607              MOV      r7,r0
;;;1783         if (Offset < pObj->BufferSize) {
00181a  f8b40044          LDRH     r0,[r4,#0x44]
00181e  42b8              CMP      r0,r7
001820  dd0d              BLE      |L1.6206|
;;;1784           pText += Offset;
001822  443e              ADD      r6,r6,r7
;;;1785           *pText = 0;
001824  2000              MOVS     r0,#0
001826  7030              STRB     r0,[r6,#0]
;;;1786           _SetCursorPos(hObj, pObj, Offset);
001828  463a              MOV      r2,r7
00182a  4621              MOV      r1,r4
00182c  4640              MOV      r0,r8
00182e  f7fffffe          BL       _SetCursorPos
;;;1787           _InvalidateTextArea(hObj);
001832  4640              MOV      r0,r8
001834  f7fffffe          BL       _InvalidateTextArea
;;;1788           _InvalidateNumChars(pObj);
001838  4620              MOV      r0,r4
00183a  f7fffffe          BL       _InvalidateNumChars
                  |L1.6206|
;;;1789         }
;;;1790       }
00183e  bf00              NOP      
                  |L1.6208|
;;;1791       WM_UNLOCK();
001840  f7fffffe          BL       GUI_Unlock
;;;1792     }
001844  bf00              NOP      
                  |L1.6214|
;;;1793   }
001846  e8bd81f0          POP      {r4-r8,pc}
;;;1794   
                          ENDP

                  MULTIEDIT_GetTextSize PROC
;;;1803   */
;;;1804   int MULTIEDIT_GetTextSize(MULTIEDIT_HANDLE hObj) {
00184a  e92d41f0          PUSH     {r4-r8,lr}
00184e  4605              MOV      r5,r0
;;;1805     int r = 0;
001850  2700              MOVS     r7,#0
;;;1806     if (hObj) {
001852  b1cd              CBZ      r5,|L1.6280|
;;;1807       MULTIEDIT_OBJ* pObj;
;;;1808       WM_LOCK();
001854  f7fffffe          BL       GUI_Lock
;;;1809       pObj = MULTIEDIT_H2P(hObj);
001858  4628              MOV      r0,r5
00185a  f7fffffe          BL       GUI_ALLOC_h2p
00185e  4604              MOV      r4,r0
;;;1810       if (pObj->hText) {
001860  8f20              LDRH     r0,[r4,#0x38]
001862  b170              CBZ      r0,|L1.6274|
;;;1811         const char* s;
;;;1812         s = (const char*)GUI_ALLOC_h2p(pObj->hText);
001864  f9b40038          LDRSH    r0,[r4,#0x38]
001868  f7fffffe          BL       GUI_ALLOC_h2p
00186c  4606              MOV      r6,r0
;;;1813         s += GUI_UC__NumChars2NumBytes(s, pObj->NumCharsPrompt);
00186e  8fe1              LDRH     r1,[r4,#0x3e]
001870  4630              MOV      r0,r6
001872  f7fffffe          BL       GUI_UC__NumChars2NumBytes
001876  4406              ADD      r6,r6,r0
;;;1814         r = 1 + strlen(s);
001878  4630              MOV      r0,r6
00187a  f7fffffe          BL       strlen
00187e  1c47              ADDS     r7,r0,#1
;;;1815       }
001880  bf00              NOP      
                  |L1.6274|
;;;1816       WM_UNLOCK();
001882  f7fffffe          BL       GUI_Unlock
;;;1817     }
001886  bf00              NOP      
                  |L1.6280|
;;;1818     return r;
001888  4638              MOV      r0,r7
;;;1819   }
00188a  e8bd81f0          POP      {r4-r8,pc}
;;;1820   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  _aDefaultBkColor
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                  _aDefaultColor
                          DCD      0x00000000
                          DCD      0x00000000
                  _pDefaultFont
                          DCD      GUI_Font13_1
