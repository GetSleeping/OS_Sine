; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\os_time.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\os_time.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\os_time.crf ..\Ucosii\Src\os_time.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;43     
;;;44     void  OSTimeDly (INT16U ticks)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4605              MOV      r5,r0
;;;46         INT8U      y;
;;;47     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;48         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;49     #endif
;;;50     
;;;51     
;;;52     
;;;53         if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
000006  4822              LDR      r0,|L1.144|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  2800              CMP      r0,#0
00000c  dd00              BLE      |L1.16|
                  |L1.14|
;;;54             return;
;;;55         }
;;;56         if (ticks > 0) {                             /* 0 means no delay!                                  */
;;;57             OS_ENTER_CRITICAL();
;;;58             y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
;;;59             OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
;;;60             if (OSRdyTbl[y] == 0) {
;;;61                 OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
;;;62             }
;;;63             OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
;;;64             OS_EXIT_CRITICAL();
;;;65             OS_Sched();                              /* Find next task to run!                             */
;;;66         }
;;;67     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  2d00              CMP      r5,#0                 ;56
000012  dd23              BLE      |L1.92|
000014  f7fffffe          BL       OS_CPU_SR_Save
000018  4606              MOV      r6,r0                 ;57
00001a  481e              LDR      r0,|L1.148|
00001c  6800              LDR      r0,[r0,#0]            ;58  ; OSTCBCur
00001e  f890402a          LDRB     r4,[r0,#0x2a]         ;58
000022  481d              LDR      r0,|L1.152|
000024  5d00              LDRB     r0,[r0,r4]            ;59
000026  491b              LDR      r1,|L1.148|
000028  6809              LDR      r1,[r1,#0]            ;59  ; OSTCBCur
00002a  f891102b          LDRB     r1,[r1,#0x2b]         ;59
00002e  4388              BICS     r0,r0,r1              ;59
000030  4919              LDR      r1,|L1.152|
000032  5508              STRB     r0,[r1,r4]            ;59
000034  4608              MOV      r0,r1                 ;60
000036  5d00              LDRB     r0,[r0,r4]            ;60
000038  b940              CBNZ     r0,|L1.76|
00003a  4816              LDR      r0,|L1.148|
00003c  6800              LDR      r0,[r0,#0]            ;61  ; OSTCBCur
00003e  f890102c          LDRB     r1,[r0,#0x2c]         ;61
000042  4816              LDR      r0,|L1.156|
000044  7800              LDRB     r0,[r0,#0]            ;61  ; OSRdyGrp
000046  4388              BICS     r0,r0,r1              ;61
000048  4914              LDR      r1,|L1.156|
00004a  7008              STRB     r0,[r1,#0]            ;61
                  |L1.76|
00004c  4811              LDR      r0,|L1.148|
00004e  6800              LDR      r0,[r0,#0]            ;63  ; OSTCBCur
000050  8485              STRH     r5,[r0,#0x24]         ;63
000052  4630              MOV      r0,r6                 ;64
000054  f7fffffe          BL       OS_CPU_SR_Restore
000058  f7fffffe          BL       OS_Sched
                  |L1.92|
00005c  bf00              NOP      
00005e  e7d6              B        |L1.14|
;;;68     /*$PAGE*/
                          ENDP

                  OSTimeGet PROC
;;;226    #if OS_TIME_GET_SET_EN > 0
;;;227    INT32U  OSTimeGet (void)
000060  b570              PUSH     {r4-r6,lr}
;;;228    {
;;;229        INT32U     ticks;
;;;230    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;231        OS_CPU_SR  cpu_sr = 0;
000062  2500              MOVS     r5,#0
;;;232    #endif
;;;233    
;;;234    
;;;235    
;;;236        OS_ENTER_CRITICAL();
000064  f7fffffe          BL       OS_CPU_SR_Save
000068  4605              MOV      r5,r0
;;;237        ticks = OSTime;
00006a  480d              LDR      r0,|L1.160|
00006c  6804              LDR      r4,[r0,#0]  ; OSTime
;;;238        OS_EXIT_CRITICAL();
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       OS_CPU_SR_Restore
;;;239        return (ticks);
000074  4620              MOV      r0,r4
;;;240    }
000076  bd70              POP      {r4-r6,pc}
;;;241    #endif
                          ENDP

                  OSTimeSet PROC
;;;255    #if OS_TIME_GET_SET_EN > 0
;;;256    void  OSTimeSet (INT32U ticks)
000078  b570              PUSH     {r4-r6,lr}
;;;257    {
00007a  4604              MOV      r4,r0
;;;258    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;259        OS_CPU_SR  cpu_sr = 0;
00007c  2500              MOVS     r5,#0
;;;260    #endif
;;;261    
;;;262    
;;;263    
;;;264        OS_ENTER_CRITICAL();
00007e  f7fffffe          BL       OS_CPU_SR_Save
000082  4605              MOV      r5,r0
;;;265        OSTime = ticks;
000084  4806              LDR      r0,|L1.160|
000086  6004              STR      r4,[r0,#0]  ; OSTime
;;;266        OS_EXIT_CRITICAL();
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       OS_CPU_SR_Restore
;;;267    }
00008e  bd70              POP      {r4-r6,pc}
;;;268    #endif
                          ENDP

                  |L1.144|
                          DCD      OSIntNesting
                  |L1.148|
                          DCD      OSTCBCur
                  |L1.152|
                          DCD      OSRdyTbl
                  |L1.156|
                          DCD      OSRdyGrp
                  |L1.160|
                          DCD      OSTime
