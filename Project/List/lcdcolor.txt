; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\lcdcolor.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\lcdcolor.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\lcdcolor.crf ..\Ucgui\GUI\Core\LCDColor.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_GetpPalConvTableUncached PROC
;;;59     */
;;;60     LCD_PIXELINDEX* LCD_GetpPalConvTableUncached(const LCD_LOGPALETTE GUI_UNI_PTR *  pLogPal) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;61       if (pLogPal == NULL) {
000006  b914              CBNZ     r4,|L1.14|
;;;62         return NULL;
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;63       }
;;;64       if (!pLogPal->pPalEntries) {
;;;65         return NULL;
;;;66       }
;;;67       /* Check if sufficient space is available */
;;;68       if (pLogPal->NumEntries > LCD_MAX_LOG_COLORS) {
;;;69         return NULL;
;;;70       }
;;;71       /* Build conversion table */
;;;72       {
;;;73         int i;
;;;74         int NumEntries = pLogPal->NumEntries;
;;;75         const LCD_COLOR GUI_UNI_PTR * pPalEntry = &pLogPal->pPalEntries[0];
;;;76         for (i=0; i< NumEntries; i++) {
;;;77           LCD__aConvTable[i] = LCD_Color2Index(*(pPalEntry+i));
;;;78         }
;;;79       }
;;;80       return &LCD__aConvTable[0];
;;;81     }
00000a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.14|
00000e  68a0              LDR      r0,[r4,#8]            ;64
000010  b908              CBNZ     r0,|L1.22|
000012  2000              MOVS     r0,#0                 ;65
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  6820              LDR      r0,[r4,#0]            ;68
000018  f5b07f80          CMP      r0,#0x100             ;68
00001c  dd01              BLE      |L1.34|
00001e  2000              MOVS     r0,#0                 ;69
000020  e7f3              B        |L1.10|
                  |L1.34|
000022  6826              LDR      r6,[r4,#0]            ;74
000024  68a7              LDR      r7,[r4,#8]            ;75
000026  2500              MOVS     r5,#0                 ;76
000028  e007              B        |L1.58|
                  |L1.42|
00002a  f8570025          LDR      r0,[r7,r5,LSL #2]     ;77
00002e  f7fffffe          BL       LCD_Color2Index
000032  4907              LDR      r1,|L1.80|
000034  f8210015          STRH     r0,[r1,r5,LSL #1]     ;77
000038  1c6d              ADDS     r5,r5,#1              ;76
                  |L1.58|
00003a  42b5              CMP      r5,r6                 ;76
00003c  dbf5              BLT      |L1.42|
00003e  4804              LDR      r0,|L1.80|
000040  e7e3              B        |L1.10|
;;;82     
                          ENDP

                  LCD_GetpPalConvTable PROC
;;;86     */
;;;87     LCD_PIXELINDEX* LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR *  pLogPal) {
000042  b510              PUSH     {r4,lr}
000044  4604              MOV      r4,r0
;;;88     /* Check cache */
;;;89       #if  LCD_SIZEOF_COLORCACHE
;;;90         if (pLogPalCache == pLogPal) {
;;;91           return &LCD__aConvTable[0];
;;;92         }
;;;93         pLogPalCache = pLogPal;
;;;94       #endif
;;;95       return LCD_GetpPalConvTableUncached(pLogPal);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       LCD_GetpPalConvTableUncached
;;;96     }
00004c  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  LCD_InitLUT PROC
;;;101    */
;;;102    void LCD_InitLUT(void) {
00004e  4770              BX       lr
;;;103      #if (LCD_BITSPERPIXEL <= 8)
;;;104        {
;;;105          int i;
;;;106          for (i=0; i < LCD_NUM_COLORS; i++) {
;;;107            LCD_COLOR color = LCD_Index2Color((U8)i);
;;;108            #if LCD_REVERSE_LUT
;;;109              color ^= 0xffffff;    /* Invert R,G,B components */
;;;110            #endif
;;;111            LCD_L0_SetLUTEntry((U8)i, color);
;;;112          }
;;;113        }
;;;114      #endif
;;;115      #if (GUI_NUM_LAYERS > 1)
;;;116        #if (LCD_BITSPERPIXEL_1 <= 8)
;;;117        {
;;;118          int i;
;;;119          int DisplayOld = GUI_SelectLayer(1);
;;;120          for (i=0; i < LCD_NUM_COLORS_1; i++) {
;;;121            LCD_COLOR color = LCD_Index2Color((U8)i);
;;;122            #if LCD_REVERSE_LUT_1
;;;123              color ^= 0xffffff;    /* Invert R,G,B components */
;;;124            #endif
;;;125            LCD_L0_1_SetLUTEntry((U8)i, color);
;;;126          }
;;;127          GUI_SelectLayer(DisplayOld);
;;;128        }
;;;129        #endif
;;;130      #endif
;;;131      #if (GUI_NUM_LAYERS > 2)
;;;132        #if (LCD_BITSPERPIXEL_2 <= 8)
;;;133        {
;;;134          int i;
;;;135          int DisplayOld = GUI_SelectLayer(2);
;;;136          for (i=0; i < LCD_NUM_COLORS_2; i++) {
;;;137            LCD_COLOR color = LCD_Index2Color((U8)i);
;;;138            #if LCD_REVERSE_LUT_2
;;;139              color ^= 0xffffff;    /* Invert R,G,B components */
;;;140            #endif
;;;141            LCD_L0_2_SetLUTEntry((U8)i, color);
;;;142          }
;;;143          GUI_SelectLayer(DisplayOld);
;;;144        }
;;;145        #endif
;;;146      #endif
;;;147      #if (GUI_NUM_LAYERS > 3)
;;;148        #if (LCD_BITSPERPIXEL_3 <= 8)
;;;149        {
;;;150          int i;
;;;151          int DisplayOld = GUI_SelectLayer(3);
;;;152          for (i=0; i < LCD_NUM_COLORS_3; i++) {
;;;153            LCD_COLOR color = LCD_Index2Color((U8)i);
;;;154            #if LCD_REVERSE_LUT_3
;;;155              color ^= 0xffffff;    /* Invert R,G,B components */
;;;156            #endif
;;;157            LCD_L0_3_SetLUTEntry((U8)i, color);
;;;158          }
;;;159          GUI_SelectLayer(DisplayOld);
;;;160        }
;;;161        #endif
;;;162      #endif
;;;163      #if (GUI_NUM_LAYERS > 4)
;;;164        #if (LCD_BITSPERPIXEL_4 <= 8)
;;;165        {
;;;166          int i;
;;;167          int DisplayOld = GUI_SelectLayer(4);
;;;168          for (i=0; i < LCD_NUM_COLORS_4; i++) {
;;;169            LCD_COLOR color = LCD_Index2Color((U8)i);
;;;170            #if LCD_REVERSE_LUT_4
;;;171              color ^= 0xffffff;    /* Invert R,G,B components */
;;;172            #endif
;;;173            LCD_L0_4_SetLUTEntry((U8)i, color);
;;;174          }
;;;175          GUI_SelectLayer(DisplayOld);
;;;176        }
;;;177        #endif
;;;178      #endif
;;;179    }
;;;180    
                          ENDP

                  |L1.80|
                          DCD      LCD__aConvTable

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  LCD__aConvTable
                          %        512
