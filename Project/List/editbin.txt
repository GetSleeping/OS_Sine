; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\editbin.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\editbin.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\editbin.crf ..\Ucgui\GUI\Widget\EDITBin.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _BinChar2Int PROC
;;;38     */
;;;39     static int _BinChar2Int(int Char) {
000000  4601              MOV      r1,r0
;;;40       if ((Char >= '0') && (Char <= '1'))
000002  2930              CMP      r1,#0x30
000004  db04              BLT      |L1.16|
000006  2931              CMP      r1,#0x31
000008  dc02              BGT      |L1.16|
;;;41         return Char - '0';
00000a  f1a10030          SUB      r0,r1,#0x30
                  |L1.14|
;;;42       return -1;
;;;43     }
00000e  4770              BX       lr
                  |L1.16|
000010  f04f30ff          MOV      r0,#0xffffffff        ;42
000014  e7fb              B        |L1.14|
;;;44     
                          ENDP

                  _GetNumDigits PROC
;;;48     */
;;;49     static int _GetNumDigits(U32 Value) {
000016  4601              MOV      r1,r0
;;;50       int Ret;
;;;51       for (Ret = 0; Value; Value >>= 1, Ret++);
000018  2000              MOVS     r0,#0
00001a  e001              B        |L1.32|
                  |L1.28|
00001c  0849              LSRS     r1,r1,#1
00001e  1c40              ADDS     r0,r0,#1
                  |L1.32|
000020  2900              CMP      r1,#0
000022  d1fb              BNE      |L1.28|
;;;52       return Ret;
;;;53     }
000024  4770              BX       lr
;;;54     
                          ENDP

                  _UpdateBuffer PROC
;;;58     */
;;;59     static void _UpdateBuffer(EDIT_Handle hObj) {
000026  b538              PUSH     {r3-r5,lr}
000028  4605              MOV      r5,r0
;;;60       char * s;
;;;61       EDIT_Obj * pObj;
;;;62       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GUI_ALLOC_h2p
000030  4604              MOV      r4,r0
;;;63       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
000032  f9b40028          LDRSH    r0,[r4,#0x28]
000036  f7fffffe          BL       GUI_ALLOC_h2p
00003a  9000              STR      r0,[sp,#0]
;;;64       GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
00003c  8d62              LDRH     r2,[r4,#0x2a]
00003e  b2d1              UXTB     r1,r2
000040  466a              MOV      r2,sp
000042  6be0              LDR      r0,[r4,#0x3c]
000044  f7fffffe          BL       GUI_AddBin
;;;65     }
000048  bd38              POP      {r3-r5,pc}
;;;66     
                          ENDP

                  _EditBin PROC
;;;70     */
;;;71     static void _EditBin(U8 Bit, EDIT_Obj* pObj, EDIT_Handle hObj) {
00004a  e92d47f0          PUSH     {r4-r10,lr}
00004e  4605              MOV      r5,r0
000050  460c              MOV      r4,r1
000052  4616              MOV      r6,r2
;;;72       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000054  f9b4002a          LDRSH    r0,[r4,#0x2a]
000058  6c21              LDR      r1,[r4,#0x40]
00005a  1a40              SUBS     r0,r0,r1
00005c  1e47              SUBS     r7,r0,#1
;;;73       U32 AndMask = ~(1   << Pos);
00005e  2001              MOVS     r0,#1
000060  40b8              LSLS     r0,r0,r7
000062  ea6f0900          MVN      r9,r0
;;;74       U32 OrMask  =   Bit << Pos;
000066  fa05fa07          LSL      r10,r5,r7
;;;75       I32 Result  = pObj->CurrentValue & AndMask;
00006a  6be0              LDR      r0,[r4,#0x3c]
00006c  ea000809          AND      r8,r0,r9
;;;76       Result     |= OrMask;
000070  ea48080a          ORR      r8,r8,r10
;;;77       EDIT_SetValue(hObj, Result);
000074  4641              MOV      r1,r8
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       EDIT_SetValue
;;;78     }
00007c  e8bd87f0          POP      {r4-r10,pc}
;;;79     
                          ENDP

                  _GetCurrentBit PROC
;;;83     */
;;;84     static U8 _GetCurrentBit(EDIT_Obj* pObj) {
000080  b530              PUSH     {r4,r5,lr}
000082  4601              MOV      r1,r0
;;;85       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000084  f9b1402a          LDRSH    r4,[r1,#0x2a]
000088  6c0d              LDR      r5,[r1,#0x40]
00008a  1b64              SUBS     r4,r4,r5
00008c  1e62              SUBS     r2,r4,#1
;;;86       U32 AndMask = 1 << Pos;
00008e  2401              MOVS     r4,#1
000090  fa04f302          LSL      r3,r4,r2
;;;87       U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
000094  6bcc              LDR      r4,[r1,#0x3c]
000096  401c              ANDS     r4,r4,r3
000098  40d4              LSRS     r4,r4,r2
00009a  b2e0              UXTB     r0,r4
;;;88       return Bit;
;;;89     }
00009c  bd30              POP      {r4,r5,pc}
;;;90     
                          ENDP

                  _AddKeyBin PROC
;;;100    */
;;;101    static void _AddKeyBin(EDIT_Handle hObj, int Key) {
00009e  e92d41f0          PUSH     {r4-r8,lr}
0000a2  4606              MOV      r6,r0
0000a4  460d              MOV      r5,r1
;;;102      EDIT_Obj * pObj;
;;;103      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       GUI_ALLOC_h2p
0000ac  4604              MOV      r4,r0
;;;104      if (pObj) {
0000ae  2c00              CMP      r4,#0
0000b0  d043              BEQ      |L1.314|
;;;105        switch (Key) {
0000b2  2d10              CMP      r5,#0x10
0000b4  d026              BEQ      |L1.260|
0000b6  2d11              CMP      r5,#0x11
0000b8  d004              BEQ      |L1.196|
0000ba  2d12              CMP      r5,#0x12
0000bc  d01c              BEQ      |L1.248|
0000be  2d13              CMP      r5,#0x13
0000c0  d126              BNE      |L1.272|
0000c2  e00c              B        |L1.222|
                  |L1.196|
;;;106        case GUI_KEY_UP:
;;;107          {
;;;108            int Bit = _GetCurrentBit(pObj) + 1;
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       _GetCurrentBit
0000ca  1c47              ADDS     r7,r0,#1
;;;109            if (Bit > 1) {
0000cc  2f01              CMP      r7,#1
0000ce  dd00              BLE      |L1.210|
;;;110              Bit = 0;
0000d0  2700              MOVS     r7,#0
                  |L1.210|
;;;111            }
;;;112            _EditBin(Bit, pObj, hObj);
0000d2  4632              MOV      r2,r6
0000d4  4621              MOV      r1,r4
0000d6  b2f8              UXTB     r0,r7
0000d8  f7fffffe          BL       _EditBin
;;;113          }
;;;114          break;
0000dc  e029              B        |L1.306|
                  |L1.222|
;;;115        case GUI_KEY_DOWN:
;;;116          {
;;;117            int Bit = _GetCurrentBit(pObj) - 1;
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       _GetCurrentBit
0000e4  1e47              SUBS     r7,r0,#1
;;;118            if (Bit < 0) {
0000e6  2f00              CMP      r7,#0
0000e8  da00              BGE      |L1.236|
;;;119              Bit = 1;
0000ea  2701              MOVS     r7,#1
                  |L1.236|
;;;120            }
;;;121            _EditBin(Bit, pObj, hObj);
0000ec  4632              MOV      r2,r6
0000ee  4621              MOV      r1,r4
0000f0  b2f8              UXTB     r0,r7
0000f2  f7fffffe          BL       _EditBin
;;;122          }
;;;123          break;
0000f6  e01c              B        |L1.306|
                  |L1.248|
;;;124        case GUI_KEY_RIGHT:
;;;125          EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
0000f8  6c20              LDR      r0,[r4,#0x40]
0000fa  1c41              ADDS     r1,r0,#1
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       EDIT__SetCursorPos
;;;126          break;
000102  e016              B        |L1.306|
                  |L1.260|
;;;127        case GUI_KEY_LEFT:
;;;128          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000104  6c20              LDR      r0,[r4,#0x40]
000106  1e41              SUBS     r1,r0,#1
000108  4620              MOV      r0,r4
00010a  f7fffffe          BL       EDIT__SetCursorPos
;;;129          break;
00010e  e010              B        |L1.306|
                  |L1.272|
;;;130        default:
;;;131          {
;;;132            int Bit = _BinChar2Int(Key);
000110  4628              MOV      r0,r5
000112  f7fffffe          BL       _BinChar2Int
000116  4607              MOV      r7,r0
;;;133            if (Bit >= 0) {
000118  2f00              CMP      r7,#0
00011a  db09              BLT      |L1.304|
;;;134              _EditBin(Bit, pObj, hObj);
00011c  4632              MOV      r2,r6
00011e  4621              MOV      r1,r4
000120  b2f8              UXTB     r0,r7
000122  f7fffffe          BL       _EditBin
;;;135              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000126  6c20              LDR      r0,[r4,#0x40]
000128  1c41              ADDS     r1,r0,#1
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.304|
;;;136            }
;;;137          }
;;;138          break;
000130  bf00              NOP      
                  |L1.306|
000132  bf00              NOP                            ;114
;;;139        }
;;;140        _UpdateBuffer(hObj);
000134  4630              MOV      r0,r6
000136  f7fffffe          BL       _UpdateBuffer
                  |L1.314|
;;;141      }
;;;142    }
00013a  e8bd81f0          POP      {r4-r8,pc}
;;;143    
                          ENDP

                  EDIT_SetBinMode PROC
;;;153    */
;;;154    void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
00013e  e92d47f0          PUSH     {r4-r10,lr}
000142  4607              MOV      r7,r0
000144  4688              MOV      r8,r1
000146  4691              MOV      r9,r2
000148  461e              MOV      r6,r3
;;;155      EDIT_Obj* pObj;
;;;156      int MaxLen;
;;;157      WM_LOCK();
00014a  f7fffffe          BL       GUI_Lock
;;;158      if (hEdit) {
00014e  b357              CBZ      r7,|L1.422|
;;;159        pObj = EDIT_H2P(hEdit);
000150  4638              MOV      r0,r7
000152  f7fffffe          BL       GUI_ALLOC_h2p
000156  4604              MOV      r4,r0
;;;160        pObj->pfAddKeyEx    = _AddKeyBin;
000158  4815              LDR      r0,|L1.432|
00015a  64e0              STR      r0,[r4,#0x4c]
;;;161        pObj->pfUpdateBuffer = _UpdateBuffer;
00015c  4815              LDR      r0,|L1.436|
00015e  6520              STR      r0,[r4,#0x50]
;;;162        pObj->CurrentValue = Value;
000160  f8c4803c          STR      r8,[r4,#0x3c]
;;;163        pObj->CursorPos = 0;
000164  2000              MOVS     r0,#0
000166  6420              STR      r0,[r4,#0x40]
;;;164        MaxLen = pObj->MaxLen;
000168  f9b4502a          LDRSH    r5,[r4,#0x2a]
;;;165        if (MaxLen <= 0 ) {
00016c  2d00              CMP      r5,#0
00016e  dc03              BGT      |L1.376|
;;;166          MaxLen = _GetNumDigits(Max);
000170  4630              MOV      r0,r6
000172  f7fffffe          BL       _GetNumDigits
000176  4605              MOV      r5,r0
                  |L1.376|
;;;167        }
;;;168        if (MaxLen > 32) {
000178  2d20              CMP      r5,#0x20
00017a  dd00              BLE      |L1.382|
;;;169          MaxLen = 32;
00017c  2520              MOVS     r5,#0x20
                  |L1.382|
;;;170        }
;;;171        if (MaxLen != pObj->MaxLen) {
00017e  f9b4002a          LDRSH    r0,[r4,#0x2a]
000182  42a8              CMP      r0,r5
000184  d003              BEQ      |L1.398|
;;;172          EDIT_SetMaxLen(hEdit, MaxLen);
000186  4629              MOV      r1,r5
000188  4638              MOV      r0,r7
00018a  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.398|
;;;173        }
;;;174        pObj->Min = Min;
00018e  f8c49030          STR      r9,[r4,#0x30]
;;;175        pObj->Max = Max;
000192  6366              STR      r6,[r4,#0x34]
;;;176        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
000194  2001              MOVS     r0,#1
000196  f8840048          STRB     r0,[r4,#0x48]
;;;177        _UpdateBuffer(hEdit);
00019a  4638              MOV      r0,r7
00019c  f7fffffe          BL       _UpdateBuffer
;;;178        WM_Invalidate(hEdit);
0001a0  4638              MOV      r0,r7
0001a2  f7fffffe          BL       WM_InvalidateWindow
                  |L1.422|
;;;179      }
;;;180      WM_UNLOCK();
0001a6  f7fffffe          BL       GUI_Unlock
;;;181    }
0001aa  e8bd87f0          POP      {r4-r10,pc}
;;;182    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L1.432|
                          DCD      _AddKeyBin
                  |L1.436|
                          DCD      _UpdateBuffer
