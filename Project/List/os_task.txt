; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\os_task.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\os_task.crf ..\Ucosii\Src\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskCreate PROC
;;;214    #if OS_TASK_CREATE_EN > 0
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;216    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
00000c  f04f0900          MOV      r9,#0
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
000010  2c1f              CMP      r4,#0x1f
000012  dd02              BLE      |L1.26|
;;;227            return (OS_ERR_PRIO_INVALID);
000014  202a              MOVS     r0,#0x2a
                  |L1.22|
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;232            OS_EXIT_CRITICAL();
;;;233            return (OS_ERR_TASK_CREATE_ISR);
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
000016  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4681              MOV      r9,r0                 ;230
000020  48f8              LDR      r0,|L1.1028|
000022  7800              LDRB     r0,[r0,#0]            ;231  ; OSIntNesting
000024  2800              CMP      r0,#0                 ;231
000026  dd04              BLE      |L1.50|
000028  4648              MOV      r0,r9                 ;232
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  203c              MOVS     r0,#0x3c              ;233
000030  e7f1              B        |L1.22|
                  |L1.50|
000032  48f5              LDR      r0,|L1.1032|
000034  f8500024          LDR      r0,[r0,r4,LSL #2]     ;235
000038  bb60              CBNZ     r0,|L1.148|
00003a  2001              MOVS     r0,#1                 ;236
00003c  49f2              LDR      r1,|L1.1032|
00003e  f8410024          STR      r0,[r1,r4,LSL #2]     ;236
000042  4648              MOV      r0,r9                 ;238
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2300              MOVS     r3,#0                 ;239
00004a  4642              MOV      r2,r8                 ;239
00004c  4639              MOV      r1,r7                 ;239
00004e  4630              MOV      r0,r6                 ;239
000050  f7fffffe          BL       OSTaskStkInit
000054  4682              MOV      r10,r0                ;239
000056  2000              MOVS     r0,#0                 ;240
000058  9000              STR      r0,[sp,#0]            ;240
00005a  9001              STR      r0,[sp,#4]            ;240
00005c  4603              MOV      r3,r0                 ;240
00005e  4602              MOV      r2,r0                 ;240
000060  4651              MOV      r1,r10                ;240
000062  9002              STR      r0,[sp,#8]            ;240
000064  4620              MOV      r0,r4                 ;240
000066  f7fffffe          BL       OS_TCBInit
00006a  4605              MOV      r5,r0                 ;240
00006c  b935              CBNZ     r5,|L1.124|
00006e  48e7              LDR      r0,|L1.1036|
000070  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
000072  2801              CMP      r0,#1                 ;242
000074  d10c              BNE      |L1.144|
000076  f7fffffe          BL       OS_Sched
00007a  e009              B        |L1.144|
                  |L1.124|
00007c  f7fffffe          BL       OS_CPU_SR_Save
000080  4681              MOV      r9,r0                 ;246
000082  2000              MOVS     r0,#0                 ;247
000084  49e0              LDR      r1,|L1.1032|
000086  f8410024          STR      r0,[r1,r4,LSL #2]     ;247
00008a  4648              MOV      r0,r9                 ;248
00008c  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.144|
000090  4628              MOV      r0,r5                 ;250
000092  e7c0              B        |L1.22|
                  |L1.148|
000094  4648              MOV      r0,r9                 ;252
000096  f7fffffe          BL       OS_CPU_SR_Restore
00009a  2028              MOVS     r0,#0x28              ;253
00009c  e7bb              B        |L1.22|
;;;255    #endif
                          ENDP

                  OSTaskCreateExt PROC
;;;327    #if OS_TASK_CREATE_EXT_EN > 0
;;;328    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
00009e  e92d4ff0          PUSH     {r4-r11,lr}
;;;329                            void    *p_arg,
;;;330                            OS_STK  *ptos,
;;;331                            INT8U    prio,
;;;332                            INT16U   id,
;;;333                            OS_STK  *pbos,
;;;334                            INT32U   stk_size,
;;;335                            void    *pext,
;;;336                            INT16U   opt)
;;;337    {
0000a2  b085              SUB      sp,sp,#0x14
0000a4  4607              MOV      r7,r0
0000a6  4688              MOV      r8,r1
0000a8  4691              MOV      r9,r2
0000aa  461c              MOV      r4,r3
0000ac  e9ddb611          LDRD     r11,r6,[sp,#0x44]
0000b0  f8dda038          LDR      r10,[sp,#0x38]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
0000b4  2000              MOVS     r0,#0
0000b6  9003              STR      r0,[sp,#0xc]
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
0000b8  2c1f              CMP      r4,#0x1f
0000ba  dd03              BLE      |L1.196|
;;;348            return (OS_ERR_PRIO_INVALID);
0000bc  202a              MOVS     r0,#0x2a
                  |L1.190|
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;353            OS_EXIT_CRITICAL();
;;;354            return (OS_ERR_TASK_CREATE_ISR);
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
0000be  b005              ADD      sp,sp,#0x14
0000c0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.196|
0000c4  f7fffffe          BL       OS_CPU_SR_Save
0000c8  9003              STR      r0,[sp,#0xc]          ;351
0000ca  48ce              LDR      r0,|L1.1028|
0000cc  7800              LDRB     r0,[r0,#0]            ;352  ; OSIntNesting
0000ce  2800              CMP      r0,#0                 ;352
0000d0  dd04              BLE      |L1.220|
0000d2  9803              LDR      r0,[sp,#0xc]          ;353
0000d4  f7fffffe          BL       OS_CPU_SR_Restore
0000d8  203c              MOVS     r0,#0x3c              ;354
0000da  e7f0              B        |L1.190|
                  |L1.220|
0000dc  48ca              LDR      r0,|L1.1032|
0000de  f8500024          LDR      r0,[r0,r4,LSL #2]     ;356
0000e2  bb60              CBNZ     r0,|L1.318|
0000e4  2001              MOVS     r0,#1                 ;357
0000e6  49c8              LDR      r1,|L1.1032|
0000e8  f8410024          STR      r0,[r1,r4,LSL #2]     ;357
0000ec  9803              LDR      r0,[sp,#0xc]          ;359
0000ee  f7fffffe          BL       OS_CPU_SR_Restore
0000f2  4633              MOV      r3,r6                 ;365
0000f4  464a              MOV      r2,r9                 ;365
0000f6  4641              MOV      r1,r8                 ;365
0000f8  4638              MOV      r0,r7                 ;365
0000fa  f7fffffe          BL       OSTaskStkInit
0000fe  9004              STR      r0,[sp,#0x10]         ;365
000100  9810              LDR      r0,[sp,#0x40]         ;366
000102  4653              MOV      r3,r10                ;366
000104  e9cdb601          STRD     r11,r6,[sp,#4]        ;366
000108  9000              STR      r0,[sp,#0]            ;366
00010a  4620              MOV      r0,r4                 ;366
00010c  9a0f              LDR      r2,[sp,#0x3c]         ;366
00010e  9904              LDR      r1,[sp,#0x10]         ;366
000110  f7fffffe          BL       OS_TCBInit
000114  4605              MOV      r5,r0                 ;366
000116  b935              CBNZ     r5,|L1.294|
000118  48bc              LDR      r0,|L1.1036|
00011a  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
00011c  2801              CMP      r0,#1                 ;368
00011e  d10c              BNE      |L1.314|
000120  f7fffffe          BL       OS_Sched
000124  e009              B        |L1.314|
                  |L1.294|
000126  f7fffffe          BL       OS_CPU_SR_Save
00012a  9003              STR      r0,[sp,#0xc]          ;372
00012c  2000              MOVS     r0,#0                 ;373
00012e  49b6              LDR      r1,|L1.1032|
000130  f8410024          STR      r0,[r1,r4,LSL #2]     ;373
000134  9803              LDR      r0,[sp,#0xc]          ;374
000136  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.314|
00013a  4628              MOV      r0,r5                 ;376
00013c  e7bf              B        |L1.190|
                  |L1.318|
00013e  9803              LDR      r0,[sp,#0xc]          ;378
000140  f7fffffe          BL       OS_CPU_SR_Restore
000144  2028              MOVS     r0,#0x28              ;379
000146  e7ba              B        |L1.190|
;;;381    #endif
                          ENDP

                  OSTaskDel PROC
;;;419    #if OS_TASK_DEL_EN > 0
;;;420    INT8U  OSTaskDel (INT8U prio)
000148  b570              PUSH     {r4-r6,lr}
;;;421    {
00014a  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
00014c  2600              MOVS     r6,#0
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
00014e  48ad              LDR      r0,|L1.1028|
000150  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000152  2800              CMP      r0,#0
000154  dd01              BLE      |L1.346|
;;;433            return (OS_ERR_TASK_DEL_ISR);
000156  2040              MOVS     r0,#0x40
                  |L1.344|
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
000158  bd70              POP      {r4-r6,pc}
                  |L1.346|
00015a  2d1f              CMP      r5,#0x1f              ;435
00015c  d101              BNE      |L1.354|
00015e  203e              MOVS     r0,#0x3e              ;436
000160  e7fa              B        |L1.344|
                  |L1.354|
000162  2d1f              CMP      r5,#0x1f              ;439
000164  db03              BLT      |L1.366|
000166  2dff              CMP      r5,#0xff              ;440
000168  d001              BEQ      |L1.366|
00016a  202a              MOVS     r0,#0x2a              ;441
00016c  e7f4              B        |L1.344|
                  |L1.366|
00016e  f7fffffe          BL       OS_CPU_SR_Save
000172  4606              MOV      r6,r0                 ;447
000174  2dff              CMP      r5,#0xff              ;448
000176  d103              BNE      |L1.384|
000178  48a5              LDR      r0,|L1.1040|
00017a  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
00017c  f8905028          LDRB     r5,[r0,#0x28]         ;449
                  |L1.384|
000180  48a1              LDR      r0,|L1.1032|
000182  f8504025          LDR      r4,[r0,r5,LSL #2]     ;451
000186  b924              CBNZ     r4,|L1.402|
000188  4630              MOV      r0,r6                 ;453
00018a  f7fffffe          BL       OS_CPU_SR_Restore
00018e  2043              MOVS     r0,#0x43              ;454
000190  e7e2              B        |L1.344|
                  |L1.402|
000192  2c01              CMP      r4,#1                 ;456
000194  d104              BNE      |L1.416|
000196  4630              MOV      r0,r6                 ;457
000198  f7fffffe          BL       OS_CPU_SR_Restore
00019c  203d              MOVS     r0,#0x3d              ;458
00019e  e7db              B        |L1.344|
                  |L1.416|
0001a0  f8140f2a          LDRB     r0,[r4,#0x2a]!        ;461
0001a4  499b              LDR      r1,|L1.1044|
0001a6  5c08              LDRB     r0,[r1,r0]            ;461
0001a8  7861              LDRB     r1,[r4,#1]            ;461
0001aa  4388              BICS     r0,r0,r1              ;461
0001ac  7821              LDRB     r1,[r4,#0]            ;461
0001ae  4a99              LDR      r2,|L1.1044|
0001b0  5450              STRB     r0,[r2,r1]            ;461
0001b2  f814092a          LDRB     r0,[r4],#-0x2a        ;462
0001b6  4611              MOV      r1,r2                 ;462
0001b8  5c08              LDRB     r0,[r1,r0]            ;462
0001ba  b930              CBNZ     r0,|L1.458|
0001bc  f894102c          LDRB     r1,[r4,#0x2c]         ;463
0001c0  4895              LDR      r0,|L1.1048|
0001c2  7800              LDRB     r0,[r0,#0]            ;463  ; OSRdyGrp
0001c4  4388              BICS     r0,r0,r1              ;463
0001c6  4994              LDR      r1,|L1.1048|
0001c8  7008              STRB     r0,[r1,#0]            ;463
                  |L1.458|
0001ca  69e0              LDR      r0,[r4,#0x1c]         ;467
0001cc  b118              CBZ      r0,|L1.470|
0001ce  4620              MOV      r0,r4                 ;468
0001d0  69e1              LDR      r1,[r4,#0x1c]         ;468
0001d2  f7fffffe          BL       OS_EventTaskRemove
                  |L1.470|
0001d6  2000              MOVS     r0,#0                 ;484
0001d8  84a0              STRH     r0,[r4,#0x24]         ;484
0001da  f8840026          STRB     r0,[r4,#0x26]         ;485
0001de  f8840027          STRB     r0,[r4,#0x27]         ;486
0001e2  488e              LDR      r0,|L1.1052|
0001e4  7800              LDRB     r0,[r0,#0]            ;487  ; OSLockNesting
0001e6  28ff              CMP      r0,#0xff              ;487
0001e8  d204              BCS      |L1.500|
0001ea  488c              LDR      r0,|L1.1052|
0001ec  7800              LDRB     r0,[r0,#0]            ;488  ; OSLockNesting
0001ee  1c40              ADDS     r0,r0,#1              ;488
0001f0  498a              LDR      r1,|L1.1052|
0001f2  7008              STRB     r0,[r1,#0]            ;488
                  |L1.500|
0001f4  4630              MOV      r0,r6                 ;490
0001f6  f7fffffe          BL       OS_CPU_SR_Restore
0001fa  f7fffffe          BL       OS_Dummy
0001fe  f7fffffe          BL       OS_CPU_SR_Save
000202  4606              MOV      r6,r0                 ;492
000204  4885              LDR      r0,|L1.1052|
000206  7800              LDRB     r0,[r0,#0]            ;493  ; OSLockNesting
000208  2800              CMP      r0,#0                 ;493
00020a  dd04              BLE      |L1.534|
00020c  4883              LDR      r0,|L1.1052|
00020e  7800              LDRB     r0,[r0,#0]            ;494  ; OSLockNesting
000210  1e40              SUBS     r0,r0,#1              ;494
000212  4982              LDR      r1,|L1.1052|
000214  7008              STRB     r0,[r1,#0]            ;494
                  |L1.534|
000216  4620              MOV      r0,r4                 ;496
000218  f7fffffe          BL       OSTaskDelHook
00021c  4880              LDR      r0,|L1.1056|
00021e  7800              LDRB     r0,[r0,#0]            ;497  ; OSTaskCtr
000220  1e40              SUBS     r0,r0,#1              ;497
000222  497f              LDR      r1,|L1.1056|
000224  7008              STRB     r0,[r1,#0]            ;497
000226  2000              MOVS     r0,#0                 ;498
000228  4977              LDR      r1,|L1.1032|
00022a  f8410025          STR      r0,[r1,r5,LSL #2]     ;498
00022e  69a0              LDR      r0,[r4,#0x18]         ;499
000230  b930              CBNZ     r0,|L1.576|
000232  2000              MOVS     r0,#0                 ;500
000234  6961              LDR      r1,[r4,#0x14]         ;500
000236  6188              STR      r0,[r1,#0x18]         ;500
000238  497a              LDR      r1,|L1.1060|
00023a  6960              LDR      r0,[r4,#0x14]         ;501
00023c  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
00023e  e005              B        |L1.588|
                  |L1.576|
000240  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;503
000244  6148              STR      r0,[r1,#0x14]         ;503
000246  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;504
00024a  6188              STR      r0,[r1,#0x18]         ;504
                  |L1.588|
00024c  4876              LDR      r0,|L1.1064|
00024e  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBFreeList
000250  6160              STR      r0,[r4,#0x14]         ;506
000252  4875              LDR      r0,|L1.1064|
000254  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
000256  203f              MOVS     r0,#0x3f              ;509
000258  f8840044          STRB     r0,[r4,#0x44]         ;509
00025c  2100              MOVS     r1,#0                 ;510
00025e  2045              MOVS     r0,#0x45              ;510
000260  5501              STRB     r1,[r0,r4]            ;510
000262  4630              MOV      r0,r6                 ;512
000264  f7fffffe          BL       OS_CPU_SR_Restore
000268  4868              LDR      r0,|L1.1036|
00026a  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
00026c  2801              CMP      r0,#1                 ;513
00026e  d101              BNE      |L1.628|
000270  f7fffffe          BL       OS_Sched
                  |L1.628|
000274  2000              MOVS     r0,#0                 ;516
000276  e76f              B        |L1.344|
;;;518    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;566    #if OS_TASK_DEL_EN > 0
;;;567    INT8U  OSTaskDelReq (INT8U prio)
000278  e92d41f0          PUSH     {r4-r8,lr}
;;;568    {
00027c  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
00027e  2700              MOVS     r7,#0
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000280  2c1f              CMP      r4,#0x1f
000282  d102              BNE      |L1.650|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
000284  203e              MOVS     r0,#0x3e
                  |L1.646|
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        ptcb = OSTCBPrioTbl[prio];
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;604        OS_EXIT_CRITICAL();
;;;605        return (OS_ERR_NONE);
;;;606    }
000286  e8bd81f0          POP      {r4-r8,pc}
                  |L1.650|
00028a  2c1f              CMP      r4,#0x1f              ;581
00028c  db03              BLT      |L1.662|
00028e  2cff              CMP      r4,#0xff              ;582
000290  d001              BEQ      |L1.662|
000292  202a              MOVS     r0,#0x2a              ;583
000294  e7f7              B        |L1.646|
                  |L1.662|
000296  2cff              CMP      r4,#0xff              ;587
000298  d10b              BNE      |L1.690|
00029a  f7fffffe          BL       OS_CPU_SR_Save
00029e  4607              MOV      r7,r0                 ;588
0002a0  485b              LDR      r0,|L1.1040|
0002a2  6800              LDR      r0,[r0,#0]            ;589  ; OSTCBCur
0002a4  f890602d          LDRB     r6,[r0,#0x2d]         ;589
0002a8  4638              MOV      r0,r7                 ;590
0002aa  f7fffffe          BL       OS_CPU_SR_Restore
0002ae  4630              MOV      r0,r6                 ;591
0002b0  e7e9              B        |L1.646|
                  |L1.690|
0002b2  f7fffffe          BL       OS_CPU_SR_Save
0002b6  4607              MOV      r7,r0                 ;593
0002b8  4853              LDR      r0,|L1.1032|
0002ba  f8505024          LDR      r5,[r0,r4,LSL #2]     ;594
0002be  b925              CBNZ     r5,|L1.714|
0002c0  4638              MOV      r0,r7                 ;596
0002c2  f7fffffe          BL       OS_CPU_SR_Restore
0002c6  2043              MOVS     r0,#0x43              ;597
0002c8  e7dd              B        |L1.646|
                  |L1.714|
0002ca  2d01              CMP      r5,#1                 ;599
0002cc  d104              BNE      |L1.728|
0002ce  4638              MOV      r0,r7                 ;600
0002d0  f7fffffe          BL       OS_CPU_SR_Restore
0002d4  203d              MOVS     r0,#0x3d              ;601
0002d6  e7d6              B        |L1.646|
                  |L1.728|
0002d8  203f              MOVS     r0,#0x3f              ;603
0002da  f885002d          STRB     r0,[r5,#0x2d]         ;603
0002de  4638              MOV      r0,r7                 ;604
0002e0  f7fffffe          BL       OS_CPU_SR_Restore
0002e4  2000              MOVS     r0,#0                 ;605
0002e6  e7ce              B        |L1.646|
;;;607    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;634    #if OS_TASK_NAME_SIZE > 1
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
0002e8  e92d47f0          PUSH     {r4-r10,lr}
;;;636    {
0002ec  4605              MOV      r5,r0
0002ee  460f              MOV      r7,r1
0002f0  4614              MOV      r4,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
0002f2  f04f0800          MOV      r8,#0
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
0002f6  b914              CBNZ     r4,|L1.766|
;;;647            return (0);
0002f8  2000              MOVS     r0,#0
                  |L1.762|
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
;;;661            *perr = OS_ERR_NAME_GET_ISR;
;;;662            return (0);
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
0002fa  e8bd87f0          POP      {r4-r10,pc}
                  |L1.766|
0002fe  2d1f              CMP      r5,#0x1f              ;649
000300  dd05              BLE      |L1.782|
000302  2dff              CMP      r5,#0xff              ;650
000304  d003              BEQ      |L1.782|
000306  202a              MOVS     r0,#0x2a              ;651
000308  7020              STRB     r0,[r4,#0]            ;651
00030a  2000              MOVS     r0,#0                 ;652
00030c  e7f5              B        |L1.762|
                  |L1.782|
00030e  b91f              CBNZ     r7,|L1.792|
000310  200c              MOVS     r0,#0xc               ;656
000312  7020              STRB     r0,[r4,#0]            ;656
000314  2000              MOVS     r0,#0                 ;657
000316  e7f0              B        |L1.762|
                  |L1.792|
000318  483a              LDR      r0,|L1.1028|
00031a  7800              LDRB     r0,[r0,#0]            ;660  ; OSIntNesting
00031c  2800              CMP      r0,#0                 ;660
00031e  dd03              BLE      |L1.808|
000320  2011              MOVS     r0,#0x11              ;661
000322  7020              STRB     r0,[r4,#0]            ;661
000324  2000              MOVS     r0,#0                 ;662
000326  e7e8              B        |L1.762|
                  |L1.808|
000328  f7fffffe          BL       OS_CPU_SR_Save
00032c  4680              MOV      r8,r0                 ;664
00032e  2dff              CMP      r5,#0xff              ;665
000330  d103              BNE      |L1.826|
000332  4837              LDR      r0,|L1.1040|
000334  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
000336  f8905028          LDRB     r5,[r0,#0x28]         ;666
                  |L1.826|
00033a  4833              LDR      r0,|L1.1032|
00033c  f8506025          LDR      r6,[r0,r5,LSL #2]     ;668
000340  b936              CBNZ     r6,|L1.848|
000342  4640              MOV      r0,r8                 ;670
000344  f7fffffe          BL       OS_CPU_SR_Restore
000348  2043              MOVS     r0,#0x43              ;671
00034a  7020              STRB     r0,[r4,#0]            ;671
00034c  2000              MOVS     r0,#0                 ;672
00034e  e7d4              B        |L1.762|
                  |L1.848|
000350  2e01              CMP      r6,#1                 ;674
000352  d106              BNE      |L1.866|
000354  4640              MOV      r0,r8                 ;675
000356  f7fffffe          BL       OS_CPU_SR_Restore
00035a  2043              MOVS     r0,#0x43              ;676
00035c  7020              STRB     r0,[r4,#0]            ;676
00035e  2000              MOVS     r0,#0                 ;677
000360  e7cb              B        |L1.762|
                  |L1.866|
000362  f1060144          ADD      r1,r6,#0x44           ;679
000366  4638              MOV      r0,r7                 ;679
000368  f7fffffe          BL       OS_StrCopy
00036c  4681              MOV      r9,r0                 ;679
00036e  4640              MOV      r0,r8                 ;680
000370  f7fffffe          BL       OS_CPU_SR_Restore
000374  2000              MOVS     r0,#0                 ;681
000376  7020              STRB     r0,[r4,#0]            ;681
000378  4648              MOV      r0,r9                 ;682
00037a  e7be              B        |L1.762|
;;;684    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;713    #if OS_TASK_NAME_SIZE > 1
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
00037c  e92d47f0          PUSH     {r4-r10,lr}
;;;715    {
000380  4605              MOV      r5,r0
000382  460f              MOV      r7,r1
000384  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
000386  f04f0900          MOV      r9,#0
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
00038a  b90c              CBNZ     r4,|L1.912|
                  |L1.908|
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
;;;740            *perr = OS_ERR_NAME_SET_ISR;
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
00038c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.912|
000390  2d1f              CMP      r5,#0x1f              ;728
000392  dd04              BLE      |L1.926|
000394  2dff              CMP      r5,#0xff              ;729
000396  d002              BEQ      |L1.926|
000398  202a              MOVS     r0,#0x2a              ;730
00039a  7020              STRB     r0,[r4,#0]            ;730
00039c  e7f6              B        |L1.908|
                  |L1.926|
00039e  b917              CBNZ     r7,|L1.934|
0003a0  200c              MOVS     r0,#0xc               ;735
0003a2  7020              STRB     r0,[r4,#0]            ;735
0003a4  e7f2              B        |L1.908|
                  |L1.934|
0003a6  4817              LDR      r0,|L1.1028|
0003a8  7800              LDRB     r0,[r0,#0]            ;739  ; OSIntNesting
0003aa  2800              CMP      r0,#0                 ;739
0003ac  dd02              BLE      |L1.948|
0003ae  2012              MOVS     r0,#0x12              ;740
0003b0  7020              STRB     r0,[r4,#0]            ;740
0003b2  e7eb              B        |L1.908|
                  |L1.948|
0003b4  f7fffffe          BL       OS_CPU_SR_Save
0003b8  4681              MOV      r9,r0                 ;743
0003ba  2dff              CMP      r5,#0xff              ;744
0003bc  d103              BNE      |L1.966|
0003be  4814              LDR      r0,|L1.1040|
0003c0  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
0003c2  f8905028          LDRB     r5,[r0,#0x28]         ;745
                  |L1.966|
0003c6  4810              LDR      r0,|L1.1032|
0003c8  f8506025          LDR      r6,[r0,r5,LSL #2]     ;747
0003cc  b92e              CBNZ     r6,|L1.986|
0003ce  4648              MOV      r0,r9                 ;749
0003d0  f7fffffe          BL       OS_CPU_SR_Restore
0003d4  2043              MOVS     r0,#0x43              ;750
0003d6  7020              STRB     r0,[r4,#0]            ;750
0003d8  e7d8              B        |L1.908|
                  |L1.986|
0003da  2e01              CMP      r6,#1                 ;753
0003dc  d105              BNE      |L1.1002|
0003de  4648              MOV      r0,r9                 ;754
0003e0  f7fffffe          BL       OS_CPU_SR_Restore
0003e4  2043              MOVS     r0,#0x43              ;755
0003e6  7020              STRB     r0,[r4,#0]            ;755
0003e8  e7d0              B        |L1.908|
                  |L1.1002|
0003ea  4638              MOV      r0,r7                 ;758
0003ec  f7fffffe          BL       OS_StrLen
0003f0  4680              MOV      r8,r0                 ;758
0003f2  f1b80f0f          CMP      r8,#0xf               ;759
0003f6  dd19              BLE      |L1.1068|
0003f8  4648              MOV      r0,r9                 ;760
0003fa  f7fffffe          BL       OS_CPU_SR_Restore
0003fe  2041              MOVS     r0,#0x41              ;761
000400  7020              STRB     r0,[r4,#0]            ;761
000402  e7c3              B        |L1.908|
                  |L1.1028|
                          DCD      OSIntNesting
                  |L1.1032|
                          DCD      OSTCBPrioTbl
                  |L1.1036|
                          DCD      OSRunning
                  |L1.1040|
                          DCD      OSTCBCur
                  |L1.1044|
                          DCD      OSRdyTbl
                  |L1.1048|
                          DCD      OSRdyGrp
                  |L1.1052|
                          DCD      OSLockNesting
                  |L1.1056|
                          DCD      OSTaskCtr
                  |L1.1060|
                          DCD      OSTCBList
                  |L1.1064|
                          DCD      OSTCBFreeList
                  |L1.1068|
00042c  4639              MOV      r1,r7                 ;764
00042e  f1060044          ADD      r0,r6,#0x44           ;764
000432  f7fffffe          BL       OS_StrCopy
000436  4648              MOV      r0,r9                 ;765
000438  f7fffffe          BL       OS_CPU_SR_Restore
00043c  2000              MOVS     r0,#0                 ;766
00043e  7020              STRB     r0,[r4,#0]            ;766
000440  bf00              NOP      
000442  e7a3              B        |L1.908|
;;;768    #endif
                          ENDP

                  OSTaskResume PROC
;;;789    #if OS_TASK_SUSPEND_EN > 0
;;;790    INT8U  OSTaskResume (INT8U prio)
000444  b570              PUSH     {r4-r6,lr}
;;;791    {
000446  4605              MOV      r5,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
000448  2600              MOVS     r6,#0
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
00044a  2d1f              CMP      r5,#0x1f
00044c  db01              BLT      |L1.1106|
;;;801            return (OS_ERR_PRIO_INVALID);
00044e  202a              MOVS     r0,#0x2a
                  |L1.1104|
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
;;;805        ptcb = OSTCBPrioTbl[prio];
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
;;;807            OS_EXIT_CRITICAL();
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
;;;829            }
;;;830            return (OS_ERR_NONE);
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
000450  bd70              POP      {r4-r6,pc}
                  |L1.1106|
000452  f7fffffe          BL       OS_CPU_SR_Save
000456  4606              MOV      r6,r0                 ;804
000458  484f              LDR      r0,|L1.1432|
00045a  f8504025          LDR      r4,[r0,r5,LSL #2]     ;805
00045e  b924              CBNZ     r4,|L1.1130|
000460  4630              MOV      r0,r6                 ;807
000462  f7fffffe          BL       OS_CPU_SR_Restore
000466  2046              MOVS     r0,#0x46              ;808
000468  e7f2              B        |L1.1104|
                  |L1.1130|
00046a  2c01              CMP      r4,#1                 ;810
00046c  d104              BNE      |L1.1144|
00046e  4630              MOV      r0,r6                 ;811
000470  f7fffffe          BL       OS_CPU_SR_Restore
000474  2043              MOVS     r0,#0x43              ;812
000476  e7eb              B        |L1.1104|
                  |L1.1144|
000478  f8940026          LDRB     r0,[r4,#0x26]         ;814
00047c  f0100f08          TST      r0,#8                 ;814
000480  d02f              BEQ      |L1.1250|
000482  f8140f26          LDRB     r0,[r4,#0x26]!        ;815
000486  f0200008          BIC      r0,r0,#8              ;815
00048a  7020              STRB     r0,[r4,#0]            ;815
00048c  f8140926          LDRB     r0,[r4],#-0x26        ;816
000490  bb10              CBNZ     r0,|L1.1240|
000492  8ca0              LDRH     r0,[r4,#0x24]         ;817
000494  b9e0              CBNZ     r0,|L1.1232|
000496  f104042a          ADD      r4,r4,#0x2a           ;818
00049a  78a0              LDRB     r0,[r4,#2]            ;818
00049c  493f              LDR      r1,|L1.1436|
00049e  7809              LDRB     r1,[r1,#0]            ;818  ; OSRdyGrp
0004a0  ea400001          ORR      r0,r0,r1              ;818
0004a4  493d              LDR      r1,|L1.1436|
0004a6  7008              STRB     r0,[r1,#0]            ;818
0004a8  7820              LDRB     r0,[r4,#0]            ;819
0004aa  493d              LDR      r1,|L1.1440|
0004ac  5c08              LDRB     r0,[r1,r0]            ;819
0004ae  7861              LDRB     r1,[r4,#1]            ;819
0004b0  ea400001          ORR      r0,r0,r1              ;819
0004b4  f814192a          LDRB     r1,[r4],#-0x2a        ;819
0004b8  4a39              LDR      r2,|L1.1440|
0004ba  5450              STRB     r0,[r2,r1]            ;819
0004bc  4630              MOV      r0,r6                 ;820
0004be  f7fffffe          BL       OS_CPU_SR_Restore
0004c2  4838              LDR      r0,|L1.1444|
0004c4  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
0004c6  2801              CMP      r0,#1                 ;821
0004c8  d109              BNE      |L1.1246|
0004ca  f7fffffe          BL       OS_Sched
0004ce  e006              B        |L1.1246|
                  |L1.1232|
0004d0  4630              MOV      r0,r6                 ;825
0004d2  f7fffffe          BL       OS_CPU_SR_Restore
0004d6  e002              B        |L1.1246|
                  |L1.1240|
0004d8  4630              MOV      r0,r6                 ;828
0004da  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1246|
0004de  2000              MOVS     r0,#0                 ;830
0004e0  e7b6              B        |L1.1104|
                  |L1.1250|
0004e2  4630              MOV      r0,r6                 ;832
0004e4  f7fffffe          BL       OS_CPU_SR_Restore
0004e8  2044              MOVS     r0,#0x44              ;833
0004ea  e7b1              B        |L1.1104|
;;;835    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;940    #if OS_TASK_SUSPEND_EN > 0
;;;941    INT8U  OSTaskSuspend (INT8U prio)
0004ec  e92d41f0          PUSH     {r4-r8,lr}
;;;942    {
0004f0  4605              MOV      r5,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
0004f2  f04f0800          MOV      r8,#0
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
0004f6  2d1f              CMP      r5,#0x1f
0004f8  d102              BNE      |L1.1280|
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
0004fa  2047              MOVS     r0,#0x47
                  |L1.1276|
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
;;;964            prio = OSTCBCur->OSTCBPrio;
;;;965            self = OS_TRUE;
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
;;;967            self = OS_TRUE;
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
;;;973            OS_EXIT_CRITICAL();
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
;;;982        if (OSRdyTbl[y] == 0) {
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
0004fc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1280|
000500  2d1f              CMP      r5,#0x1f              ;956
000502  db03              BLT      |L1.1292|
000504  2dff              CMP      r5,#0xff              ;957
000506  d001              BEQ      |L1.1292|
000508  202a              MOVS     r0,#0x2a              ;958
00050a  e7f7              B        |L1.1276|
                  |L1.1292|
00050c  f7fffffe          BL       OS_CPU_SR_Save
000510  4680              MOV      r8,r0                 ;962
000512  2dff              CMP      r5,#0xff              ;963
000514  d105              BNE      |L1.1314|
000516  4824              LDR      r0,|L1.1448|
000518  6800              LDR      r0,[r0,#0]            ;964  ; OSTCBCur
00051a  f8905028          LDRB     r5,[r0,#0x28]         ;964
00051e  2601              MOVS     r6,#1                 ;965
000520  e008              B        |L1.1332|
                  |L1.1314|
000522  4821              LDR      r0,|L1.1448|
000524  6800              LDR      r0,[r0,#0]            ;966  ; OSTCBCur
000526  f8900028          LDRB     r0,[r0,#0x28]         ;966
00052a  42a8              CMP      r0,r5                 ;966
00052c  d101              BNE      |L1.1330|
00052e  2601              MOVS     r6,#1                 ;967
000530  e000              B        |L1.1332|
                  |L1.1330|
000532  2600              MOVS     r6,#0                 ;969
                  |L1.1332|
000534  4818              LDR      r0,|L1.1432|
000536  f8504025          LDR      r4,[r0,r5,LSL #2]     ;971
00053a  b924              CBNZ     r4,|L1.1350|
00053c  4640              MOV      r0,r8                 ;973
00053e  f7fffffe          BL       OS_CPU_SR_Restore
000542  2048              MOVS     r0,#0x48              ;974
000544  e7da              B        |L1.1276|
                  |L1.1350|
000546  2c01              CMP      r4,#1                 ;976
000548  d104              BNE      |L1.1364|
00054a  4640              MOV      r0,r8                 ;977
00054c  f7fffffe          BL       OS_CPU_SR_Restore
000550  2043              MOVS     r0,#0x43              ;978
000552  e7d3              B        |L1.1276|
                  |L1.1364|
000554  f894702a          LDRB     r7,[r4,#0x2a]         ;980
000558  4811              LDR      r0,|L1.1440|
00055a  5dc0              LDRB     r0,[r0,r7]            ;981
00055c  f894102b          LDRB     r1,[r4,#0x2b]         ;981
000560  4388              BICS     r0,r0,r1              ;981
000562  490f              LDR      r1,|L1.1440|
000564  55c8              STRB     r0,[r1,r7]            ;981
000566  4608              MOV      r0,r1                 ;982
000568  5dc0              LDRB     r0,[r0,r7]            ;982
00056a  b930              CBNZ     r0,|L1.1402|
00056c  f894102c          LDRB     r1,[r4,#0x2c]         ;983
000570  480a              LDR      r0,|L1.1436|
000572  7800              LDRB     r0,[r0,#0]            ;983  ; OSRdyGrp
000574  4388              BICS     r0,r0,r1              ;983
000576  4909              LDR      r1,|L1.1436|
000578  7008              STRB     r0,[r1,#0]            ;983
                  |L1.1402|
00057a  f8940026          LDRB     r0,[r4,#0x26]         ;985
00057e  f0400008          ORR      r0,r0,#8              ;985
000582  f8840026          STRB     r0,[r4,#0x26]         ;985
000586  4640              MOV      r0,r8                 ;986
000588  f7fffffe          BL       OS_CPU_SR_Restore
00058c  2e01              CMP      r6,#1                 ;987
00058e  d101              BNE      |L1.1428|
000590  f7fffffe          BL       OS_Sched
                  |L1.1428|
000594  2000              MOVS     r0,#0                 ;990
000596  e7b1              B        |L1.1276|
;;;992    #endif
                          ENDP

                  |L1.1432|
                          DCD      OSTCBPrioTbl
                  |L1.1436|
                          DCD      OSRdyGrp
                  |L1.1440|
                          DCD      OSRdyTbl
                  |L1.1444|
                          DCD      OSRunning
                  |L1.1448|
                          DCD      OSTCBCur
