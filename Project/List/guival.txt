; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\guival.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\guival.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\Ucosii -I..\Ucosii\Port -I..\Ucosii\Src -I..\Ucosii\Include -I..\Ucgui -I..\Ucgui\Config -I..\Ucgui\GUI_X -I..\Ucgui\GUI -I..\Ucgui\GUI\ConvertColor -I..\Ucgui\GUI\ConvertMono -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\Core -I..\Ucgui\GUI\LCDDriver -I..\Ucgui\GUI\MultiLayer -I..\Ucgui\GUI\Widget -I..\Ucgui\GUI\WM -I..\ExternalDrive\Lcd -I..\ExternalDrive\Touch -I..\Panel -I"D:\Program files\Keil\ARM\RV31\Inc" -I"D:\Program files\Keil\ARM\CMSIS\Include" -I"D:\Program files\Keil\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\guival.crf ..\Ucgui\GUI\Core\GUIVal.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI_DispDecShift PROC
;;;33     */
;;;34     void GUI_DispDecShift(I32 v, U8 Len, U8 Shift) {
000000  b57f              PUSH     {r0-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;35     	char ac[12];
;;;36     	char* s = ac;
000008  a801              ADD      r0,sp,#4
00000a  9000              STR      r0,[sp,#0]
;;;37       GUI_AddDecShift(v, Len, Shift, &s);
00000c  466b              MOV      r3,sp
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GUI_AddDecShift
;;;38       GUI_DispString(ac);
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       GUI_DispString
;;;39     }
00001e  bd7f              POP      {r0-r6,pc}
;;;40     
                          ENDP

                  GUI_DispSDecShift PROC
;;;44     */
;;;45     void GUI_DispSDecShift(I32 v, U8 Len, U8 Shift) {
000020  b57f              PUSH     {r0-r6,lr}
000022  4605              MOV      r5,r0
000024  460c              MOV      r4,r1
000026  4616              MOV      r6,r2
;;;46     	char ac[12];
;;;47     	char* s = ac;
000028  a801              ADD      r0,sp,#4
00002a  9000              STR      r0,[sp,#0]
;;;48       v = GUI_AddSign(v, &s);
00002c  4669              MOV      r1,sp
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GUI_AddSign
000034  4605              MOV      r5,r0
;;;49       GUI_AddDecShift(v, --Len, Shift, &s);
000036  1e60              SUBS     r0,r4,#1
000038  b2c0              UXTB     r0,r0
00003a  4604              MOV      r4,r0
00003c  4601              MOV      r1,r0
00003e  466b              MOV      r3,sp
000040  4632              MOV      r2,r6
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       GUI_AddDecShift
;;;50       GUI_DispString(ac);
000048  a801              ADD      r0,sp,#4
00004a  f7fffffe          BL       GUI_DispString
;;;51     }
00004e  bd7f              POP      {r0-r6,pc}
;;;52     
                          ENDP

                  GUI_DispDecMin PROC
;;;56     */
;;;57     void GUI_DispDecMin(I32 v) {
000050  b51f              PUSH     {r0-r4,lr}
000052  4604              MOV      r4,r0
;;;58     	char ac[12];
;;;59     	char* s = ac;
000054  a801              ADD      r0,sp,#4
000056  9000              STR      r0,[sp,#0]
;;;60       GUI_AddDecMin(v, &s);
000058  4669              MOV      r1,sp
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       GUI_AddDecMin
;;;61       GUI_DispString(ac);
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       GUI_DispString
;;;62     }
000066  bd1f              POP      {r0-r4,pc}
;;;63     
                          ENDP

                  GUI_DispDecSpace PROC
;;;67     */
;;;68     void GUI_DispDecSpace(I32 v, U8 MaxDigits) {
000068  b57f              PUSH     {r0-r6,lr}
00006a  4605              MOV      r5,r0
00006c  460c              MOV      r4,r1
;;;69     	char ac[12];
;;;70     	char* s = ac;
00006e  a801              ADD      r0,sp,#4
000070  9000              STR      r0,[sp,#0]
;;;71       U8 Len;
;;;72       if (v < 0) {
000072  2d00              CMP      r5,#0
000074  da06              BGE      |L1.132|
;;;73         v = GUI_AddSign(v, &s);
000076  4669              MOV      r1,sp
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       GUI_AddSign
00007e  4605              MOV      r5,r0
;;;74         MaxDigits--;
000080  1e60              SUBS     r0,r4,#1
000082  b2c4              UXTB     r4,r0
                  |L1.132|
;;;75       }
;;;76       Len = GUI_Long2Len(v);
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       GUI_Long2Len
00008a  b2c6              UXTB     r6,r0
;;;77       while (Len++ < MaxDigits) {
00008c  e005              B        |L1.154|
                  |L1.142|
;;;78         *s++ = ' ';
00008e  2020              MOVS     r0,#0x20
000090  9900              LDR      r1,[sp,#0]
000092  7008              STRB     r0,[r1,#0]
000094  9800              LDR      r0,[sp,#0]
000096  1c40              ADDS     r0,r0,#1
000098  9000              STR      r0,[sp,#0]
                  |L1.154|
00009a  4630              MOV      r0,r6                 ;77
00009c  1c71              ADDS     r1,r6,#1              ;77
00009e  b2ce              UXTB     r6,r1                 ;77
0000a0  42a0              CMP      r0,r4                 ;77
0000a2  dbf4              BLT      |L1.142|
;;;79       }
;;;80       GUI_AddDecMin(v, &s);
0000a4  4669              MOV      r1,sp
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       GUI_AddDecMin
;;;81       GUI_DispString(ac);
0000ac  a801              ADD      r0,sp,#4
0000ae  f7fffffe          BL       GUI_DispString
;;;82     }
0000b2  bd7f              POP      {r0-r6,pc}
;;;83     
                          ENDP

                  GUI_DispSDec PROC
;;;87     */
;;;88     void GUI_DispSDec(I32 v, U8 Len) {
0000b4  b570              PUSH     {r4-r6,lr}
0000b6  4604              MOV      r4,r0
0000b8  460d              MOV      r5,r1
;;;89       GUI_DispSDecShift(v,Len,0);
0000ba  2200              MOVS     r2,#0
0000bc  4629              MOV      r1,r5
0000be  4620              MOV      r0,r4
0000c0  f7fffffe          BL       GUI_DispSDecShift
;;;90     }
0000c4  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

                  GUI_DispDec PROC
;;;95     */
;;;96     void GUI_DispDec(I32 v, U8 Len) {
0000c6  b570              PUSH     {r4-r6,lr}
0000c8  4604              MOV      r4,r0
0000ca  460d              MOV      r5,r1
;;;97       GUI_DispDecShift(v, Len,0);
0000cc  2200              MOVS     r2,#0
0000ce  4629              MOV      r1,r5
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       GUI_DispDecShift
;;;98     }
0000d6  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP

                  GUI_DispDecAt PROC
;;;103    */
;;;104    void GUI_DispDecAt(I32 v, I16P x, I16P y, U8 Len) {
0000d8  e92d41ff          PUSH     {r0-r8,lr}
0000dc  4605              MOV      r5,r0
0000de  460e              MOV      r6,r1
0000e0  4617              MOV      r7,r2
0000e2  461c              MOV      r4,r3
;;;105    	char ac[12];
;;;106    	char* s = ac;
0000e4  a801              ADD      r0,sp,#4
0000e6  9000              STR      r0,[sp,#0]
;;;107      GUI_AddDecShift(v, Len, 0, &s);
0000e8  466b              MOV      r3,sp
0000ea  2200              MOVS     r2,#0
0000ec  4621              MOV      r1,r4
0000ee  4628              MOV      r0,r5
0000f0  f7fffffe          BL       GUI_AddDecShift
;;;108      GUI_DispStringAt(ac, x, y);
0000f4  463a              MOV      r2,r7
0000f6  4631              MOV      r1,r6
0000f8  a801              ADD      r0,sp,#4
0000fa  f7fffffe          BL       GUI_DispStringAt
;;;109    }
0000fe  e8bd81ff          POP      {r0-r8,pc}
;;;110    
                          ENDP

